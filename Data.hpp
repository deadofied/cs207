#include <fstream>
#include <time.h>
#include <stdio.h> 
#include <stdlib.h> 
#include <math.h>
#include <algorithm>

#include "Graph.hpp"
#include "Point.hpp"

//===============
//NODE VALUE TYPE
//===============

struct NodeValue {
  NodeValue() : mass(10), group(3), displacement(Point(0.0, 0.0, 0.0)) {}
  NodeValue(double x, double y, double z) : mass(10), group(3), displacement(Point(x, y, z)) {}
  NodeValue(float m,unsigned grp):mass(m), velocity(Point(0.0, 0.0, 0.0)), group(grp)  {}
  float mass;
  Point velocity;
  unsigned group;
  Point displacement;
  float graphdist;
};


struct NodeValueFR {
  NodeValueFR() : displacement(Point(0.0, 0.0, 0.0)) {}
  NodeValueFR(double x, double y, double z) : displacement(Point(x, y, z)) {}

  Point displacement;
};


struct NodeValueKKSA {
  NodeValueKKSA() : color(8) {}
  NodeValueKKSA(int x) : color(x) {}

  int color;
  float graphdist;
};


// Define your Graph type; this is a placeholder.
typedef Graph<NodeValue,float> GraphType;
typedef GraphType::Node Node;


// Define your Graph type; this is a placeholder.
typedef Graph<NodeValueFR,float> GraphFR;
typedef GraphFR::Node NodeFR;
typedef GraphFR::Edge EdgeFR;

// Define your Graph type; this is a placeholder.
typedef Graph<NodeValueKKSA,float> GraphKKSA;
typedef GraphKKSA::Node NodeKKSA;
typedef GraphKKSA::Edge EdgeKKSA;


void initialize_les_miserables(GraphType& g,double min_win_size, double max_win_size, double m){
	

  srand (time(NULL));
  static std::mt19937 default_generator;
  std::uniform_real_distribution<double> dist(min_win_size, max_win_size);

  //Randomly Create Nodes
  auto n0 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n1 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n2 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n3 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n4 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n5 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n6 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n7 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n8 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n9 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n10 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n11 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n12 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,3));
  auto n13 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n14 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n15 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n16 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,3));
  auto n17 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,3));
  auto n18 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,3));
  auto n19 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,3));
  auto n20 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,3));
  auto n21 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,3));
  auto n22 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,3));
  auto n23 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,3));
  auto n24 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,4));
  auto n25 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,4));
  auto n26 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,5));
  auto n27 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,4));
  auto n28 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,0));
  auto n29 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n30 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,3));
  auto n31 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n32 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n33 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n34 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n35 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n36 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n37 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n38 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n39 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,4));
  auto n40 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,6));
  auto n41 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,4));
  auto n42 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,4));
  auto n43 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,5));
  auto n44 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,0));
  auto n45 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,0));
  auto n46 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,7));
  auto n47 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,7));
  auto n48 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n49 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,5));
  auto n50 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,5));
  auto n51 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,5));
  auto n52 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,5));
  auto n53 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,5));
  auto n54 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,5));
  auto n55 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n56 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,5));
  auto n57 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n58 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n59 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n60 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n61 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n62 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n63 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n64 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n65 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n66 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n67 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,9));
  auto n68 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,4));
  auto n69 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,4));
  auto n70 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,4));
  auto n71 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,4));
  auto n72 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,5));
  auto n73 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,10));
  auto n74 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,10));
  auto n75 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,4));
  auto n76 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  
  g.add_edge(n1,n0,1.0);
  g.add_edge(n2,n0,8.0);
  g.add_edge(n3,n0,10.0);
  g.add_edge(n3,n2,6.0);
  g.add_edge(n4,n0,1.0);
  g.add_edge(n5,n0,1.0);
  g.add_edge(n6,n0,1.0);
  g.add_edge(n7,n0,1.0);
  g.add_edge(n8,n0,2.0);
  g.add_edge(n9,n0,1.0);
  g.add_edge(n11,n10,1.0);
  g.add_edge(n11,n3,3.0);
  g.add_edge(n11,n2,3.0);
  g.add_edge(n11,n0,5.0);
  g.add_edge(n12,n11,1.0);
  g.add_edge(n13,n11,1.0);
  g.add_edge(n14,n11,1.0);
  g.add_edge(n15,n11,1.0);
  g.add_edge(n17,n16,4.0);
  g.add_edge(n18,n16,4.0);
  g.add_edge(n18,n17,4.0);
  g.add_edge(n19,n16,4.0);
  g.add_edge(n19,n17,4.0);
  g.add_edge(n19,n18,4.0);
  g.add_edge(n20,n16,3.0);
  g.add_edge(n20,n17,3.0);
  g.add_edge(n20,n18,3.0);
  g.add_edge(n20,n19,4.0);
  g.add_edge(n21,n16,3.0);
  g.add_edge(n21,n17,3.0);
  g.add_edge(n21,n18,3.0);
  g.add_edge(n21,n19,3.0);
  g.add_edge(n21,n20,5.0);
  g.add_edge(n22,n16,3.0);
  g.add_edge(n22,n17,3.0);
  g.add_edge(n22,n18,3.0);
  g.add_edge(n22,n19,3.0);
  g.add_edge(n22,n20,4.0);
  g.add_edge(n22,n21,4.0);
  g.add_edge(n23,n16,3.0);
  g.add_edge(n23,n17,3.0);
  g.add_edge(n23,n18,3.0);
  g.add_edge(n23,n19,3.0);
  g.add_edge(n23,n20,4.0);
  g.add_edge(n23,n21,4.0);
  g.add_edge(n23,n22,4.0);
  g.add_edge(n23,n12,2.0);
  g.add_edge(n23,n11,9.0);
  g.add_edge(n24,n23,2.0);
  g.add_edge(n24,n11,7.0);
  g.add_edge(n25,n24,13.0);
  g.add_edge(n25,n23,1.0);
  g.add_edge(n25,n11,12.0);
  g.add_edge(n26,n24,4.0);
  g.add_edge(n26,n11,31.0);
  g.add_edge(n26,n16,1.0);
  g.add_edge(n26,n25,1.0);
  g.add_edge(n27,n11,17.0);
  g.add_edge(n27,n23,5.0);
  g.add_edge(n27,n25,5.0);
  g.add_edge(n27,n24,1.0);
  g.add_edge(n27,n26,1.0);
  g.add_edge(n28,n11,8.0);
  g.add_edge(n28,n27,1.0);
  g.add_edge(n29,n23,1.0);
  g.add_edge(n29,n27,1.0);
  g.add_edge(n29,n11,2.0);
  g.add_edge(n30,n23,1.0);
  g.add_edge(n31,n30,2.0);
  g.add_edge(n31,n11,3.0);
  g.add_edge(n31,n23,2.0);
  g.add_edge(n31,n27,1.0);
  g.add_edge(n32,n11,1.0);
  g.add_edge(n33,n11,2.0);
  g.add_edge(n33,n27,1.0);
  g.add_edge(n34,n11,3.0);
  g.add_edge(n34,n29,2.0);
  g.add_edge(n35,n11,3.0);
  g.add_edge(n35,n34,3.0);
  g.add_edge(n35,n29,2.0);
  g.add_edge(n36,n34,2.0);
  g.add_edge(n36,n35,2.0);
  g.add_edge(n36,n11,2.0);
  g.add_edge(n36,n29,1.0);
  g.add_edge(n37,n34,2.0);
  g.add_edge(n37,n35,2.0);
  g.add_edge(n37,n36,2.0);
  g.add_edge(n37,n11,2.0);
  g.add_edge(n37,n29,1.0);
  g.add_edge(n38,n34,2.0);
  g.add_edge(n38,n35,2.0);
  g.add_edge(n38,n36,2.0);
  g.add_edge(n38,n37,2.0);
  g.add_edge(n38,n11,2.0);
  g.add_edge(n38,n29,1.0);
  g.add_edge(n39,n25,1.0);
  g.add_edge(n40,n25,1.0);
  g.add_edge(n41,n24,2.0);
  g.add_edge(n41,n25,3.0);
  g.add_edge(n42,n41,2.0);
  g.add_edge(n42,n25,2.0);
  g.add_edge(n42,n24,1.0);
  g.add_edge(n43,n11,3.0);
  g.add_edge(n43,n26,1.0);
  g.add_edge(n43,n27,1.0);
  g.add_edge(n44,n28,3.0);
  g.add_edge(n44,n11,1.0);
  g.add_edge(n45,n28,2.0);
  g.add_edge(n47,n46,1.0);
  g.add_edge(n48,n47,2.0);
  g.add_edge(n48,n25,1.0);
  g.add_edge(n48,n27,1.0);
  g.add_edge(n48,n11,1.0);
  g.add_edge(n49,n26,3.0);
  g.add_edge(n49,n11,2.0);
  g.add_edge(n50,n49,1.0);
  g.add_edge(n50,n24,1.0);
  g.add_edge(n51,n49,9.0);
  g.add_edge(n51,n26,2.0);
  g.add_edge(n51,n11,2.0);
  g.add_edge(n52,n51,1.0);
  g.add_edge(n52,n39,1.0);
  g.add_edge(n53,n51,1.0);
  g.add_edge(n54,n51,2.0);
  g.add_edge(n54,n49,1.0);
  g.add_edge(n54,n26,1.0);
  g.add_edge(n55,n51,6.0);
  g.add_edge(n55,n49,12.0);
  g.add_edge(n55,n39,1.0);
  g.add_edge(n55,n54,1.0);
  g.add_edge(n55,n26,21.0);
  g.add_edge(n55,n11,19.0);
  g.add_edge(n55,n16,1.0);
  g.add_edge(n55,n41,5.0);
  g.add_edge(n55,n48,4.0);
  g.add_edge(n56,n49,1.0);
  g.add_edge(n56,n55,1.0);
  g.add_edge(n57,n55,1.0);
  g.add_edge(n57,n41,1.0);
  g.add_edge(n57,n48,1.0);
  g.add_edge(n58,n55,7.0);
  g.add_edge(n58,n48,7.0);
  g.add_edge(n58,n27,6.0);
  g.add_edge(n58,n57,1.0);
  g.add_edge(n58,n11,4.0);
  g.add_edge(n59,n58,15.0);
  g.add_edge(n59,n55,5.0);
  g.add_edge(n59,n48,6.0);
  g.add_edge(n59,n57,2.0);
  g.add_edge(n60,n48,1.0);
  g.add_edge(n60,n58,4.0);
  g.add_edge(n60,n59,2.0);
  g.add_edge(n61,n48,2.0);
  g.add_edge(n61,n58,6.0);
  g.add_edge(n61,n60,2.0);
  g.add_edge(n61,n59,5.0);
  g.add_edge(n61,n57,1.0);
  g.add_edge(n61,n55,1.0);
  g.add_edge(n62,n55,9.0);
  g.add_edge(n62,n58,17.0);
  g.add_edge(n62,n59,13.0);
  g.add_edge(n62,n48,7.0);
  g.add_edge(n62,n57,2.0);
  g.add_edge(n62,n41,1.0);
  g.add_edge(n62,n61,6.0);
  g.add_edge(n62,n60,3.0);
  g.add_edge(n63,n59,5.0);
  g.add_edge(n63,n48,5.0);
  g.add_edge(n63,n62,6.0);
  g.add_edge(n63,n57,2.0);
  g.add_edge(n63,n58,4.0);
  g.add_edge(n63,n61,3.0);
  g.add_edge(n63,n60,2.0);
  g.add_edge(n63,n55,1.0);
  g.add_edge(n64,n55,5.0);
  g.add_edge(n64,n62,12.0);
  g.add_edge(n64,n48,5.0);
  g.add_edge(n64,n63,4.0);
  g.add_edge(n64,n58,10.0);
  g.add_edge(n64,n61,6.0);
  g.add_edge(n64,n60,2.0);
  g.add_edge(n64,n59,9.0);
  g.add_edge(n64,n57,1.0);
  g.add_edge(n64,n11,1.0);
  g.add_edge(n65,n63,5.0);
  g.add_edge(n65,n64,7.0);
  g.add_edge(n65,n48,3.0);
  g.add_edge(n65,n62,5.0);
  g.add_edge(n65,n58,5.0);
  g.add_edge(n65,n61,5.0);
  g.add_edge(n65,n60,2.0);
  g.add_edge(n65,n59,5.0);
  g.add_edge(n65,n57,1.0);
  g.add_edge(n65,n55,2.0);
  g.add_edge(n66,n64,3.0);
  g.add_edge(n66,n58,3.0);
  g.add_edge(n66,n59,1.0);
  g.add_edge(n66,n62,2.0);
  g.add_edge(n66,n65,2.0);
  g.add_edge(n66,n48,1.0);
  g.add_edge(n66,n63,1.0);
  g.add_edge(n66,n61,1.0);
  g.add_edge(n66,n60,1.0);
  g.add_edge(n67,n57,3.0);
  g.add_edge(n68,n25,5.0);
  g.add_edge(n68,n11,1.0);
  g.add_edge(n68,n24,1.0);
  g.add_edge(n68,n27,1.0);
  g.add_edge(n68,n48,1.0);
  g.add_edge(n68,n41,1.0);
  g.add_edge(n69,n25,6.0);
  g.add_edge(n69,n68,6.0);
  g.add_edge(n69,n11,1.0);
  g.add_edge(n69,n24,1.0);
  g.add_edge(n69,n27,2.0);
  g.add_edge(n69,n48,1.0);
  g.add_edge(n69,n41,1.0);
  g.add_edge(n70,n25,4.0);
  g.add_edge(n70,n69,4.0);
  g.add_edge(n70,n68,4.0);
  g.add_edge(n70,n11,1.0);
  g.add_edge(n70,n24,1.0);
  g.add_edge(n70,n27,1.0);
  g.add_edge(n70,n41,1.0);
  g.add_edge(n70,n58,1.0);
  g.add_edge(n71,n27,1.0);
  g.add_edge(n71,n69,2.0);
  g.add_edge(n71,n68,2.0);
  g.add_edge(n71,n70,2.0);
  g.add_edge(n71,n11,1.0);
  g.add_edge(n71,n48,1.0);
  g.add_edge(n71,n41,1.0);
  g.add_edge(n71,n25,1.0);
  g.add_edge(n72,n26,2.0);
  g.add_edge(n72,n27,1.0);
  g.add_edge(n72,n11,1.0);
  g.add_edge(n73,n48,2.0);
  g.add_edge(n74,n48,2.0);
  g.add_edge(n74,n73,3.0);
  g.add_edge(n75,n69,3.0);
  g.add_edge(n75,n68,3.0);
  g.add_edge(n75,n25,3.0);
  g.add_edge(n75,n48,1.0);
  g.add_edge(n75,n41,1.0);
  g.add_edge(n75,n70,1.0);
  g.add_edge(n75,n71,1.0);
  g.add_edge(n76,n64,1.0);
  g.add_edge(n76,n65,1.0);
  g.add_edge(n76,n66,1.0);
  g.add_edge(n76,n63,1.0);
  g.add_edge(n76,n62,1.0);
  g.add_edge(n76,n48,1.0);
  g.add_edge(n76,n58,1.0);
}



void initialize_fruchterman(GraphFR& g) {

  unsigned n_nodes = 6;
  //unsigned n_edges = 10;

  srand (time(NULL));
  static std::mt19937 default_generator;
  std::uniform_real_distribution<double> dist(0.0, 1.0);



  //Randomly Create Nodes
  std::vector<NodeFR> nod_;
  for(unsigned i=0; i<n_nodes;++i){
    double x = dist(default_generator);
    double y = dist(default_generator);
    double z = dist(default_generator);
    nod_.push_back(g.add_node(Point(x,y,z), NodeValueFR()));
  }
  
  //Create Edges
  std::vector<EdgeFR> edg_;
  edg_.push_back(g.add_edge(nod_[0],nod_[1]));
  edg_.push_back(g.add_edge(nod_[0],nod_[2]));
  edg_.push_back(g.add_edge(nod_[1],nod_[2]));
  edg_.push_back(g.add_edge(nod_[2],nod_[4]));
  edg_.push_back(g.add_edge(nod_[3],nod_[4]));
  edg_.push_back(g.add_edge(nod_[4],nod_[1]));
  edg_.push_back(g.add_edge(nod_[4],nod_[5]));
}


void initialize_square(GraphKKSA& g) {
  static std::mt19937 default_generator;
  std::uniform_real_distribution<double> dist(0.0, 1.0);

  auto n0  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n1  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n2  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n3  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n4  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n5  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n6  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n7  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n8  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n9  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n10 = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n11 = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n12 = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n13 = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n14 = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  auto n15 = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA());
  
  g.add_edge(n0,n1,0.1);
  g.add_edge(n0,n2,0.1);
  g.add_edge(n1,n3,0.1);
  g.add_edge(n1,n4,0.1);
  g.add_edge(n2,n4,0.1);
  g.add_edge(n2,n5,0.1);
  g.add_edge(n3,n6,0.1);
  g.add_edge(n3,n7,0.1);
  g.add_edge(n4,n7,0.1);
  g.add_edge(n4,n8,0.1);
  g.add_edge(n5,n8,0.1);
  g.add_edge(n5,n9,0.1);
  g.add_edge(n6,n10,0.1);
  g.add_edge(n7,n10,0.1);
  g.add_edge(n7,n11,0.1);
  g.add_edge(n8,n11,0.1);
  g.add_edge(n8,n12,0.1);
  g.add_edge(n9,n12,0.1);
  g.add_edge(n14,n12,0.1);
  g.add_edge(n14,n11,0.1);
  g.add_edge(n13,n11,0.1);
  g.add_edge(n13,n10,0.1);
  g.add_edge(n15,n14,0.1);
  g.add_edge(n15,n13,0.1);
}

void initialize_les_miserables_KKSA(GraphKKSA& g) {
  static std::mt19937 default_generator;
  std::uniform_real_distribution<double> dist(0.0, 1.0);

  auto n0 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n1 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n2 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n3 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n4 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n5 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n6 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n7 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n8 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n9 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n10 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n11 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n12 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n13 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n14 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n15 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n16 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n17 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n18 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n19 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n20 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n21 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n22 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n23 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n24 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n25 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n26 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n27 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n28 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n29 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n30 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n31 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n32 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n33 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n34 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n35 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n36 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n37 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n38 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n39 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n40 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n41 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n42 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n43 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n44 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n45 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n46 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n47 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n48 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n49 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n50 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n51 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n52 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n53 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n54 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n55 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n56 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n57 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n58 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n59 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n60 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n61 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n62 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n63 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n64 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n65 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n66 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n67 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n68 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n69 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n70 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n71 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n72 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n73 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n74 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n75 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n76 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  
  g.add_edge(n1,n0,1.0);
  g.add_edge(n2,n0,8.0);
  g.add_edge(n3,n0,10.0);
  g.add_edge(n3,n2,6.0);
  g.add_edge(n4,n0,1.0);
  g.add_edge(n5,n0,1.0);
  g.add_edge(n6,n0,1.0);
  g.add_edge(n7,n0,1.0);
  g.add_edge(n8,n0,2.0);
  g.add_edge(n9,n0,1.0);
  g.add_edge(n11,n10,1.0);
  g.add_edge(n11,n3,3.0);
  g.add_edge(n11,n2,3.0);
  g.add_edge(n11,n0,5.0);
  g.add_edge(n12,n11,1.0);
  g.add_edge(n13,n11,1.0);
  g.add_edge(n14,n11,1.0);
  g.add_edge(n15,n11,1.0);
  g.add_edge(n17,n16,4.0);
  g.add_edge(n18,n16,4.0);
  g.add_edge(n18,n17,4.0);
  g.add_edge(n19,n16,4.0);
  g.add_edge(n19,n17,4.0);
  g.add_edge(n19,n18,4.0);
  g.add_edge(n20,n16,3.0);
  g.add_edge(n20,n17,3.0);
  g.add_edge(n20,n18,3.0);
  g.add_edge(n20,n19,4.0);
  g.add_edge(n21,n16,3.0);
  g.add_edge(n21,n17,3.0);
  g.add_edge(n21,n18,3.0);
  g.add_edge(n21,n19,3.0);
  g.add_edge(n21,n20,5.0);
  g.add_edge(n22,n16,3.0);
  g.add_edge(n22,n17,3.0);
  g.add_edge(n22,n18,3.0);
  g.add_edge(n22,n19,3.0);
  g.add_edge(n22,n20,4.0);
  g.add_edge(n22,n21,4.0);
  g.add_edge(n23,n16,3.0);
  g.add_edge(n23,n17,3.0);
  g.add_edge(n23,n18,3.0);
  g.add_edge(n23,n19,3.0);
  g.add_edge(n23,n20,4.0);
  g.add_edge(n23,n21,4.0);
  g.add_edge(n23,n22,4.0);
  g.add_edge(n23,n12,2.0);
  g.add_edge(n23,n11,9.0);
  g.add_edge(n24,n23,2.0);
  g.add_edge(n24,n11,7.0);
  g.add_edge(n25,n24,13.0);
  g.add_edge(n25,n23,1.0);
  g.add_edge(n25,n11,12.0);
  g.add_edge(n26,n24,4.0);
  g.add_edge(n26,n11,31.0);
  g.add_edge(n26,n16,1.0);
  g.add_edge(n26,n25,1.0);
  g.add_edge(n27,n11,17.0);
  g.add_edge(n27,n23,5.0);
  g.add_edge(n27,n25,5.0);
  g.add_edge(n27,n24,1.0);
  g.add_edge(n27,n26,1.0);
  g.add_edge(n28,n11,8.0);
  g.add_edge(n28,n27,1.0);
  g.add_edge(n29,n23,1.0);
  g.add_edge(n29,n27,1.0);
  g.add_edge(n29,n11,2.0);
  g.add_edge(n30,n23,1.0);
  g.add_edge(n31,n30,2.0);
  g.add_edge(n31,n11,3.0);
  g.add_edge(n31,n23,2.0);
  g.add_edge(n31,n27,1.0);
  g.add_edge(n32,n11,1.0);
  g.add_edge(n33,n11,2.0);
  g.add_edge(n33,n27,1.0);
  g.add_edge(n34,n11,3.0);
  g.add_edge(n34,n29,2.0);
  g.add_edge(n35,n11,3.0);
  g.add_edge(n35,n34,3.0);
  g.add_edge(n35,n29,2.0);
  g.add_edge(n36,n34,2.0);
  g.add_edge(n36,n35,2.0);
  g.add_edge(n36,n11,2.0);
  g.add_edge(n36,n29,1.0);
  g.add_edge(n37,n34,2.0);
  g.add_edge(n37,n35,2.0);
  g.add_edge(n37,n36,2.0);
  g.add_edge(n37,n11,2.0);
  g.add_edge(n37,n29,1.0);
  g.add_edge(n38,n34,2.0);
  g.add_edge(n38,n35,2.0);
  g.add_edge(n38,n36,2.0);
  g.add_edge(n38,n37,2.0);
  g.add_edge(n38,n11,2.0);
  g.add_edge(n38,n29,1.0);
  g.add_edge(n39,n25,1.0);
  g.add_edge(n40,n25,1.0);
  g.add_edge(n41,n24,2.0);
  g.add_edge(n41,n25,3.0);
  g.add_edge(n42,n41,2.0);
  g.add_edge(n42,n25,2.0);
  g.add_edge(n42,n24,1.0);
  g.add_edge(n43,n11,3.0);
  g.add_edge(n43,n26,1.0);
  g.add_edge(n43,n27,1.0);
  g.add_edge(n44,n28,3.0);
  g.add_edge(n44,n11,1.0);
  g.add_edge(n45,n28,2.0);
  g.add_edge(n47,n46,1.0);
  g.add_edge(n48,n47,2.0);
  g.add_edge(n48,n25,1.0);
  g.add_edge(n48,n27,1.0);
  g.add_edge(n48,n11,1.0);
  g.add_edge(n49,n26,3.0);
  g.add_edge(n49,n11,2.0);
  g.add_edge(n50,n49,1.0);
  g.add_edge(n50,n24,1.0);
  g.add_edge(n51,n49,9.0);
  g.add_edge(n51,n26,2.0);
  g.add_edge(n51,n11,2.0);
  g.add_edge(n52,n51,1.0);
  g.add_edge(n52,n39,1.0);
  g.add_edge(n53,n51,1.0);
  g.add_edge(n54,n51,2.0);
  g.add_edge(n54,n49,1.0);
  g.add_edge(n54,n26,1.0);
  g.add_edge(n55,n51,6.0);
  g.add_edge(n55,n49,12.0);
  g.add_edge(n55,n39,1.0);
  g.add_edge(n55,n54,1.0);
  g.add_edge(n55,n26,21.0);
  g.add_edge(n55,n11,19.0);
  g.add_edge(n55,n16,1.0);
  g.add_edge(n55,n41,5.0);
  g.add_edge(n55,n48,4.0);
  g.add_edge(n56,n49,1.0);
  g.add_edge(n56,n55,1.0);
  g.add_edge(n57,n55,1.0);
  g.add_edge(n57,n41,1.0);
  g.add_edge(n57,n48,1.0);
  g.add_edge(n58,n55,7.0);
  g.add_edge(n58,n48,7.0);
  g.add_edge(n58,n27,6.0);
  g.add_edge(n58,n57,1.0);
  g.add_edge(n58,n11,4.0);
  g.add_edge(n59,n58,15.0);
  g.add_edge(n59,n55,5.0);
  g.add_edge(n59,n48,6.0);
  g.add_edge(n59,n57,2.0);
  g.add_edge(n60,n48,1.0);
  g.add_edge(n60,n58,4.0);
  g.add_edge(n60,n59,2.0);
  g.add_edge(n61,n48,2.0);
  g.add_edge(n61,n58,6.0);
  g.add_edge(n61,n60,2.0);
  g.add_edge(n61,n59,5.0);
  g.add_edge(n61,n57,1.0);
  g.add_edge(n61,n55,1.0);
  g.add_edge(n62,n55,9.0);
  g.add_edge(n62,n58,17.0);
  g.add_edge(n62,n59,13.0);
  g.add_edge(n62,n48,7.0);
  g.add_edge(n62,n57,2.0);
  g.add_edge(n62,n41,1.0);
  g.add_edge(n62,n61,6.0);
  g.add_edge(n62,n60,3.0);
  g.add_edge(n63,n59,5.0);
  g.add_edge(n63,n48,5.0);
  g.add_edge(n63,n62,6.0);
  g.add_edge(n63,n57,2.0);
  g.add_edge(n63,n58,4.0);
  g.add_edge(n63,n61,3.0);
  g.add_edge(n63,n60,2.0);
  g.add_edge(n63,n55,1.0);
  g.add_edge(n64,n55,5.0);
  g.add_edge(n64,n62,12.0);
  g.add_edge(n64,n48,5.0);
  g.add_edge(n64,n63,4.0);
  g.add_edge(n64,n58,10.0);
  g.add_edge(n64,n61,6.0);
  g.add_edge(n64,n60,2.0);
  g.add_edge(n64,n59,9.0);
  g.add_edge(n64,n57,1.0);
  g.add_edge(n64,n11,1.0);
  g.add_edge(n65,n63,5.0);
  g.add_edge(n65,n64,7.0);
  g.add_edge(n65,n48,3.0);
  g.add_edge(n65,n62,5.0);
  g.add_edge(n65,n58,5.0);
  g.add_edge(n65,n61,5.0);
  g.add_edge(n65,n60,2.0);
  g.add_edge(n65,n59,5.0);
  g.add_edge(n65,n57,1.0);
  g.add_edge(n65,n55,2.0);
  g.add_edge(n66,n64,3.0);
  g.add_edge(n66,n58,3.0);
  g.add_edge(n66,n59,1.0);
  g.add_edge(n66,n62,2.0);
  g.add_edge(n66,n65,2.0);
  g.add_edge(n66,n48,1.0);
  g.add_edge(n66,n63,1.0);
  g.add_edge(n66,n61,1.0);
  g.add_edge(n66,n60,1.0);
  g.add_edge(n67,n57,3.0);
  g.add_edge(n68,n25,5.0);
  g.add_edge(n68,n11,1.0);
  g.add_edge(n68,n24,1.0);
  g.add_edge(n68,n27,1.0);
  g.add_edge(n68,n48,1.0);
  g.add_edge(n68,n41,1.0);
  g.add_edge(n69,n25,6.0);
  g.add_edge(n69,n68,6.0);
  g.add_edge(n69,n11,1.0);
  g.add_edge(n69,n24,1.0);
  g.add_edge(n69,n27,2.0);
  g.add_edge(n69,n48,1.0);
  g.add_edge(n69,n41,1.0);
  g.add_edge(n70,n25,4.0);
  g.add_edge(n70,n69,4.0);
  g.add_edge(n70,n68,4.0);
  g.add_edge(n70,n11,1.0);
  g.add_edge(n70,n24,1.0);
  g.add_edge(n70,n27,1.0);
  g.add_edge(n70,n41,1.0);
  g.add_edge(n70,n58,1.0);
  g.add_edge(n71,n27,1.0);
  g.add_edge(n71,n69,2.0);
  g.add_edge(n71,n68,2.0);
  g.add_edge(n71,n70,2.0);
  g.add_edge(n71,n11,1.0);
  g.add_edge(n71,n48,1.0);
  g.add_edge(n71,n41,1.0);
  g.add_edge(n71,n25,1.0);
  g.add_edge(n72,n26,2.0);
  g.add_edge(n72,n27,1.0);
  g.add_edge(n72,n11,1.0);
  g.add_edge(n73,n48,2.0);
  g.add_edge(n74,n48,2.0);
  g.add_edge(n74,n73,3.0);
  g.add_edge(n75,n69,3.0);
  g.add_edge(n75,n68,3.0);
  g.add_edge(n75,n25,3.0);
  g.add_edge(n75,n48,1.0);
  g.add_edge(n75,n41,1.0);
  g.add_edge(n75,n70,1.0);
  g.add_edge(n75,n71,1.0);
  g.add_edge(n76,n64,1.0);
  g.add_edge(n76,n65,1.0);
  g.add_edge(n76,n66,1.0);
  g.add_edge(n76,n63,1.0);
  g.add_edge(n76,n62,1.0);
  g.add_edge(n76,n48,1.0);
  g.add_edge(n76,n58,1.0);
}

void initialize_karate(GraphKKSA& g) {
  static std::mt19937 default_generator;
  std::uniform_real_distribution<double> dist(0.0, 1.0);

  auto n0 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n1 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n2 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n3 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n4 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n5 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n6 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n7 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n8 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n9 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n10 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n11 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n12 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n13 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n14 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n15 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n16 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n17 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n18 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n19 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n20 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n21 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n22 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n23 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n24 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n25 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n26 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n27 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n28 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n29 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n30 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n31 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n32 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());
  auto n33 = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValueKKSA());

  g.add_edge(n1,n0,1);
  g.add_edge(n2,n0,1);
  g.add_edge(n2,n1,1);
  g.add_edge(n3,n0,1);
  g.add_edge(n3,n1,1);
  g.add_edge(n3,n2,1);
  g.add_edge(n4,n0,1);
  g.add_edge(n5,n0,1);
  g.add_edge(n6,n0,1);
  g.add_edge(n6,n4,1);
  g.add_edge(n6,n5,1);
  g.add_edge(n7,n0,1);
  g.add_edge(n7,n1,1);
  g.add_edge(n7,n2,1);
  g.add_edge(n7,n3,1);
  g.add_edge(n8,n0,1);
  g.add_edge(n8,n2,1);
  g.add_edge(n9,n2,1);
  g.add_edge(n10,n0,1);
  g.add_edge(n10,n4,1);
  g.add_edge(n10,n5,1);
  g.add_edge(n11,n0,1);
  g.add_edge(n12,n0,1);
  g.add_edge(n12,n3,1);
  g.add_edge(n13,n0,1);
  g.add_edge(n13,n1,1);
  g.add_edge(n13,n2,1);
  g.add_edge(n13,n3,1);
  g.add_edge(n16,n5,1);
  g.add_edge(n16,n6,1);
  g.add_edge(n17,n0,1);
  g.add_edge(n17,n1,1);
  g.add_edge(n19,n0,1);
  g.add_edge(n19,n1,1);
  g.add_edge(n21,n0,1);
  g.add_edge(n21,n1,1);
  g.add_edge(n25,n23,1);
  g.add_edge(n25,n24,1);
  g.add_edge(n27,n2,1);
  g.add_edge(n27,n23,1);
  g.add_edge(n27,n24,1);
  g.add_edge(n28,n2,1);
  g.add_edge(n29,n23,1);
  g.add_edge(n29,n26,1);
  g.add_edge(n30,n1,1);
  g.add_edge(n30,n8,1);
  g.add_edge(n31,n0,1);
  g.add_edge(n31,n24,1);
  g.add_edge(n31,n25,1);
  g.add_edge(n31,n28,1);
  g.add_edge(n32,n2,1);
  g.add_edge(n32,n8,1);
  g.add_edge(n32,n14,1);
  g.add_edge(n32,n15,1);
  g.add_edge(n32,n18,1);
  g.add_edge(n32,n20,1);
  g.add_edge(n32,n22,1);
  g.add_edge(n32,n23,1);
  g.add_edge(n32,n29,1);
  g.add_edge(n32,n30,1);
  g.add_edge(n32,n31,1);
  g.add_edge(n33,n8,1);
  g.add_edge(n33,n9,1);
  g.add_edge(n33,n13,1);
  g.add_edge(n33,n14,1);
  g.add_edge(n33,n15,1);
  g.add_edge(n33,n18,1);
  g.add_edge(n33,n19,1);
  g.add_edge(n33,n20,1);
  g.add_edge(n33,n22,1);
  g.add_edge(n33,n23,1);
  g.add_edge(n33,n26,1);
  g.add_edge(n33,n27,1);
  g.add_edge(n33,n28,1);
  g.add_edge(n33,n29,1);
  g.add_edge(n33,n30,1);
  g.add_edge(n33,n31,1);
  g.add_edge(n33,n32,1);

}


void initialize_senate_kk(GraphKKSA& g) {
  static std::mt19937 default_generator;
  std::uniform_real_distribution<double> dist(0.0, 1.0);

  auto n0  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n1  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n2  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n3  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n4  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n5  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n6  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n7  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n8  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n9  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n10  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n11  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n12  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n13  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n14  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n15  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n16  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n17  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n18  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n19  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n20  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n21  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n22  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n23  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n24  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n25  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n26  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n27  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n28  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n29  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n30  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n31  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n32  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n33  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n34  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n35  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n36  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n37  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n38  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n39  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n40  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n41  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n42  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n43  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n44  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n45  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n46  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n47  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n48  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n49  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n50  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n51  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n52  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n53  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n54  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n55  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n56  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n57  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n58  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n59  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n60  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n61  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n62  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n63  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n64  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n65  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n66  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n67  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(8));
  auto n68  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n69  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n70  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n71  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n72  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n73  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n74  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n75  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n76  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n77  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n78  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n79  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n80  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n81  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n82  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n83  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n84  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n85  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(8));
  auto n86  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n87  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n88  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n89  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n90  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n91  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n92  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n93  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n94  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n95  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));
  auto n96  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n97  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n98  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n99  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n100  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n101  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(1));
  auto n102  = g.add_node(Point(dist(default_generator),dist(default_generator),dist(default_generator)),NodeValueKKSA(2));

  g.add_edge(n0,n8,1.02040816327);
  g.add_edge(n0,n32,33.3333333333);
  g.add_edge(n0,n36,1.49253731343);
  g.add_edge(n0,n41,1.72413793103);
  g.add_edge(n0,n43,9.09090909091);
  g.add_edge(n0,n50,3.0303030303);
  g.add_edge(n0,n72,14.2857142857);
  g.add_edge(n1,n9,1.17647058824);
  g.add_edge(n1,n12,1.5625);
  g.add_edge(n1,n13,1.6393442623);
  g.add_edge(n1,n24,1.28205128205);
  g.add_edge(n1,n26,1.19047619048);
  g.add_edge(n1,n28,1.61290322581);
  g.add_edge(n1,n30,1.40845070423);
  g.add_edge(n1,n37,1.2987012987);
  g.add_edge(n1,n43,3.125);
  g.add_edge(n1,n44,1.53846153846);
  g.add_edge(n1,n61,1.5625);
  g.add_edge(n1,n77,1.17647058824);
  g.add_edge(n1,n95,1.0101010101);
  g.add_edge(n1,n102,1.12359550562);
  g.add_edge(n2,n32,100.0);
  g.add_edge(n2,n43,10.0);
  g.add_edge(n2,n50,2.94117647059);
  g.add_edge(n3,n24,1.26582278481);
  g.add_edge(n3,n28,1.5625);
  g.add_edge(n3,n30,1.33333333333);
  g.add_edge(n3,n37,1.26582278481);
  g.add_edge(n3,n44,1.47058823529);
  g.add_edge(n3,n61,1.53846153846);
  g.add_edge(n3,n77,1.13636363636);
  g.add_edge(n3,n102,1.13636363636);
  g.add_edge(n4,n9,1.31578947368);
  g.add_edge(n4,n11,1.14942528736);
  g.add_edge(n4,n12,1.69491525424);
  g.add_edge(n4,n13,1.75438596491);
  g.add_edge(n4,n17,1.5625);
  g.add_edge(n4,n24,1.42857142857);
  g.add_edge(n4,n26,1.2987012987);
  g.add_edge(n4,n27,1.53846153846);
  g.add_edge(n4,n28,1.85185185185);
  g.add_edge(n4,n29,1.5873015873);
  g.add_edge(n4,n30,1.5625);
  g.add_edge(n4,n32,25.0);
  g.add_edge(n4,n35,1.96078431373);
  g.add_edge(n4,n37,1.44927536232);
  g.add_edge(n4,n38,1.69491525424);
  g.add_edge(n4,n41,2.5641025641);
  g.add_edge(n4,n43,3.0303030303);
  g.add_edge(n4,n44,1.75438596491);
  g.add_edge(n4,n48,1.92307692308);
  g.add_edge(n4,n51,1.0752688172);
  g.add_edge(n4,n53,1.47058823529);
  g.add_edge(n4,n61,1.85185185185);
  g.add_edge(n4,n66,1.14942528736);
  g.add_edge(n4,n69,1.02040816327);
  g.add_edge(n4,n72,1.53846153846);
  g.add_edge(n4,n73,1.26582278481);
  g.add_edge(n4,n77,1.33333333333);
  g.add_edge(n4,n79,1.03092783505);
  g.add_edge(n4,n81,1.44927536232);
  g.add_edge(n4,n82,1.14942528736);
  g.add_edge(n4,n91,1.16279069767);
  g.add_edge(n4,n95,1.11111111111);
  g.add_edge(n4,n102,1.23456790123);
  g.add_edge(n5,n9,1.26582278481);
  g.add_edge(n5,n12,1.72413793103);
  g.add_edge(n5,n13,1.85185185185);
  g.add_edge(n5,n24,1.44927536232);
  g.add_edge(n5,n26,1.28205128205);
  g.add_edge(n5,n28,1.81818181818);
  g.add_edge(n5,n30,1.53846153846);
  g.add_edge(n5,n37,1.47058823529);
  g.add_edge(n5,n44,1.72413793103);
  g.add_edge(n5,n61,1.81818181818);
  g.add_edge(n5,n77,1.28205128205);
  g.add_edge(n5,n95,1.0752688172);
  g.add_edge(n5,n102,1.28205128205);
  g.add_edge(n6,n9,1.20481927711);
  g.add_edge(n6,n12,1.5625);
  g.add_edge(n6,n13,1.72413793103);
  g.add_edge(n6,n17,1.40845070423);
  g.add_edge(n6,n24,1.3698630137);
  g.add_edge(n6,n26,1.21951219512);
  g.add_edge(n6,n28,1.6393442623);
  g.add_edge(n6,n29,1.47058823529);
  g.add_edge(n6,n30,1.44927536232);
  g.add_edge(n6,n32,25.0);
  g.add_edge(n6,n35,1.75438596491);
  g.add_edge(n6,n37,1.31578947368);
  g.add_edge(n6,n43,3.125);
  g.add_edge(n6,n44,1.5625);
  g.add_edge(n6,n48,1.69491525424);
  g.add_edge(n6,n53,1.3698630137);
  g.add_edge(n6,n61,1.69491525424);
  g.add_edge(n6,n66,1.06382978723);
  g.add_edge(n6,n73,1.16279069767);
  g.add_edge(n6,n77,1.21951219512);
  g.add_edge(n6,n81,1.35135135135);
  g.add_edge(n6,n91,1.12359550562);
  g.add_edge(n6,n95,1.03092783505);
  g.add_edge(n6,n102,1.16279069767);
  g.add_edge(n7,n9,1.26582278481);
  g.add_edge(n7,n12,1.75438596491);
  g.add_edge(n7,n13,2.0);
  g.add_edge(n7,n24,1.49253731343);
  g.add_edge(n7,n26,1.28205128205);
  g.add_edge(n7,n28,1.72413793103);
  g.add_edge(n7,n30,1.53846153846);
  g.add_edge(n7,n32,25.0);
  g.add_edge(n7,n35,1.92307692308);
  g.add_edge(n7,n37,1.47058823529);
  g.add_edge(n7,n43,3.125);
  g.add_edge(n7,n44,1.78571428571);
  g.add_edge(n7,n53,1.51515151515);
  g.add_edge(n7,n61,1.81818181818);
  g.add_edge(n7,n77,1.25);
  g.add_edge(n7,n91,1.21951219512);
  g.add_edge(n7,n95,1.0752688172);
  g.add_edge(n7,n102,1.25);
  g.add_edge(n8,n9,1.44927536232);
  g.add_edge(n8,n11,1.33333333333);
  g.add_edge(n8,n12,2.0);
  g.add_edge(n8,n13,2.04081632653);
  g.add_edge(n8,n17,1.75438596491);
  g.add_edge(n8,n24,1.6393442623);
  g.add_edge(n8,n25,1.11111111111);
  g.add_edge(n8,n26,1.49253731343);
  g.add_edge(n8,n28,2.0);
  g.add_edge(n8,n29,1.78571428571);
  g.add_edge(n8,n30,1.81818181818);
  g.add_edge(n8,n32,25.0);
  g.add_edge(n8,n35,2.22222222222);
  g.add_edge(n8,n37,1.66666666667);
  g.add_edge(n8,n38,2.0);
  g.add_edge(n8,n41,2.5641025641);
  g.add_edge(n8,n43,3.0303030303);
  g.add_edge(n8,n44,2.04081632653);
  g.add_edge(n8,n48,2.27272727273);
  g.add_edge(n8,n51,1.19047619048);
  g.add_edge(n8,n53,1.69491525424);
  g.add_edge(n8,n61,2.04081632653);
  g.add_edge(n8,n66,1.28205128205);
  g.add_edge(n8,n68,1.0989010989);
  g.add_edge(n8,n71,1.04166666667);
  g.add_edge(n8,n73,1.42857142857);
  g.add_edge(n8,n77,1.44927536232);
  g.add_edge(n8,n79,1.13636363636);
  g.add_edge(n8,n81,1.69491525424);
  g.add_edge(n8,n90,1.03092783505);
  g.add_edge(n8,n91,1.26582278481);
  g.add_edge(n8,n94,1.0101010101);
  g.add_edge(n8,n95,1.20481927711);
  g.add_edge(n8,n102,1.40845070423);
  g.add_edge(n9,n3,1.12359550562);
  g.add_edge(n9,n22,1.40845070423);
  g.add_edge(n9,n34,1.31578947368);
  g.add_edge(n9,n49,1.3698630137);
  g.add_edge(n9,n52,1.28205128205);
  g.add_edge(n9,n56,1.2987012987);
  g.add_edge(n9,n62,1.3698630137);
  g.add_edge(n9,n63,1.31578947368);
  g.add_edge(n9,n65,1.25);
  g.add_edge(n9,n74,1.33333333333);
  g.add_edge(n9,n80,1.26582278481);
  g.add_edge(n9,n83,1.21951219512);
  g.add_edge(n9,n85,1.3698630137);
  g.add_edge(n9,n87,1.38888888889);
  g.add_edge(n9,n89,1.08695652174);
  g.add_edge(n9,n92,1.11111111111);
  g.add_edge(n9,n98,1.19047619048);
  g.add_edge(n9,n99,1.31578947368);
  g.add_edge(n11,n1,1.05263157895);
  g.add_edge(n11,n3,1.04166666667);
  g.add_edge(n11,n5,1.21951219512);
  g.add_edge(n11,n6,1.08695652174);
  g.add_edge(n11,n7,1.19047619048);
  g.add_edge(n11,n18,1.12359550562);
  g.add_edge(n11,n21,1.0752688172);
  g.add_edge(n11,n22,1.19047619048);
  g.add_edge(n11,n33,1.17647058824);
  g.add_edge(n11,n34,1.17647058824);
  g.add_edge(n11,n36,2.12765957447);
  g.add_edge(n11,n42,1.21951219512);
  g.add_edge(n11,n43,14.2857142857);
  g.add_edge(n11,n45,1.12359550562);
  g.add_edge(n11,n49,1.17647058824);
  g.add_edge(n11,n50,3.125);
  g.add_edge(n11,n52,1.14942528736);
  g.add_edge(n11,n55,1.14942528736);
  g.add_edge(n11,n56,1.16279069767);
  g.add_edge(n11,n58,1.05263157895);
  g.add_edge(n11,n60,1.17647058824);
  g.add_edge(n11,n62,1.19047619048);
  g.add_edge(n11,n63,1.16279069767);
  g.add_edge(n11,n65,1.17647058824);
  g.add_edge(n11,n67,1.0101010101);
  g.add_edge(n11,n70,1.05263157895);
  g.add_edge(n11,n74,1.17647058824);
  g.add_edge(n11,n80,1.0989010989);
  g.add_edge(n11,n83,1.12359550562);
  g.add_edge(n11,n85,1.28205128205);
  g.add_edge(n11,n86,1.11111111111);
  g.add_edge(n11,n87,1.23456790123);
  g.add_edge(n11,n88,1.19047619048);
  g.add_edge(n11,n89,1.0101010101);
  g.add_edge(n11,n92,1.04166666667);
  g.add_edge(n11,n96,1.20481927711);
  g.add_edge(n11,n98,1.0752688172);
  g.add_edge(n11,n99,1.14942528736);
  g.add_edge(n11,n101,1.0989010989);
  g.add_edge(n12,n3,1.47058823529);
  g.add_edge(n12,n22,1.75438596491);
  g.add_edge(n12,n49,1.78571428571);
  g.add_edge(n12,n52,1.66666666667);
  g.add_edge(n12,n56,1.72413793103);
  g.add_edge(n12,n62,1.75438596491);
  g.add_edge(n12,n64,1.05263157895);
  g.add_edge(n12,n65,1.69491525424);
  g.add_edge(n12,n74,1.85185185185);
  g.add_edge(n12,n80,1.44927536232);
  g.add_edge(n12,n85,1.72413793103);
  g.add_edge(n12,n87,1.88679245283);
  g.add_edge(n12,n89,1.23456790123);
  g.add_edge(n12,n92,1.42857142857);
  g.add_edge(n12,n98,1.53846153846);
  g.add_edge(n12,n99,1.47058823529);
  g.add_edge(n13,n3,1.61290322581);
  g.add_edge(n13,n22,1.81818181818);
  g.add_edge(n13,n31,1.42857142857);
  g.add_edge(n13,n34,1.85185185185);
  g.add_edge(n13,n49,1.88679245283);
  g.add_edge(n13,n50,5.55555555556);
  g.add_edge(n13,n52,1.72413793103);
  g.add_edge(n13,n55,1.81818181818);
  g.add_edge(n13,n56,1.85185185185);
  g.add_edge(n13,n60,1.92307692308);
  g.add_edge(n13,n62,1.75438596491);
  g.add_edge(n13,n63,1.85185185185);
  g.add_edge(n13,n64,1.11111111111);
  g.add_edge(n13,n65,1.81818181818);
  g.add_edge(n13,n74,1.96078431373);
  g.add_edge(n13,n80,1.53846153846);
  g.add_edge(n13,n83,1.72413793103);
  g.add_edge(n13,n85,1.69491525424);
  g.add_edge(n13,n87,1.96078431373);
  g.add_edge(n13,n88,1.81818181818);
  g.add_edge(n13,n89,1.3698630137);
  g.add_edge(n13,n92,1.5625);
  g.add_edge(n13,n96,1.5625);
  g.add_edge(n13,n98,1.66666666667);
  g.add_edge(n13,n99,1.5873015873);
  g.add_edge(n14,n9,1.31578947368);
  g.add_edge(n14,n11,1.16279069767);
  g.add_edge(n14,n12,1.75438596491);
  g.add_edge(n14,n13,1.88679245283);
  g.add_edge(n14,n17,1.5625);
  g.add_edge(n14,n24,1.40845070423);
  g.add_edge(n14,n26,1.33333333333);
  g.add_edge(n14,n28,1.85185185185);
  g.add_edge(n14,n29,1.5873015873);
  g.add_edge(n14,n30,1.61290322581);
  g.add_edge(n14,n32,25.0);
  g.add_edge(n14,n35,2.0);
  g.add_edge(n14,n37,1.49253731343);
  g.add_edge(n14,n38,1.75438596491);
  g.add_edge(n14,n41,2.5641025641);
  g.add_edge(n14,n43,3.0303030303);
  g.add_edge(n14,n44,1.81818181818);
  g.add_edge(n14,n48,1.96078431373);
  g.add_edge(n14,n53,1.51515151515);
  g.add_edge(n14,n61,1.85185185185);
  g.add_edge(n14,n66,1.14942528736);
  g.add_edge(n14,n73,1.2987012987);
  g.add_edge(n14,n77,1.33333333333);
  g.add_edge(n14,n79,1.03092783505);
  g.add_edge(n14,n81,1.49253731343);
  g.add_edge(n14,n91,1.19047619048);
  g.add_edge(n14,n95,1.11111111111);
  g.add_edge(n14,n102,1.25);
  g.add_edge(n15,n32,50.0);
  g.add_edge(n15,n36,1.53846153846);
  g.add_edge(n15,n43,10.0);
  g.add_edge(n15,n50,2.38095238095);
  g.add_edge(n16,n9,1.20481927711);
  g.add_edge(n16,n11,1.06382978723);
  g.add_edge(n16,n12,1.49253731343);
  g.add_edge(n16,n13,1.5873015873);
  g.add_edge(n16,n17,1.40845070423);
  g.add_edge(n16,n24,1.28205128205);
  g.add_edge(n16,n26,1.17647058824);
  g.add_edge(n16,n28,1.6393442623);
  g.add_edge(n16,n29,1.40845070423);
  g.add_edge(n16,n30,1.40845070423);
  g.add_edge(n16,n32,25.0);
  g.add_edge(n16,n35,1.69491525424);
  g.add_edge(n16,n37,1.31578947368);
  g.add_edge(n16,n38,1.49253731343);
  g.add_edge(n16,n41,2.5);
  g.add_edge(n16,n43,3.0303030303);
  g.add_edge(n16,n44,1.5625);
  g.add_edge(n16,n48,1.66666666667);
  g.add_edge(n16,n53,1.31578947368);
  g.add_edge(n16,n61,1.61290322581);
  g.add_edge(n16,n66,1.08695652174);
  g.add_edge(n16,n73,1.19047619048);
  g.add_edge(n16,n77,1.21951219512);
  g.add_edge(n16,n81,1.31578947368);
  g.add_edge(n16,n91,1.0989010989);
  g.add_edge(n16,n95,1.03092783505);
  g.add_edge(n16,n102,1.16279069767);
  g.add_edge(n17,n1,1.3698630137);
  g.add_edge(n17,n3,1.31578947368);
  g.add_edge(n17,n5,1.49253731343);
  g.add_edge(n17,n7,1.47058823529);
  g.add_edge(n17,n18,1.51515151515);
  g.add_edge(n17,n21,1.38888888889);
  g.add_edge(n17,n22,1.6393442623);
  g.add_edge(n17,n31,1.21951219512);
  g.add_edge(n17,n32,50.0);
  g.add_edge(n17,n33,1.51515151515);
  g.add_edge(n17,n34,1.5873015873);
  g.add_edge(n17,n42,1.53846153846);
  g.add_edge(n17,n43,11.1111111111);
  g.add_edge(n17,n45,1.47058823529);
  g.add_edge(n17,n46,1.19047619048);
  g.add_edge(n17,n49,1.5873015873);
  g.add_edge(n17,n50,6.25);
  g.add_edge(n17,n52,1.51515151515);
  g.add_edge(n17,n55,1.49253731343);
  g.add_edge(n17,n56,1.53846153846);
  g.add_edge(n17,n58,1.31578947368);
  g.add_edge(n17,n60,1.5625);
  g.add_edge(n17,n62,1.5873015873);
  g.add_edge(n17,n63,1.5625);
  g.add_edge(n17,n65,1.47058823529);
  g.add_edge(n17,n67,1.25);
  g.add_edge(n17,n70,1.26582278481);
  g.add_edge(n17,n74,1.5625);
  g.add_edge(n17,n80,1.53846153846);
  g.add_edge(n17,n83,1.40845070423);
  g.add_edge(n17,n85,1.53846153846);
  g.add_edge(n17,n87,1.72413793103);
  g.add_edge(n17,n88,1.5873015873);
  g.add_edge(n17,n89,1.28205128205);
  g.add_edge(n17,n92,1.26582278481);
  g.add_edge(n17,n96,1.5625);
  g.add_edge(n17,n97,1.03092783505);
  g.add_edge(n17,n98,1.3698630137);
  g.add_edge(n17,n99,1.5625);
  g.add_edge(n17,n101,1.44927536232);
  g.add_edge(n18,n9,1.28205128205);
  g.add_edge(n18,n12,1.6393442623);
  g.add_edge(n18,n13,1.75438596491);
  g.add_edge(n18,n24,1.40845070423);
  g.add_edge(n18,n26,1.26582278481);
  g.add_edge(n18,n28,1.78571428571);
  g.add_edge(n18,n30,1.51515151515);
  g.add_edge(n18,n32,25.0);
  g.add_edge(n18,n35,1.92307692308);
  g.add_edge(n18,n37,1.40845070423);
  g.add_edge(n18,n43,3.125);
  g.add_edge(n18,n44,1.69491525424);
  g.add_edge(n18,n53,1.42857142857);
  g.add_edge(n18,n61,1.78571428571);
  g.add_edge(n18,n66,1.12359550562);
  g.add_edge(n18,n73,1.23456790123);
  g.add_edge(n18,n77,1.2987012987);
  g.add_edge(n18,n79,1.0101010101);
  g.add_edge(n18,n91,1.13636363636);
  g.add_edge(n18,n95,1.08695652174);
  g.add_edge(n18,n102,1.20481927711);
  g.add_edge(n19,n9,1.13636363636);
  g.add_edge(n19,n11,1.05263157895);
  g.add_edge(n19,n12,1.49253731343);
  g.add_edge(n19,n13,1.6393442623);
  g.add_edge(n19,n17,1.31578947368);
  g.add_edge(n19,n24,1.28205128205);
  g.add_edge(n19,n26,1.17647058824);
  g.add_edge(n19,n28,1.5625);
  g.add_edge(n19,n29,1.3698630137);
  g.add_edge(n19,n30,1.38888888889);
  g.add_edge(n19,n32,25.0);
  g.add_edge(n19,n35,1.66666666667);
  g.add_edge(n19,n37,1.26582278481);
  g.add_edge(n19,n38,1.47058823529);
  g.add_edge(n19,n41,2.43902439024);
  g.add_edge(n19,n43,3.22580645161);
  g.add_edge(n19,n44,1.49253731343);
  g.add_edge(n19,n48,1.61290322581);
  g.add_edge(n19,n53,1.31578947368);
  g.add_edge(n19,n61,1.5625);
  g.add_edge(n19,n66,1.0101010101);
  g.add_edge(n19,n72,1.53846153846);
  g.add_edge(n19,n73,1.12359550562);
  g.add_edge(n19,n77,1.14942528736);
  g.add_edge(n19,n81,1.2987012987);
  g.add_edge(n19,n82,1.03092783505);
  g.add_edge(n19,n91,1.08695652174);
  g.add_edge(n19,n102,1.12359550562);
  g.add_edge(n21,n9,1.19047619048);
  g.add_edge(n21,n12,1.5625);
  g.add_edge(n21,n13,1.66666666667);
  g.add_edge(n21,n24,1.2987012987);
  g.add_edge(n21,n26,1.20481927711);
  g.add_edge(n21,n28,1.6393442623);
  g.add_edge(n21,n30,1.42857142857);
  g.add_edge(n21,n32,25.0);
  g.add_edge(n21,n35,1.75438596491);
  g.add_edge(n21,n37,1.33333333333);
  g.add_edge(n21,n43,3.33333333333);
  g.add_edge(n21,n44,1.5873015873);
  g.add_edge(n21,n53,1.33333333333);
  g.add_edge(n21,n61,1.61290322581);
  g.add_edge(n21,n77,1.20481927711);
  g.add_edge(n21,n91,1.11111111111);
  g.add_edge(n21,n95,1.02040816327);
  g.add_edge(n21,n102,1.13636363636);
  g.add_edge(n22,n24,1.44927536232);
  g.add_edge(n22,n28,1.96078431373);
  g.add_edge(n22,n30,1.6393442623);
  g.add_edge(n22,n37,1.49253731343);
  g.add_edge(n22,n44,1.78571428571);
  g.add_edge(n22,n61,1.88679245283);
  g.add_edge(n22,n77,1.35135135135);
  g.add_edge(n22,n95,1.14942528736);
  g.add_edge(n22,n102,1.23456790123);
  g.add_edge(n23,n32,25.0);
  g.add_edge(n23,n43,4.54545454545);
  g.add_edge(n23,n50,1.20481927711);
  g.add_edge(n24,n52,1.40845070423);
  g.add_edge(n24,n56,1.40845070423);
  g.add_edge(n24,n62,1.44927536232);
  g.add_edge(n24,n65,1.38888888889);
  g.add_edge(n24,n74,1.47058823529);
  g.add_edge(n24,n80,1.28205128205);
  g.add_edge(n24,n85,1.44927536232);
  g.add_edge(n24,n87,1.5873015873);
  g.add_edge(n24,n89,1.06382978723);
  g.add_edge(n24,n92,1.21951219512);
  g.add_edge(n24,n98,1.33333333333);
  g.add_edge(n24,n99,1.26582278481);
  g.add_edge(n25,n22,1.05263157895);
  g.add_edge(n25,n34,1.03092783505);
  g.add_edge(n25,n36,1.78571428571);
  g.add_edge(n25,n41,1.72413793103);
  g.add_edge(n25,n43,12.5);
  g.add_edge(n25,n49,1.02040816327);
  g.add_edge(n25,n50,2.5641025641);
  g.add_edge(n25,n60,1.0101010101);
  g.add_edge(n25,n62,1.05263157895);
  g.add_edge(n25,n74,1.0101010101);
  g.add_edge(n25,n87,1.05263157895);
  g.add_edge(n25,n88,1.03092783505);
  g.add_edge(n25,n96,1.04166666667);
  g.add_edge(n26,n3,1.13636363636);
  g.add_edge(n26,n22,1.35135135135);
  g.add_edge(n26,n34,1.3698630137);
  g.add_edge(n26,n49,1.31578947368);
  g.add_edge(n26,n52,1.33333333333);
  g.add_edge(n26,n56,1.31578947368);
  g.add_edge(n26,n60,1.35135135135);
  g.add_edge(n26,n62,1.35135135135);
  g.add_edge(n26,n63,1.33333333333);
  g.add_edge(n26,n65,1.26582278481);
  g.add_edge(n26,n74,1.35135135135);
  g.add_edge(n26,n80,1.16279069767);
  g.add_edge(n26,n83,1.23456790123);
  g.add_edge(n26,n85,1.35135135135);
  g.add_edge(n26,n87,1.38888888889);
  g.add_edge(n26,n88,1.33333333333);
  g.add_edge(n26,n89,1.03092783505);
  g.add_edge(n26,n92,1.0989010989);
  g.add_edge(n26,n96,1.25);
  g.add_edge(n26,n98,1.20481927711);
  g.add_edge(n26,n99,1.17647058824);
  g.add_edge(n27,n1,1.35135135135);
  g.add_edge(n27,n3,1.28205128205);
  g.add_edge(n27,n5,1.47058823529);
  g.add_edge(n27,n6,1.38888888889);
  g.add_edge(n27,n7,1.47058823529);
  g.add_edge(n27,n8,1.69491525424);
  g.add_edge(n27,n14,1.53846153846);
  g.add_edge(n27,n16,1.38888888889);
  g.add_edge(n27,n18,1.49253731343);
  g.add_edge(n27,n19,1.2987012987);
  g.add_edge(n27,n21,1.3698630137);
  g.add_edge(n27,n22,1.61290322581);
  g.add_edge(n27,n31,1.23456790123);
  g.add_edge(n27,n32,50.0);
  g.add_edge(n27,n33,1.49253731343);
  g.add_edge(n27,n34,1.5873015873);
  g.add_edge(n27,n36,2.5641025641);
  g.add_edge(n27,n40,1.0989010989);
  g.add_edge(n27,n41,2.0);
  g.add_edge(n27,n42,1.51515151515);
  g.add_edge(n27,n43,11.1111111111);
  g.add_edge(n27,n45,1.44927536232);
  g.add_edge(n27,n46,1.17647058824);
  g.add_edge(n27,n49,1.5625);
  g.add_edge(n27,n50,5.26315789474);
  g.add_edge(n27,n52,1.49253731343);
  g.add_edge(n27,n55,1.47058823529);
  g.add_edge(n27,n56,1.51515151515);
  g.add_edge(n27,n58,1.2987012987);
  g.add_edge(n27,n59,1.53846153846);
  g.add_edge(n27,n60,1.5625);
  g.add_edge(n27,n62,1.61290322581);
  g.add_edge(n27,n63,1.5873015873);
  g.add_edge(n27,n65,1.44927536232);
  g.add_edge(n27,n67,1.26582278481);
  g.add_edge(n27,n70,1.25);
  g.add_edge(n27,n72,25.0);
  g.add_edge(n27,n74,1.53846153846);
  g.add_edge(n27,n76,1.38888888889);
  g.add_edge(n27,n78,1.5873015873);
  g.add_edge(n27,n80,1.35135135135);
  g.add_edge(n27,n83,1.38888888889);
  g.add_edge(n27,n84,1.02040816327);
  g.add_edge(n27,n85,1.51515151515);
  g.add_edge(n27,n86,1.51515151515);
  g.add_edge(n27,n87,1.69491525424);
  g.add_edge(n27,n88,1.5625);
  g.add_edge(n27,n89,1.17647058824);
  g.add_edge(n27,n92,1.25);
  g.add_edge(n27,n96,1.3698630137);
  g.add_edge(n27,n97,1.02040816327);
  g.add_edge(n27,n98,1.35135135135);
  g.add_edge(n27,n99,1.3698630137);
  g.add_edge(n27,n100,1.21951219512);
  g.add_edge(n27,n101,1.42857142857);
  g.add_edge(n28,n62,2.08333333333);
  g.add_edge(n28,n87,2.0);
  g.add_edge(n28,n92,1.49253731343);
  g.add_edge(n28,n99,1.5625);
  g.add_edge(n29,n1,1.38888888889);
  g.add_edge(n29,n3,1.3698630137);
  g.add_edge(n29,n5,1.5625);
  g.add_edge(n29,n7,1.53846153846);
  g.add_edge(n29,n18,1.53846153846);
  g.add_edge(n29,n21,1.40845070423);
  g.add_edge(n29,n22,1.66666666667);
  g.add_edge(n29,n31,1.23456790123);
  g.add_edge(n29,n32,100.0);
  g.add_edge(n29,n33,1.53846153846);
  g.add_edge(n29,n34,1.5873015873);
  g.add_edge(n29,n42,1.61290322581);
  g.add_edge(n29,n43,10.0);
  g.add_edge(n29,n45,1.49253731343);
  g.add_edge(n29,n46,1.23456790123);
  g.add_edge(n29,n49,1.6393442623);
  g.add_edge(n29,n50,6.25);
  g.add_edge(n29,n52,1.51515151515);
  g.add_edge(n29,n55,1.53846153846);
  g.add_edge(n29,n56,1.5625);
  g.add_edge(n29,n58,1.33333333333);
  g.add_edge(n29,n60,1.5873015873);
  g.add_edge(n29,n62,1.61290322581);
  g.add_edge(n29,n63,1.6393442623);
  g.add_edge(n29,n65,1.53846153846);
  g.add_edge(n29,n67,1.2987012987);
  g.add_edge(n29,n70,1.31578947368);
  g.add_edge(n29,n74,1.5625);
  g.add_edge(n29,n80,1.47058823529);
  g.add_edge(n29,n83,1.47058823529);
  g.add_edge(n29,n84,1.04166666667);
  g.add_edge(n29,n85,1.51515151515);
  g.add_edge(n29,n86,1.5625);
  g.add_edge(n29,n87,1.72413793103);
  g.add_edge(n29,n88,1.61290322581);
  g.add_edge(n29,n89,1.26582278481);
  g.add_edge(n29,n92,1.28205128205);
  g.add_edge(n29,n96,1.49253731343);
  g.add_edge(n29,n97,1.06382978723);
  g.add_edge(n29,n98,1.3698630137);
  g.add_edge(n29,n99,1.49253731343);
  g.add_edge(n29,n101,1.44927536232);
  g.add_edge(n30,n49,1.6393442623);
  g.add_edge(n30,n52,1.5873015873);
  g.add_edge(n30,n56,1.5873015873);
  g.add_edge(n30,n62,1.5873015873);
  g.add_edge(n30,n65,1.51515151515);
  g.add_edge(n30,n74,1.5873015873);
  g.add_edge(n30,n80,1.35135135135);
  g.add_edge(n30,n85,1.6393442623);
  g.add_edge(n30,n87,1.69491525424);
  g.add_edge(n30,n89,1.13636363636);
  g.add_edge(n30,n92,1.26582278481);
  g.add_edge(n30,n98,1.42857142857);
  g.add_edge(n30,n99,1.38888888889);
  g.add_edge(n31,n9,1.04166666667);
  g.add_edge(n31,n12,1.35135135135);
  g.add_edge(n31,n24,1.16279069767);
  g.add_edge(n31,n26,1.08695652174);
  g.add_edge(n31,n28,1.40845070423);
  g.add_edge(n31,n30,1.23456790123);
  g.add_edge(n31,n37,1.16279069767);
  g.add_edge(n31,n44,1.35135135135);
  g.add_edge(n31,n61,1.40845070423);
  g.add_edge(n31,n77,1.08695652174);
  g.add_edge(n31,n102,1.02040816327);
  g.add_edge(n32,n1,25.0);
  g.add_edge(n32,n3,25.0);
  g.add_edge(n32,n5,25.0);
  g.add_edge(n32,n9,50.0);
  g.add_edge(n32,n10,25.0);
  g.add_edge(n32,n20,33.3333333333);
  g.add_edge(n32,n22,25.0);
  g.add_edge(n32,n26,50.0);
  g.add_edge(n32,n28,50.0);
  g.add_edge(n32,n30,50.0);
  g.add_edge(n32,n31,25.0);
  g.add_edge(n32,n34,50.0);
  g.add_edge(n32,n43,25.0);
  g.add_edge(n32,n47,50.0);
  g.add_edge(n32,n49,25.0);
  g.add_edge(n32,n52,25.0);
  g.add_edge(n32,n54,25.0);
  g.add_edge(n32,n55,25.0);
  g.add_edge(n32,n56,25.0);
  g.add_edge(n32,n60,25.0);
  g.add_edge(n32,n61,100.0);
  g.add_edge(n32,n62,25.0);
  g.add_edge(n32,n63,25.0);
  g.add_edge(n32,n64,25.0);
  g.add_edge(n32,n65,25.0);
  g.add_edge(n32,n67,50.0);
  g.add_edge(n32,n70,33.3333333333);
  g.add_edge(n32,n74,25.0);
  g.add_edge(n32,n75,50.0);
  g.add_edge(n32,n77,50.0);
  g.add_edge(n32,n80,25.0);
  g.add_edge(n32,n83,25.0);
  g.add_edge(n32,n85,100.0);
  g.add_edge(n32,n87,25.0);
  g.add_edge(n32,n88,25.0);
  g.add_edge(n32,n89,25.0);
  g.add_edge(n32,n92,25.0);
  g.add_edge(n32,n94,25.0);
  g.add_edge(n32,n95,50.0);
  g.add_edge(n32,n96,25.0);
  g.add_edge(n32,n98,25.0);
  g.add_edge(n32,n99,25.0);
  g.add_edge(n32,n102,100.0);
  g.add_edge(n33,n9,1.28205128205);
  g.add_edge(n33,n12,1.81818181818);
  g.add_edge(n33,n13,1.85185185185);
  g.add_edge(n33,n24,1.47058823529);
  g.add_edge(n33,n26,1.2987012987);
  g.add_edge(n33,n28,1.81818181818);
  g.add_edge(n33,n30,1.5625);
  g.add_edge(n33,n32,25.0);
  g.add_edge(n33,n35,1.96078431373);
  g.add_edge(n33,n37,1.47058823529);
  g.add_edge(n33,n43,3.125);
  g.add_edge(n33,n44,1.81818181818);
  g.add_edge(n33,n53,1.49253731343);
  g.add_edge(n33,n61,1.78571428571);
  g.add_edge(n33,n73,1.2987012987);
  g.add_edge(n33,n77,1.2987012987);
  g.add_edge(n33,n79,1.0101010101);
  g.add_edge(n33,n91,1.20481927711);
  g.add_edge(n33,n95,1.08695652174);
  g.add_edge(n33,n102,1.26582278481);
  g.add_edge(n34,n12,1.75438596491);
  g.add_edge(n34,n24,1.40845070423);
  g.add_edge(n34,n28,2.04081632653);
  g.add_edge(n34,n30,1.6393442623);
  g.add_edge(n34,n37,1.53846153846);
  g.add_edge(n34,n44,1.78571428571);
  g.add_edge(n34,n61,1.85185185185);
  g.add_edge(n34,n77,1.42857142857);
  g.add_edge(n34,n95,1.12359550562);
  g.add_edge(n34,n102,1.28205128205);
  g.add_edge(n35,n1,1.75438596491);
  g.add_edge(n35,n3,1.69491525424);
  g.add_edge(n35,n5,1.96078431373);
  g.add_edge(n35,n22,2.08333333333);
  g.add_edge(n35,n31,1.47058823529);
  g.add_edge(n35,n32,33.3333333333);
  g.add_edge(n35,n34,2.12765957447);
  g.add_edge(n35,n43,14.2857142857);
  g.add_edge(n35,n49,2.04081632653);
  g.add_edge(n35,n50,7.69230769231);
  g.add_edge(n35,n52,1.92307692308);
  g.add_edge(n35,n54,1.0101010101);
  g.add_edge(n35,n55,1.92307692308);
  g.add_edge(n35,n56,2.0);
  g.add_edge(n35,n58,1.5873015873);
  g.add_edge(n35,n60,2.0);
  g.add_edge(n35,n62,2.08333333333);
  g.add_edge(n35,n63,2.04081632653);
  g.add_edge(n35,n64,1.13636363636);
  g.add_edge(n35,n65,1.96078431373);
  g.add_edge(n35,n67,1.5873015873);
  g.add_edge(n35,n70,1.5873015873);
  g.add_edge(n35,n74,2.0);
  g.add_edge(n35,n80,1.61290322581);
  g.add_edge(n35,n83,1.85185185185);
  g.add_edge(n35,n85,2.27272727273);
  g.add_edge(n35,n87,2.17391304348);
  g.add_edge(n35,n88,2.0);
  g.add_edge(n35,n89,1.35135135135);
  g.add_edge(n35,n92,1.51515151515);
  g.add_edge(n35,n96,1.72413793103);
  g.add_edge(n35,n98,1.75438596491);
  g.add_edge(n35,n99,1.69491525424);
  g.add_edge(n35,n101,1.85185185185);
  g.add_edge(n36,n2,1.40845070423);
  g.add_edge(n36,n9,2.08333333333);
  g.add_edge(n36,n10,1.28205128205);
  g.add_edge(n36,n12,2.5641025641);
  g.add_edge(n36,n13,2.94117647059);
  g.add_edge(n36,n17,2.43902439024);
  g.add_edge(n36,n20,1.53846153846);
  g.add_edge(n36,n24,1.96078431373);
  g.add_edge(n36,n26,2.27272727273);
  g.add_edge(n36,n28,2.94117647059);
  g.add_edge(n36,n29,2.43902439024);
  g.add_edge(n36,n30,2.38095238095);
  g.add_edge(n36,n35,3.22580645161);
  g.add_edge(n36,n37,2.32558139535);
  g.add_edge(n36,n39,1.75438596491);
  g.add_edge(n36,n43,4.7619047619);
  g.add_edge(n36,n44,3.0303030303);
  g.add_edge(n36,n47,1.35135135135);
  g.add_edge(n36,n48,2.94117647059);
  g.add_edge(n36,n53,3.0303030303);
  g.add_edge(n36,n61,2.85714285714);
  g.add_edge(n36,n66,1.85185185185);
  g.add_edge(n36,n68,1.5625);
  g.add_edge(n36,n71,1.61290322581);
  g.add_edge(n36,n73,2.17391304348);
  g.add_edge(n36,n75,1.85185185185);
  g.add_edge(n36,n77,2.04081632653);
  g.add_edge(n36,n79,1.61290322581);
  g.add_edge(n36,n91,2.04081632653);
  g.add_edge(n36,n93,1.85185185185);
  g.add_edge(n36,n94,1.75438596491);
  g.add_edge(n36,n95,2.0);
  g.add_edge(n36,n102,2.5);
  g.add_edge(n37,n52,1.44927536232);
  g.add_edge(n37,n62,1.51515151515);
  g.add_edge(n37,n65,1.44927536232);
  g.add_edge(n37,n80,1.42857142857);
  g.add_edge(n37,n87,1.61290322581);
  g.add_edge(n37,n89,1.26582278481);
  g.add_edge(n37,n92,1.23456790123);
  g.add_edge(n37,n98,1.33333333333);
  g.add_edge(n37,n99,1.49253731343);
  g.add_edge(n38,n1,1.51515151515);
  g.add_edge(n38,n3,1.44927536232);
  g.add_edge(n38,n5,1.72413793103);
  g.add_edge(n38,n6,1.53846153846);
  g.add_edge(n38,n7,1.72413793103);
  g.add_edge(n38,n18,1.66666666667);
  g.add_edge(n38,n21,1.53846153846);
  g.add_edge(n38,n22,1.72413793103);
  g.add_edge(n38,n31,1.26582278481);
  g.add_edge(n38,n33,1.72413793103);
  g.add_edge(n38,n34,1.75438596491);
  g.add_edge(n38,n36,2.85714285714);
  g.add_edge(n38,n42,1.78571428571);
  g.add_edge(n38,n43,25.0);
  g.add_edge(n38,n45,1.66666666667);
  g.add_edge(n38,n46,1.33333333333);
  g.add_edge(n38,n49,1.75438596491);
  g.add_edge(n38,n50,5.55555555556);
  g.add_edge(n38,n52,1.66666666667);
  g.add_edge(n38,n55,1.66666666667);
  g.add_edge(n38,n56,1.72413793103);
  g.add_edge(n38,n58,1.42857142857);
  g.add_edge(n38,n60,1.75438596491);
  g.add_edge(n38,n62,1.72413793103);
  g.add_edge(n38,n63,1.66666666667);
  g.add_edge(n38,n64,1.0752688172);
  g.add_edge(n38,n65,1.72413793103);
  g.add_edge(n38,n67,1.3698630137);
  g.add_edge(n38,n70,1.44927536232);
  g.add_edge(n38,n74,1.72413793103);
  g.add_edge(n38,n80,1.47058823529);
  g.add_edge(n38,n83,1.5873015873);
  g.add_edge(n38,n84,1.14942528736);
  g.add_edge(n38,n85,1.78571428571);
  g.add_edge(n38,n86,1.6393442623);
  g.add_edge(n38,n87,1.78571428571);
  g.add_edge(n38,n88,1.75438596491);
  g.add_edge(n38,n89,1.25);
  g.add_edge(n38,n92,1.3698630137);
  g.add_edge(n38,n96,1.5625);
  g.add_edge(n38,n97,1.14942528736);
  g.add_edge(n38,n98,1.5625);
  g.add_edge(n38,n99,1.49253731343);
  g.add_edge(n38,n101,1.61290322581);
  g.add_edge(n39,n32,100.0);
  g.add_edge(n39,n43,11.1111111111);
  g.add_edge(n39,n50,2.27272727273);
  g.add_edge(n40,n9,1.04166666667);
  g.add_edge(n40,n12,1.20481927711);
  g.add_edge(n40,n13,1.33333333333);
  g.add_edge(n40,n17,1.21951219512);
  g.add_edge(n40,n24,1.06382978723);
  g.add_edge(n40,n28,1.20481927711);
  g.add_edge(n40,n29,1.20481927711);
  g.add_edge(n40,n30,1.11111111111);
  g.add_edge(n40,n32,25.0);
  g.add_edge(n40,n35,1.2987012987);
  g.add_edge(n40,n37,1.20481927711);
  g.add_edge(n40,n38,1.21951219512);
  g.add_edge(n40,n41,2.5641025641);
  g.add_edge(n40,n43,4.0);
  g.add_edge(n40,n44,1.20481927711);
  g.add_edge(n40,n48,1.33333333333);
  g.add_edge(n40,n53,1.14942528736);
  g.add_edge(n40,n61,1.35135135135);
  g.add_edge(n40,n72,1.5625);
  g.add_edge(n40,n77,1.0752688172);
  g.add_edge(n40,n81,1.11111111111);
  g.add_edge(n41,n1,2.5);
  g.add_edge(n41,n2,1.92307692308);
  g.add_edge(n41,n3,2.38095238095);
  g.add_edge(n41,n5,2.5641025641);
  g.add_edge(n41,n6,2.5);
  g.add_edge(n41,n7,2.5);
  g.add_edge(n41,n9,1.96078431373);
  g.add_edge(n41,n10,1.92307692308);
  g.add_edge(n41,n11,1.78571428571);
  g.add_edge(n41,n12,2.17391304348);
  g.add_edge(n41,n13,2.32558139535);
  g.add_edge(n41,n15,1.72413793103);
  g.add_edge(n41,n17,2.17391304348);
  g.add_edge(n41,n18,2.43902439024);
  g.add_edge(n41,n20,2.12765957447);
  g.add_edge(n41,n21,2.43902439024);
  g.add_edge(n41,n22,2.63157894737);
  g.add_edge(n41,n23,1.78571428571);
  g.add_edge(n41,n24,2.17391304348);
  g.add_edge(n41,n26,1.81818181818);
  g.add_edge(n41,n28,2.12765957447);
  g.add_edge(n41,n29,2.04081632653);
  g.add_edge(n41,n30,2.04081632653);
  g.add_edge(n41,n31,2.5641025641);
  g.add_edge(n41,n33,2.5641025641);
  g.add_edge(n41,n34,2.43902439024);
  g.add_edge(n41,n35,3.0303030303);
  g.add_edge(n41,n36,6.66666666667);
  g.add_edge(n41,n37,2.0);
  g.add_edge(n41,n38,2.27272727273);
  g.add_edge(n41,n39,2.0);
  g.add_edge(n41,n42,2.5641025641);
  g.add_edge(n41,n44,2.04081632653);
  g.add_edge(n41,n45,2.5);
  g.add_edge(n41,n46,2.5641025641);
  g.add_edge(n41,n47,1.75438596491);
  g.add_edge(n41,n48,2.32558139535);
  g.add_edge(n41,n49,2.63157894737);
  g.add_edge(n41,n50,4.16666666667);
  g.add_edge(n41,n52,2.63157894737);
  g.add_edge(n41,n53,1.92307692308);
  g.add_edge(n41,n54,2.12765957447);
  g.add_edge(n41,n55,2.5);
  g.add_edge(n41,n56,2.5);
  g.add_edge(n41,n58,2.43902439024);
  g.add_edge(n41,n60,2.63157894737);
  g.add_edge(n41,n61,2.22222222222);
  g.add_edge(n41,n62,2.7027027027);
  g.add_edge(n41,n63,2.5641025641);
  g.add_edge(n41,n64,2.17391304348);
  g.add_edge(n41,n65,2.5641025641);
  g.add_edge(n41,n66,1.69491525424);
  g.add_edge(n41,n67,2.38095238095);
  g.add_edge(n41,n68,1.5873015873);
  g.add_edge(n41,n70,2.63157894737);
  g.add_edge(n41,n71,1.69491525424);
  g.add_edge(n41,n73,1.96078431373);
  g.add_edge(n41,n74,2.5);
  g.add_edge(n41,n75,1.75438596491);
  g.add_edge(n41,n77,2.17391304348);
  g.add_edge(n41,n79,1.72413793103);
  g.add_edge(n41,n80,2.5641025641);
  g.add_edge(n41,n81,1.92307692308);
  g.add_edge(n41,n83,2.5);
  g.add_edge(n41,n84,2.38095238095);
  g.add_edge(n41,n85,2.63157894737);
  g.add_edge(n41,n86,2.43902439024);
  g.add_edge(n41,n87,2.5641025641);
  g.add_edge(n41,n88,2.5641025641);
  g.add_edge(n41,n89,2.43902439024);
  g.add_edge(n41,n90,1.88679245283);
  g.add_edge(n41,n91,1.78571428571);
  g.add_edge(n41,n92,2.5641025641);
  g.add_edge(n41,n93,1.69491525424);
  g.add_edge(n41,n94,1.78571428571);
  g.add_edge(n41,n95,1.72413793103);
  g.add_edge(n41,n96,2.5641025641);
  g.add_edge(n41,n97,2.43902439024);
  g.add_edge(n41,n98,2.63157894737);
  g.add_edge(n41,n99,2.5);
  g.add_edge(n41,n101,2.5);
  g.add_edge(n41,n102,1.85185185185);
  g.add_edge(n42,n9,1.2987012987);
  g.add_edge(n42,n12,1.78571428571);
  g.add_edge(n42,n13,1.92307692308);
  g.add_edge(n42,n24,1.44927536232);
  g.add_edge(n42,n26,1.31578947368);
  g.add_edge(n42,n28,1.85185185185);
  g.add_edge(n42,n30,1.5873015873);
  g.add_edge(n42,n32,25.0);
  g.add_edge(n42,n35,2.04081632653);
  g.add_edge(n42,n37,1.51515151515);
  g.add_edge(n42,n43,3.0303030303);
  g.add_edge(n42,n44,1.85185185185);
  g.add_edge(n42,n53,1.5873015873);
  g.add_edge(n42,n61,1.88679245283);
  g.add_edge(n42,n77,1.31578947368);
  g.add_edge(n42,n79,1.02040816327);
  g.add_edge(n42,n95,1.0989010989);
  g.add_edge(n42,n102,1.31578947368);
  g.add_edge(n43,n3,3.33333333333);
  g.add_edge(n43,n5,3.0303030303);
  g.add_edge(n43,n9,12.5);
  g.add_edge(n43,n10,5.0);
  g.add_edge(n43,n12,14.2857142857);
  g.add_edge(n43,n13,14.2857142857);
  g.add_edge(n43,n20,7.69230769231);
  g.add_edge(n43,n22,3.0303030303);
  g.add_edge(n43,n24,16.6666666667);
  g.add_edge(n43,n26,12.5);
  g.add_edge(n43,n28,14.2857142857);
  g.add_edge(n43,n30,14.2857142857);
  g.add_edge(n43,n31,3.57142857143);
  g.add_edge(n43,n34,4.16666666667);
  g.add_edge(n43,n37,33.3333333333);
  g.add_edge(n43,n44,25.0);
  g.add_edge(n43,n49,3.125);
  g.add_edge(n43,n52,3.22580645161);
  g.add_edge(n43,n54,3.84615384615);
  g.add_edge(n43,n55,3.0303030303);
  g.add_edge(n43,n56,3.0303030303);
  g.add_edge(n43,n60,3.125);
  g.add_edge(n43,n61,20.0);
  g.add_edge(n43,n62,3.125);
  g.add_edge(n43,n63,3.0303030303);
  g.add_edge(n43,n64,4.0);
  g.add_edge(n43,n65,3.125);
  g.add_edge(n43,n74,3.0303030303);
  g.add_edge(n43,n75,10.0);
  g.add_edge(n43,n77,11.1111111111);
  g.add_edge(n43,n80,3.125);
  g.add_edge(n43,n83,3.125);
  g.add_edge(n43,n85,3.44827586207);
  g.add_edge(n43,n87,3.0303030303);
  g.add_edge(n43,n88,3.0303030303);
  g.add_edge(n43,n89,3.84615384615);
  g.add_edge(n43,n92,3.57142857143);
  g.add_edge(n43,n94,7.69230769231);
  g.add_edge(n43,n95,11.1111111111);
  g.add_edge(n43,n96,3.0303030303);
  g.add_edge(n43,n98,3.33333333333);
  g.add_edge(n43,n99,3.0303030303);
  g.add_edge(n43,n102,11.1111111111);
  g.add_edge(n44,n52,1.72413793103);
  g.add_edge(n44,n62,1.78571428571);
  g.add_edge(n44,n65,1.75438596491);
  g.add_edge(n44,n80,1.44927536232);
  g.add_edge(n44,n87,1.92307692308);
  g.add_edge(n44,n89,1.23456790123);
  g.add_edge(n44,n92,1.38888888889);
  g.add_edge(n44,n98,1.5625);
  g.add_edge(n44,n99,1.53846153846);
  g.add_edge(n45,n9,1.25);
  g.add_edge(n45,n12,1.69491525424);
  g.add_edge(n45,n13,1.81818181818);
  g.add_edge(n45,n24,1.38888888889);
  g.add_edge(n45,n26,1.26582278481);
  g.add_edge(n45,n28,1.72413793103);
  g.add_edge(n45,n30,1.51515151515);
  g.add_edge(n45,n32,25.0);
  g.add_edge(n45,n35,1.92307692308);
  g.add_edge(n45,n37,1.40845070423);
  g.add_edge(n45,n43,3.125);
  g.add_edge(n45,n44,1.69491525424);
  g.add_edge(n45,n53,1.42857142857);
  g.add_edge(n45,n61,1.72413793103);
  g.add_edge(n45,n73,1.23456790123);
  g.add_edge(n45,n77,1.26582278481);
  g.add_edge(n45,n91,1.16279069767);
  g.add_edge(n45,n95,1.06382978723);
  g.add_edge(n45,n102,1.20481927711);
  g.add_edge(n46,n9,1.04166666667);
  g.add_edge(n46,n12,1.33333333333);
  g.add_edge(n46,n13,1.53846153846);
  g.add_edge(n46,n24,1.14942528736);
  g.add_edge(n46,n26,1.0752688172);
  g.add_edge(n46,n28,1.35135135135);
  g.add_edge(n46,n30,1.23456790123);
  g.add_edge(n46,n32,25.0);
  g.add_edge(n46,n35,1.49253731343);
  g.add_edge(n46,n37,1.19047619048);
  g.add_edge(n46,n43,3.84615384615);
  g.add_edge(n46,n44,1.3698630137);
  g.add_edge(n46,n53,1.23456790123);
  g.add_edge(n46,n61,1.38888888889);
  g.add_edge(n46,n77,1.06382978723);
  g.add_edge(n46,n91,1.0101010101);
  g.add_edge(n46,n102,1.08695652174);
  g.add_edge(n47,n43,5.26315789474);
  g.add_edge(n47,n50,2.5641025641);
  g.add_edge(n48,n1,1.66666666667);
  g.add_edge(n48,n3,1.66666666667);
  g.add_edge(n48,n5,1.88679245283);
  g.add_edge(n48,n7,1.96078431373);
  g.add_edge(n48,n18,1.85185185185);
  g.add_edge(n48,n21,1.69491525424);
  g.add_edge(n48,n22,1.96078431373);
  g.add_edge(n48,n31,1.40845070423);
  g.add_edge(n48,n33,2.0);
  g.add_edge(n48,n34,1.92307692308);
  g.add_edge(n48,n42,2.04081632653);
  g.add_edge(n48,n43,16.6666666667);
  g.add_edge(n48,n45,1.85185185185);
  g.add_edge(n48,n46,1.44927536232);
  g.add_edge(n48,n49,2.04081632653);
  g.add_edge(n48,n50,6.66666666667);
  g.add_edge(n48,n52,1.88679245283);
  g.add_edge(n48,n55,1.92307692308);
  g.add_edge(n48,n56,1.96078431373);
  g.add_edge(n48,n58,1.5625);
  g.add_edge(n48,n60,2.04081632653);
  g.add_edge(n48,n62,1.96078431373);
  g.add_edge(n48,n63,1.88679245283);
  g.add_edge(n48,n64,1.11111111111);
  g.add_edge(n48,n65,1.92307692308);
  g.add_edge(n48,n67,1.49253731343);
  g.add_edge(n48,n70,1.5625);
  g.add_edge(n48,n74,2.0);
  g.add_edge(n48,n80,1.5873015873);
  g.add_edge(n48,n83,1.75438596491);
  g.add_edge(n48,n84,1.21951219512);
  g.add_edge(n48,n85,1.88679245283);
  g.add_edge(n48,n86,1.81818181818);
  g.add_edge(n48,n87,2.12765957447);
  g.add_edge(n48,n88,2.0);
  g.add_edge(n48,n89,1.33333333333);
  g.add_edge(n48,n92,1.53846153846);
  g.add_edge(n48,n96,1.66666666667);
  g.add_edge(n48,n97,1.23456790123);
  g.add_edge(n48,n98,1.72413793103);
  g.add_edge(n48,n99,1.66666666667);
  g.add_edge(n48,n101,1.81818181818);
  g.add_edge(n49,n24,1.47058823529);
  g.add_edge(n49,n28,1.85185185185);
  g.add_edge(n49,n37,1.53846153846);
  g.add_edge(n49,n44,1.85185185185);
  g.add_edge(n49,n77,1.38888888889);
  g.add_edge(n49,n95,1.14942528736);
  g.add_edge(n49,n102,1.28205128205);
  g.add_edge(n50,n9,4.16666666667);
  g.add_edge(n50,n10,1.2987012987);
  g.add_edge(n50,n12,6.25);
  g.add_edge(n50,n20,2.22222222222);
  g.add_edge(n50,n24,6.66666666667);
  g.add_edge(n50,n26,3.7037037037);
  g.add_edge(n50,n28,6.66666666667);
  g.add_edge(n50,n30,5.55555555556);
  g.add_edge(n50,n37,4.7619047619);
  g.add_edge(n50,n44,5.0);
  g.add_edge(n50,n61,7.69230769231);
  g.add_edge(n50,n75,2.04081632653);
  g.add_edge(n50,n77,5.26315789474);
  g.add_edge(n50,n94,2.43902439024);
  g.add_edge(n50,n95,3.0303030303);
  g.add_edge(n50,n102,3.0303030303);
  g.add_edge(n51,n5,1.06382978723);
  g.add_edge(n51,n7,1.06382978723);
  g.add_edge(n51,n14,1.0752688172);
  g.add_edge(n51,n18,1.05263157895);
  g.add_edge(n51,n21,1.0101010101);
  g.add_edge(n51,n22,1.13636363636);
  g.add_edge(n51,n33,1.0752688172);
  g.add_edge(n51,n34,1.0989010989);
  g.add_edge(n51,n36,1.96078431373);
  g.add_edge(n51,n41,1.78571428571);
  g.add_edge(n51,n42,1.08695652174);
  g.add_edge(n51,n43,12.5);
  g.add_edge(n51,n45,1.03092783505);
  g.add_edge(n51,n49,1.12359550562);
  g.add_edge(n51,n50,2.77777777778);
  g.add_edge(n51,n52,1.05263157895);
  g.add_edge(n51,n55,1.04166666667);
  g.add_edge(n51,n56,1.06382978723);
  g.add_edge(n51,n60,1.08695652174);
  g.add_edge(n51,n62,1.13636363636);
  g.add_edge(n51,n63,1.0752688172);
  g.add_edge(n51,n65,1.05263157895);
  g.add_edge(n51,n74,1.08695652174);
  g.add_edge(n51,n80,1.03092783505);
  g.add_edge(n51,n83,1.02040816327);
  g.add_edge(n51,n85,1.16279069767);
  g.add_edge(n51,n86,1.06382978723);
  g.add_edge(n51,n87,1.13636363636);
  g.add_edge(n51,n88,1.0989010989);
  g.add_edge(n51,n96,1.11111111111);
  g.add_edge(n51,n98,1.0101010101);
  g.add_edge(n51,n99,1.06382978723);
  g.add_edge(n51,n101,1.02040816327);
  g.add_edge(n52,n28,1.75438596491);
  g.add_edge(n53,n1,1.31578947368);
  g.add_edge(n53,n3,1.2987012987);
  g.add_edge(n53,n5,1.49253731343);
  g.add_edge(n53,n22,1.51515151515);
  g.add_edge(n53,n31,1.14942528736);
  g.add_edge(n53,n34,1.51515151515);
  g.add_edge(n53,n43,16.6666666667);
  g.add_edge(n53,n49,1.53846153846);
  g.add_edge(n53,n50,3.84615384615);
  g.add_edge(n53,n52,1.44927536232);
  g.add_edge(n53,n55,1.49253731343);
  g.add_edge(n53,n56,1.49253731343);
  g.add_edge(n53,n58,1.28205128205);
  g.add_edge(n53,n60,1.53846153846);
  g.add_edge(n53,n62,1.49253731343);
  g.add_edge(n53,n63,1.49253731343);
  g.add_edge(n53,n65,1.51515151515);
  g.add_edge(n53,n67,1.25);
  g.add_edge(n53,n70,1.2987012987);
  g.add_edge(n53,n74,1.51515151515);
  g.add_edge(n53,n80,1.31578947368);
  g.add_edge(n53,n83,1.42857142857);
  g.add_edge(n53,n85,1.49253731343);
  g.add_edge(n53,n87,1.61290322581);
  g.add_edge(n53,n88,1.51515151515);
  g.add_edge(n53,n89,1.17647058824);
  g.add_edge(n53,n92,1.23456790123);
  g.add_edge(n53,n96,1.40845070423);
  g.add_edge(n53,n98,1.31578947368);
  g.add_edge(n53,n99,1.40845070423);
  g.add_edge(n55,n9,1.26582278481);
  g.add_edge(n55,n12,1.66666666667);
  g.add_edge(n55,n24,1.3698630137);
  g.add_edge(n55,n26,1.28205128205);
  g.add_edge(n55,n28,1.75438596491);
  g.add_edge(n55,n30,1.53846153846);
  g.add_edge(n55,n37,1.42857142857);
  g.add_edge(n55,n44,1.72413793103);
  g.add_edge(n55,n61,1.75438596491);
  g.add_edge(n55,n77,1.28205128205);
  g.add_edge(n55,n95,1.0752688172);
  g.add_edge(n55,n102,1.23456790123);
  g.add_edge(n56,n28,1.81818181818);
  g.add_edge(n56,n37,1.47058823529);
  g.add_edge(n56,n44,1.78571428571);
  g.add_edge(n56,n77,1.31578947368);
  g.add_edge(n56,n95,1.0989010989);
  g.add_edge(n56,n102,1.25);
  g.add_edge(n57,n32,33.3333333333);
  g.add_edge(n57,n36,1.78571428571);
  g.add_edge(n57,n41,1.78571428571);
  g.add_edge(n57,n43,7.14285714286);
  g.add_edge(n57,n50,2.22222222222);
  g.add_edge(n57,n72,5.88235294118);
  g.add_edge(n58,n9,1.13636363636);
  g.add_edge(n58,n12,1.44927536232);
  g.add_edge(n58,n13,1.5873015873);
  g.add_edge(n58,n24,1.25);
  g.add_edge(n58,n26,1.12359550562);
  g.add_edge(n58,n28,1.49253731343);
  g.add_edge(n58,n30,1.31578947368);
  g.add_edge(n58,n32,25.0);
  g.add_edge(n58,n37,1.23456790123);
  g.add_edge(n58,n43,3.125);
  g.add_edge(n58,n44,1.44927536232);
  g.add_edge(n58,n61,1.53846153846);
  g.add_edge(n58,n77,1.12359550562);
  g.add_edge(n58,n102,1.11111111111);
  g.add_edge(n59,n9,1.31578947368);
  g.add_edge(n59,n11,1.14942528736);
  g.add_edge(n59,n12,1.75438596491);
  g.add_edge(n59,n13,1.81818181818);
  g.add_edge(n59,n17,1.5625);
  g.add_edge(n59,n24,1.47058823529);
  g.add_edge(n59,n26,1.2987012987);
  g.add_edge(n59,n28,1.85185185185);
  g.add_edge(n59,n29,1.5873015873);
  g.add_edge(n59,n30,1.5625);
  g.add_edge(n59,n32,25.0);
  g.add_edge(n59,n35,1.96078431373);
  g.add_edge(n59,n37,1.44927536232);
  g.add_edge(n59,n38,1.69491525424);
  g.add_edge(n59,n41,2.5641025641);
  g.add_edge(n59,n43,3.0303030303);
  g.add_edge(n59,n44,1.75438596491);
  g.add_edge(n59,n48,1.92307692308);
  g.add_edge(n59,n51,1.0752688172);
  g.add_edge(n59,n53,1.47058823529);
  g.add_edge(n59,n61,1.85185185185);
  g.add_edge(n59,n66,1.14942528736);
  g.add_edge(n59,n69,1.02040816327);
  g.add_edge(n59,n72,1.53846153846);
  g.add_edge(n59,n73,1.26582278481);
  g.add_edge(n59,n77,1.33333333333);
  g.add_edge(n59,n79,1.04166666667);
  g.add_edge(n59,n81,1.44927536232);
  g.add_edge(n59,n82,1.14942528736);
  g.add_edge(n59,n91,1.19047619048);
  g.add_edge(n59,n95,1.11111111111);
  g.add_edge(n59,n102,1.23456790123);
  g.add_edge(n60,n9,1.33333333333);
  g.add_edge(n60,n12,1.78571428571);
  g.add_edge(n60,n24,1.49253731343);
  g.add_edge(n60,n28,1.81818181818);
  g.add_edge(n60,n30,1.61290322581);
  g.add_edge(n60,n37,1.51515151515);
  g.add_edge(n60,n44,1.85185185185);
  g.add_edge(n60,n61,1.85185185185);
  g.add_edge(n60,n77,1.31578947368);
  g.add_edge(n60,n95,1.12359550562);
  g.add_edge(n60,n102,1.26582278481);
  g.add_edge(n61,n49,1.88679245283);
  g.add_edge(n61,n52,1.75438596491);
  g.add_edge(n61,n56,1.81818181818);
  g.add_edge(n61,n62,1.92307692308);
  g.add_edge(n61,n65,1.78571428571);
  g.add_edge(n61,n74,1.81818181818);
  g.add_edge(n61,n80,1.69491525424);
  g.add_edge(n61,n85,1.72413793103);
  g.add_edge(n61,n87,2.04081632653);
  g.add_edge(n61,n89,1.42857142857);
  g.add_edge(n61,n92,1.47058823529);
  g.add_edge(n61,n98,1.5873015873);
  g.add_edge(n61,n99,1.72413793103);
  g.add_edge(n63,n12,1.72413793103);
  g.add_edge(n63,n24,1.44927536232);
  g.add_edge(n63,n28,1.88679245283);
  g.add_edge(n63,n30,1.5625);
  g.add_edge(n63,n37,1.47058823529);
  g.add_edge(n63,n44,1.72413793103);
  g.add_edge(n63,n61,1.92307692308);
  g.add_edge(n63,n77,1.35135135135);
  g.add_edge(n63,n95,1.11111111111);
  g.add_edge(n63,n102,1.25);
  g.add_edge(n64,n28,1.03092783505);
  g.add_edge(n64,n44,1.03092783505);
  g.add_edge(n64,n61,1.06382978723);
  g.add_edge(n65,n28,1.75438596491);
  g.add_edge(n65,n95,1.06382978723);
  g.add_edge(n65,n102,1.26582278481);
  g.add_edge(n66,n1,1.04166666667);
  g.add_edge(n66,n5,1.11111111111);
  g.add_edge(n66,n7,1.11111111111);
  g.add_edge(n66,n21,1.05263157895);
  g.add_edge(n66,n22,1.21951219512);
  g.add_edge(n66,n32,50.0);
  g.add_edge(n66,n33,1.12359550562);
  g.add_edge(n66,n34,1.16279069767);
  g.add_edge(n66,n42,1.13636363636);
  g.add_edge(n66,n43,11.1111111111);
  g.add_edge(n66,n45,1.0989010989);
  g.add_edge(n66,n49,1.16279069767);
  g.add_edge(n66,n50,3.7037037037);
  g.add_edge(n66,n52,1.12359550562);
  g.add_edge(n66,n55,1.11111111111);
  g.add_edge(n66,n56,1.13636363636);
  g.add_edge(n66,n58,1.0101010101);
  g.add_edge(n66,n60,1.14942528736);
  g.add_edge(n66,n62,1.21951219512);
  g.add_edge(n66,n63,1.17647058824);
  g.add_edge(n66,n65,1.0989010989);
  g.add_edge(n66,n74,1.14942528736);
  g.add_edge(n66,n80,1.14942528736);
  g.add_edge(n66,n83,1.0752688172);
  g.add_edge(n66,n85,1.16279069767);
  g.add_edge(n66,n87,1.23456790123);
  g.add_edge(n66,n88,1.17647058824);
  g.add_edge(n66,n96,1.20481927711);
  g.add_edge(n66,n98,1.05263157895);
  g.add_edge(n66,n99,1.17647058824);
  g.add_edge(n66,n101,1.0752688172);
  g.add_edge(n67,n9,1.08695652174);
  g.add_edge(n67,n12,1.40845070423);
  g.add_edge(n67,n13,1.53846153846);
  g.add_edge(n67,n24,1.17647058824);
  g.add_edge(n67,n26,1.12359550562);
  g.add_edge(n67,n28,1.53846153846);
  g.add_edge(n67,n30,1.28205128205);
  g.add_edge(n67,n37,1.23456790123);
  g.add_edge(n67,n43,3.44827586207);
  g.add_edge(n67,n44,1.40845070423);
  g.add_edge(n67,n61,1.49253731343);
  g.add_edge(n67,n77,1.14942528736);
  g.add_edge(n67,n102,1.06382978723);
  g.add_edge(n68,n22,1.04166666667);
  g.add_edge(n68,n32,33.3333333333);
  g.add_edge(n68,n34,1.02040816327);
  g.add_edge(n68,n43,9.09090909091);
  g.add_edge(n68,n49,1.03092783505);
  g.add_edge(n68,n50,3.33333333333);
  g.add_edge(n68,n62,1.02040816327);
  g.add_edge(n68,n85,1.02040816327);
  g.add_edge(n68,n87,1.03092783505);
  g.add_edge(n68,n88,1.0101010101);
  g.add_edge(n68,n96,1.0101010101);
  g.add_edge(n69,n5,1.02040816327);
  g.add_edge(n69,n7,1.0101010101);
  g.add_edge(n69,n8,1.16279069767);
  g.add_edge(n69,n14,1.04166666667);
  g.add_edge(n69,n22,1.0752688172);
  g.add_edge(n69,n32,50.0);
  g.add_edge(n69,n33,1.02040816327);
  g.add_edge(n69,n34,1.06382978723);
  g.add_edge(n69,n36,1.69491525424);
  g.add_edge(n69,n41,1.75438596491);
  g.add_edge(n69,n42,1.03092783505);
  g.add_edge(n69,n43,12.5);
  g.add_edge(n69,n49,1.04166666667);
  g.add_edge(n69,n50,3.22580645161);
  g.add_edge(n69,n52,1.04166666667);
  g.add_edge(n69,n55,1.0101010101);
  g.add_edge(n69,n56,1.03092783505);
  g.add_edge(n69,n60,1.04166666667);
  g.add_edge(n69,n62,1.05263157895);
  g.add_edge(n69,n63,1.02040816327);
  g.add_edge(n69,n72,25.0);
  g.add_edge(n69,n74,1.03092783505);
  g.add_edge(n69,n78,1.04166666667);
  g.add_edge(n69,n80,1.03092783505);
  g.add_edge(n69,n85,1.11111111111);
  g.add_edge(n69,n86,1.0101010101);
  g.add_edge(n69,n87,1.08695652174);
  g.add_edge(n69,n88,1.03092783505);
  g.add_edge(n69,n96,1.08695652174);
  g.add_edge(n69,n99,1.0752688172);
  g.add_edge(n70,n9,1.11111111111);
  g.add_edge(n70,n12,1.38888888889);
  g.add_edge(n70,n13,1.5873015873);
  g.add_edge(n70,n24,1.20481927711);
  g.add_edge(n70,n26,1.16279069767);
  g.add_edge(n70,n28,1.40845070423);
  g.add_edge(n70,n30,1.35135135135);
  g.add_edge(n70,n37,1.26582278481);
  g.add_edge(n70,n43,4.0);
  g.add_edge(n70,n44,1.42857142857);
  g.add_edge(n70,n61,1.49253731343);
  g.add_edge(n70,n77,1.0989010989);
  g.add_edge(n70,n102,1.11111111111);
  g.add_edge(n71,n32,50.0);
  g.add_edge(n71,n43,11.1111111111);
  g.add_edge(n71,n50,2.5641025641);
  g.add_edge(n72,n1,1.53846153846);
  g.add_edge(n72,n2,14.2857142857);
  g.add_edge(n72,n3,1.85185185185);
  g.add_edge(n72,n5,1.5625);
  g.add_edge(n72,n6,1.6393442623);
  g.add_edge(n72,n7,1.53846153846);
  g.add_edge(n72,n8,1.61290322581);
  g.add_edge(n72,n9,10.0);
  g.add_edge(n72,n10,2.63157894737);
  g.add_edge(n72,n11,10.0);
  g.add_edge(n72,n12,16.6666666667);
  g.add_edge(n72,n13,16.6666666667);
  g.add_edge(n72,n14,1.53846153846);
  g.add_edge(n72,n15,9.09090909091);
  g.add_edge(n72,n16,1.61290322581);
  g.add_edge(n72,n17,25.0);
  g.add_edge(n72,n18,1.53846153846);
  g.add_edge(n72,n20,9.09090909091);
  g.add_edge(n72,n21,1.5625);
  g.add_edge(n72,n22,1.53846153846);
  g.add_edge(n72,n23,2.27272727273);
  g.add_edge(n72,n24,14.2857142857);
  g.add_edge(n72,n25,10.0);
  g.add_edge(n72,n26,16.6666666667);
  g.add_edge(n72,n28,100.0);
  g.add_edge(n72,n29,33.3333333333);
  g.add_edge(n72,n30,20.0);
  g.add_edge(n72,n31,1.61290322581);
  g.add_edge(n72,n33,1.53846153846);
  g.add_edge(n72,n34,1.53846153846);
  g.add_edge(n72,n35,20.0);
  g.add_edge(n72,n37,25.0);
  g.add_edge(n72,n38,14.2857142857);
  g.add_edge(n72,n39,7.14285714286);
  g.add_edge(n72,n42,1.53846153846);
  g.add_edge(n72,n44,20.0);
  g.add_edge(n72,n45,1.53846153846);
  g.add_edge(n72,n46,1.53846153846);
  g.add_edge(n72,n47,10.0);
  g.add_edge(n72,n48,16.6666666667);
  g.add_edge(n72,n49,1.61290322581);
  g.add_edge(n72,n50,1.5625);
  g.add_edge(n72,n51,6.25);
  g.add_edge(n72,n52,1.53846153846);
  g.add_edge(n72,n53,9.09090909091);
  g.add_edge(n72,n54,1.78571428571);
  g.add_edge(n72,n55,1.66666666667);
  g.add_edge(n72,n56,1.53846153846);
  g.add_edge(n72,n58,1.53846153846);
  g.add_edge(n72,n60,1.5873015873);
  g.add_edge(n72,n61,33.3333333333);
  g.add_edge(n72,n62,1.53846153846);
  g.add_edge(n72,n63,1.53846153846);
  g.add_edge(n72,n64,1.72413793103);
  g.add_edge(n72,n65,1.53846153846);
  g.add_edge(n72,n66,16.6666666667);
  g.add_edge(n72,n67,1.53846153846);
  g.add_edge(n72,n68,12.5);
  g.add_edge(n72,n70,1.6393442623);
  g.add_edge(n72,n71,10.0);
  g.add_edge(n72,n73,9.09090909091);
  g.add_edge(n72,n74,1.61290322581);
  g.add_edge(n72,n75,5.0);
  g.add_edge(n72,n76,1.5625);
  g.add_edge(n72,n77,33.3333333333);
  g.add_edge(n72,n78,1.53846153846);
  g.add_edge(n72,n79,16.6666666667);
  g.add_edge(n72,n80,1.53846153846);
  g.add_edge(n72,n81,20.0);
  g.add_edge(n72,n82,16.6666666667);
  g.add_edge(n72,n83,1.5873015873);
  g.add_edge(n72,n84,1.6393442623);
  g.add_edge(n72,n85,1.61290322581);
  g.add_edge(n72,n86,1.53846153846);
  g.add_edge(n72,n87,1.5873015873);
  g.add_edge(n72,n88,1.5625);
  g.add_edge(n72,n89,1.5625);
  g.add_edge(n72,n90,10.0);
  g.add_edge(n72,n91,7.14285714286);
  g.add_edge(n72,n92,1.6393442623);
  g.add_edge(n72,n93,4.16666666667);
  g.add_edge(n72,n94,8.33333333333);
  g.add_edge(n72,n95,9.09090909091);
  g.add_edge(n72,n96,1.5873015873);
  g.add_edge(n72,n97,1.5873015873);
  g.add_edge(n72,n98,1.5625);
  g.add_edge(n72,n99,1.61290322581);
  g.add_edge(n72,n101,1.5625);
  g.add_edge(n72,n102,7.69230769231);
  g.add_edge(n73,n1,1.16279069767);
  g.add_edge(n73,n3,1.12359550562);
  g.add_edge(n73,n5,1.28205128205);
  g.add_edge(n73,n7,1.28205128205);
  g.add_edge(n73,n21,1.17647058824);
  g.add_edge(n73,n22,1.35135135135);
  g.add_edge(n73,n31,1.03092783505);
  g.add_edge(n73,n32,50.0);
  g.add_edge(n73,n34,1.2987012987);
  g.add_edge(n73,n42,1.31578947368);
  g.add_edge(n73,n43,12.5);
  g.add_edge(n73,n46,1.05263157895);
  g.add_edge(n73,n49,1.31578947368);
  g.add_edge(n73,n50,3.84615384615);
  g.add_edge(n73,n52,1.26582278481);
  g.add_edge(n73,n55,1.25);
  g.add_edge(n73,n56,1.28205128205);
  g.add_edge(n73,n58,1.12359550562);
  g.add_edge(n73,n60,1.31578947368);
  g.add_edge(n73,n62,1.31578947368);
  g.add_edge(n73,n63,1.26582278481);
  g.add_edge(n73,n65,1.26582278481);
  g.add_edge(n73,n67,1.0989010989);
  g.add_edge(n73,n70,1.12359550562);
  g.add_edge(n73,n74,1.31578947368);
  g.add_edge(n73,n80,1.13636363636);
  g.add_edge(n73,n83,1.20481927711);
  g.add_edge(n73,n85,1.35135135135);
  g.add_edge(n73,n87,1.35135135135);
  g.add_edge(n73,n88,1.31578947368);
  g.add_edge(n73,n92,1.0989010989);
  g.add_edge(n73,n96,1.19047619048);
  g.add_edge(n73,n98,1.17647058824);
  g.add_edge(n73,n99,1.17647058824);
  g.add_edge(n73,n101,1.21951219512);
  g.add_edge(n74,n28,1.81818181818);
  g.add_edge(n74,n37,1.49253731343);
  g.add_edge(n74,n44,1.81818181818);
  g.add_edge(n74,n77,1.33333333333);
  g.add_edge(n74,n95,1.11111111111);
  g.add_edge(n74,n102,1.28205128205);
  g.add_edge(n76,n9,1.20481927711);
  g.add_edge(n76,n11,1.0752688172);
  g.add_edge(n76,n12,1.5625);
  g.add_edge(n76,n13,1.66666666667);
  g.add_edge(n76,n17,1.40845070423);
  g.add_edge(n76,n24,1.2987012987);
  g.add_edge(n76,n26,1.19047619048);
  g.add_edge(n76,n28,1.5873015873);
  g.add_edge(n76,n29,1.42857142857);
  g.add_edge(n76,n30,1.40845070423);
  g.add_edge(n76,n32,25.0);
  g.add_edge(n76,n35,1.69491525424);
  g.add_edge(n76,n37,1.28205128205);
  g.add_edge(n76,n38,1.49253731343);
  g.add_edge(n76,n41,2.38095238095);
  g.add_edge(n76,n43,3.125);
  g.add_edge(n76,n44,1.51515151515);
  g.add_edge(n76,n48,1.6393442623);
  g.add_edge(n76,n53,1.2987012987);
  g.add_edge(n76,n61,1.66666666667);
  g.add_edge(n76,n66,1.04166666667);
  g.add_edge(n76,n73,1.16279069767);
  g.add_edge(n76,n77,1.19047619048);
  g.add_edge(n76,n81,1.31578947368);
  g.add_edge(n76,n91,1.0989010989);
  g.add_edge(n76,n95,1.03092783505);
  g.add_edge(n76,n102,1.13636363636);
  g.add_edge(n77,n52,1.2987012987);
  g.add_edge(n77,n62,1.38888888889);
  g.add_edge(n77,n65,1.26582278481);
  g.add_edge(n77,n87,1.47058823529);
  g.add_edge(n77,n89,1.23456790123);
  g.add_edge(n77,n92,1.11111111111);
  g.add_edge(n77,n98,1.21951219512);
  g.add_edge(n77,n99,1.33333333333);
  g.add_edge(n78,n9,1.35135135135);
  g.add_edge(n78,n11,1.16279069767);
  g.add_edge(n78,n12,1.72413793103);
  g.add_edge(n78,n13,1.81818181818);
  g.add_edge(n78,n17,1.61290322581);
  g.add_edge(n78,n24,1.49253731343);
  g.add_edge(n78,n25,1.02040816327);
  g.add_edge(n78,n26,1.33333333333);
  g.add_edge(n78,n28,1.88679245283);
  g.add_edge(n78,n29,1.6393442623);
  g.add_edge(n78,n30,1.61290322581);
  g.add_edge(n78,n32,25.0);
  g.add_edge(n78,n35,2.04081632653);
  g.add_edge(n78,n37,1.49253731343);
  g.add_edge(n78,n38,1.75438596491);
  g.add_edge(n78,n41,2.63157894737);
  g.add_edge(n78,n43,3.0303030303);
  g.add_edge(n78,n44,1.81818181818);
  g.add_edge(n78,n48,2.0);
  g.add_edge(n78,n51,1.0989010989);
  g.add_edge(n78,n53,1.51515151515);
  g.add_edge(n78,n61,1.92307692308);
  g.add_edge(n78,n66,1.17647058824);
  g.add_edge(n78,n68,1.02040816327);
  g.add_edge(n78,n73,1.2987012987);
  g.add_edge(n78,n77,1.3698630137);
  g.add_edge(n78,n79,1.06382978723);
  g.add_edge(n78,n81,1.49253731343);
  g.add_edge(n78,n91,1.20481927711);
  g.add_edge(n78,n95,1.13636363636);
  g.add_edge(n78,n102,1.26582278481);
  g.add_edge(n79,n22,1.08695652174);
  g.add_edge(n79,n32,50.0);
  g.add_edge(n79,n34,1.04166666667);
  g.add_edge(n79,n43,11.1111111111);
  g.add_edge(n79,n49,1.04166666667);
  g.add_edge(n79,n50,3.44827586207);
  g.add_edge(n79,n52,1.0101010101);
  g.add_edge(n79,n56,1.02040816327);
  g.add_edge(n79,n60,1.03092783505);
  g.add_edge(n79,n62,1.06382978723);
  g.add_edge(n79,n63,1.03092783505);
  g.add_edge(n79,n74,1.03092783505);
  g.add_edge(n79,n80,1.03092783505);
  g.add_edge(n79,n85,1.0989010989);
  g.add_edge(n79,n87,1.0989010989);
  g.add_edge(n79,n88,1.05263157895);
  g.add_edge(n79,n96,1.0752688172);
  g.add_edge(n79,n99,1.05263157895);
  g.add_edge(n80,n28,1.51515151515);
  g.add_edge(n80,n77,1.33333333333);
  g.add_edge(n80,n95,1.0752688172);
  g.add_edge(n80,n102,1.0752688172);
  g.add_edge(n81,n1,1.2987012987);
  g.add_edge(n81,n3,1.26582278481);
  g.add_edge(n81,n5,1.42857142857);
  g.add_edge(n81,n7,1.47058823529);
  g.add_edge(n81,n18,1.40845070423);
  g.add_edge(n81,n21,1.31578947368);
  g.add_edge(n81,n22,1.47058823529);
  g.add_edge(n81,n31,1.16279069767);
  g.add_edge(n81,n32,50.0);
  g.add_edge(n81,n33,1.49253731343);
  g.add_edge(n81,n34,1.44927536232);
  g.add_edge(n81,n36,2.32558139535);
  g.add_edge(n81,n42,1.51515151515);
  g.add_edge(n81,n43,14.2857142857);
  g.add_edge(n81,n45,1.40845070423);
  g.add_edge(n81,n46,1.19047619048);
  g.add_edge(n81,n49,1.51515151515);
  g.add_edge(n81,n50,5.0);
  g.add_edge(n81,n52,1.47058823529);
  g.add_edge(n81,n55,1.42857142857);
  g.add_edge(n81,n56,1.47058823529);
  g.add_edge(n81,n58,1.28205128205);
  g.add_edge(n81,n60,1.51515151515);
  g.add_edge(n81,n62,1.47058823529);
  g.add_edge(n81,n63,1.42857142857);
  g.add_edge(n81,n65,1.44927536232);
  g.add_edge(n81,n67,1.20481927711);
  g.add_edge(n81,n70,1.31578947368);
  g.add_edge(n81,n74,1.49253731343);
  g.add_edge(n81,n80,1.31578947368);
  g.add_edge(n81,n83,1.3698630137);
  g.add_edge(n81,n84,1.03092783505);
  g.add_edge(n81,n85,1.5625);
  g.add_edge(n81,n86,1.38888888889);
  g.add_edge(n81,n87,1.5625);
  g.add_edge(n81,n88,1.47058823529);
  g.add_edge(n81,n89,1.16279069767);
  g.add_edge(n81,n92,1.23456790123);
  g.add_edge(n81,n96,1.44927536232);
  g.add_edge(n81,n97,1.04166666667);
  g.add_edge(n81,n98,1.35135135135);
  g.add_edge(n81,n99,1.3698630137);
  g.add_edge(n81,n101,1.38888888889);
  g.add_edge(n82,n1,1.06382978723);
  g.add_edge(n82,n3,1.02040816327);
  g.add_edge(n82,n5,1.13636363636);
  g.add_edge(n82,n6,1.06382978723);
  g.add_edge(n82,n7,1.13636363636);
  g.add_edge(n82,n8,1.28205128205);
  g.add_edge(n82,n14,1.17647058824);
  g.add_edge(n82,n16,1.06382978723);
  g.add_edge(n82,n18,1.12359550562);
  g.add_edge(n82,n21,1.0752688172);
  g.add_edge(n82,n22,1.21951219512);
  g.add_edge(n82,n32,50.0);
  g.add_edge(n82,n33,1.14942528736);
  g.add_edge(n82,n34,1.20481927711);
  g.add_edge(n82,n36,1.85185185185);
  g.add_edge(n82,n41,1.75438596491);
  g.add_edge(n82,n42,1.16279069767);
  g.add_edge(n82,n43,14.2857142857);
  g.add_edge(n82,n45,1.12359550562);
  g.add_edge(n82,n49,1.19047619048);
  g.add_edge(n82,n50,3.7037037037);
  g.add_edge(n82,n52,1.14942528736);
  g.add_edge(n82,n55,1.13636363636);
  g.add_edge(n82,n56,1.16279069767);
  g.add_edge(n82,n58,1.02040816327);
  g.add_edge(n82,n60,1.19047619048);
  g.add_edge(n82,n62,1.21951219512);
  g.add_edge(n82,n63,1.17647058824);
  g.add_edge(n82,n65,1.12359550562);
  g.add_edge(n82,n67,1.0101010101);
  g.add_edge(n82,n70,1.0101010101);
  g.add_edge(n82,n74,1.17647058824);
  g.add_edge(n82,n76,1.06382978723);
  g.add_edge(n82,n78,1.17647058824);
  g.add_edge(n82,n80,1.13636363636);
  g.add_edge(n82,n83,1.0989010989);
  g.add_edge(n82,n85,1.21951219512);
  g.add_edge(n82,n86,1.13636363636);
  g.add_edge(n82,n87,1.25);
  g.add_edge(n82,n88,1.16279069767);
  g.add_edge(n82,n89,1.0989010989);
  g.add_edge(n82,n92,1.0101010101);
  g.add_edge(n82,n96,1.20481927711);
  g.add_edge(n82,n98,1.0752688172);
  g.add_edge(n82,n99,1.20481927711);
  g.add_edge(n82,n101,1.11111111111);
  g.add_edge(n83,n12,1.5625);
  g.add_edge(n83,n24,1.31578947368);
  g.add_edge(n83,n28,1.72413793103);
  g.add_edge(n83,n30,1.47058823529);
  g.add_edge(n83,n37,1.35135135135);
  g.add_edge(n83,n44,1.6393442623);
  g.add_edge(n83,n61,1.69491525424);
  g.add_edge(n83,n77,1.21951219512);
  g.add_edge(n83,n95,1.04166666667);
  g.add_edge(n83,n102,1.20481927711);
  g.add_edge(n84,n12,1.16279069767);
  g.add_edge(n84,n13,1.25);
  g.add_edge(n84,n17,1.0101010101);
  g.add_edge(n84,n24,1.0101010101);
  g.add_edge(n84,n28,1.19047619048);
  g.add_edge(n84,n30,1.05263157895);
  g.add_edge(n84,n32,25.0);
  g.add_edge(n84,n35,1.25);
  g.add_edge(n84,n37,1.02040816327);
  g.add_edge(n84,n43,3.7037037037);
  g.add_edge(n84,n44,1.13636363636);
  g.add_edge(n84,n53,1.03092783505);
  g.add_edge(n84,n61,1.16279069767);
  g.add_edge(n85,n28,1.88679245283);
  g.add_edge(n85,n37,1.42857142857);
  g.add_edge(n85,n44,1.85185185185);
  g.add_edge(n85,n77,1.2987012987);
  g.add_edge(n85,n95,1.14942528736);
  g.add_edge(n85,n102,1.31578947368);
  g.add_edge(n86,n9,1.2987012987);
  g.add_edge(n86,n12,1.61290322581);
  g.add_edge(n86,n13,1.75438596491);
  g.add_edge(n86,n17,1.53846153846);
  g.add_edge(n86,n24,1.3698630137);
  g.add_edge(n86,n26,1.28205128205);
  g.add_edge(n86,n28,1.78571428571);
  g.add_edge(n86,n30,1.53846153846);
  g.add_edge(n86,n32,25.0);
  g.add_edge(n86,n35,1.96078431373);
  g.add_edge(n86,n37,1.40845070423);
  g.add_edge(n86,n43,3.125);
  g.add_edge(n86,n44,1.66666666667);
  g.add_edge(n86,n53,1.42857142857);
  g.add_edge(n86,n61,1.75438596491);
  g.add_edge(n86,n66,1.13636363636);
  g.add_edge(n86,n73,1.25);
  g.add_edge(n86,n77,1.28205128205);
  g.add_edge(n86,n79,1.02040816327);
  g.add_edge(n86,n91,1.12359550562);
  g.add_edge(n86,n95,1.0989010989);
  g.add_edge(n86,n102,1.19047619048);
  g.add_edge(n88,n9,1.35135135135);
  g.add_edge(n88,n12,1.72413793103);
  g.add_edge(n88,n24,1.47058823529);
  g.add_edge(n88,n28,1.88679245283);
  g.add_edge(n88,n30,1.61290322581);
  g.add_edge(n88,n37,1.47058823529);
  g.add_edge(n88,n44,1.78571428571);
  g.add_edge(n88,n61,1.88679245283);
  g.add_edge(n88,n77,1.3698630137);
  g.add_edge(n88,n95,1.13636363636);
  g.add_edge(n88,n102,1.26582278481);
  g.add_edge(n89,n28,1.25);
  g.add_edge(n90,n32,25.0);
  g.add_edge(n90,n34,1.02040816327);
  g.add_edge(n90,n36,1.61290322581);
  g.add_edge(n90,n43,6.66666666667);
  g.add_edge(n90,n50,2.85714285714);
  g.add_edge(n91,n1,1.08695652174);
  g.add_edge(n91,n3,1.08695652174);
  g.add_edge(n91,n5,1.19047619048);
  g.add_edge(n91,n22,1.17647058824);
  g.add_edge(n91,n32,50.0);
  g.add_edge(n91,n34,1.20481927711);
  g.add_edge(n91,n42,1.21951219512);
  g.add_edge(n91,n43,8.33333333333);
  g.add_edge(n91,n49,1.20481927711);
  g.add_edge(n91,n50,3.57142857143);
  g.add_edge(n91,n52,1.14942528736);
  g.add_edge(n91,n55,1.16279069767);
  g.add_edge(n91,n56,1.17647058824);
  g.add_edge(n91,n58,1.0752688172);
  g.add_edge(n91,n60,1.20481927711);
  g.add_edge(n91,n62,1.17647058824);
  g.add_edge(n91,n63,1.20481927711);
  g.add_edge(n91,n65,1.17647058824);
  g.add_edge(n91,n67,1.05263157895);
  g.add_edge(n91,n70,1.03092783505);
  g.add_edge(n91,n74,1.23456790123);
  g.add_edge(n91,n80,1.04166666667);
  g.add_edge(n91,n83,1.13636363636);
  g.add_edge(n91,n85,1.19047619048);
  g.add_edge(n91,n87,1.26582278481);
  g.add_edge(n91,n88,1.19047619048);
  g.add_edge(n91,n92,1.06382978723);
  g.add_edge(n91,n96,1.0752688172);
  g.add_edge(n91,n98,1.12359550562);
  g.add_edge(n91,n99,1.0989010989);
  g.add_edge(n91,n101,1.14942528736);
  g.add_edge(n93,n32,50.0);
  g.add_edge(n93,n43,11.1111111111);
  g.add_edge(n93,n50,2.12765957447);
  g.add_edge(n95,n52,1.08695652174);
  g.add_edge(n95,n62,1.12359550562);
  g.add_edge(n95,n87,1.19047619048);
  g.add_edge(n95,n98,1.03092783505);
  g.add_edge(n95,n99,1.11111111111);
  g.add_edge(n96,n9,1.31578947368);
  g.add_edge(n96,n12,1.44927536232);
  g.add_edge(n96,n24,1.31578947368);
  g.add_edge(n96,n28,1.66666666667);
  g.add_edge(n96,n30,1.44927536232);
  g.add_edge(n96,n37,1.53846153846);
  g.add_edge(n96,n44,1.5625);
  g.add_edge(n96,n61,1.72413793103);
  g.add_edge(n96,n77,1.33333333333);
  g.add_edge(n96,n95,1.13636363636);
  g.add_edge(n96,n102,1.16279069767);
  g.add_edge(n97,n12,1.19047619048);
  g.add_edge(n97,n13,1.28205128205);
  g.add_edge(n97,n24,1.05263157895);
  g.add_edge(n97,n28,1.16279069767);
  g.add_edge(n97,n30,1.0752688172);
  g.add_edge(n97,n32,25.0);
  g.add_edge(n97,n35,1.25);
  g.add_edge(n97,n37,1.02040816327);
  g.add_edge(n97,n43,4.16666666667);
  g.add_edge(n97,n44,1.16279069767);
  g.add_edge(n97,n53,1.05263157895);
  g.add_edge(n97,n61,1.19047619048);
  g.add_edge(n98,n28,1.5873015873);
  g.add_edge(n100,n9,1.0752688172);
  g.add_edge(n100,n11,1.04166666667);
  g.add_edge(n100,n12,1.3698630137);
  g.add_edge(n100,n13,1.53846153846);
  g.add_edge(n100,n17,1.26582278481);
  g.add_edge(n100,n24,1.17647058824);
  g.add_edge(n100,n26,1.11111111111);
  g.add_edge(n100,n28,1.3698630137);
  g.add_edge(n100,n29,1.2987012987);
  g.add_edge(n100,n30,1.26582278481);
  g.add_edge(n100,n32,25.0);
  g.add_edge(n100,n35,1.51515151515);
  g.add_edge(n100,n37,1.20481927711);
  g.add_edge(n100,n38,1.38888888889);
  g.add_edge(n100,n41,2.63157894737);
  g.add_edge(n100,n43,3.84615384615);
  g.add_edge(n100,n44,1.3698630137);
  g.add_edge(n100,n48,1.47058823529);
  g.add_edge(n100,n53,1.23456790123);
  g.add_edge(n100,n61,1.44927536232);
  g.add_edge(n100,n72,1.5873015873);
  g.add_edge(n100,n73,1.0989010989);
  g.add_edge(n100,n77,1.13636363636);
  g.add_edge(n100,n81,1.20481927711);
  g.add_edge(n100,n82,1.02040816327);
  g.add_edge(n100,n91,1.05263157895);
  g.add_edge(n100,n102,1.12359550562);
  g.add_edge(n101,n9,1.23456790123);
  g.add_edge(n101,n12,1.66666666667);
  g.add_edge(n101,n13,1.78571428571);
  g.add_edge(n101,n24,1.3698630137);
  g.add_edge(n101,n26,1.25);
  g.add_edge(n101,n28,1.66666666667);
  g.add_edge(n101,n30,1.47058823529);
  g.add_edge(n101,n32,25.0);
  g.add_edge(n101,n37,1.38888888889);
  g.add_edge(n101,n43,3.22580645161);
  g.add_edge(n101,n44,1.66666666667);
  g.add_edge(n101,n53,1.40845070423);
  g.add_edge(n101,n61,1.66666666667);
  g.add_edge(n101,n77,1.25);
  g.add_edge(n101,n95,1.05263157895);
  g.add_edge(n101,n102,1.19047619048);
  g.add_edge(n102,n52,1.23456790123);
  g.add_edge(n102,n62,1.23456790123);
  g.add_edge(n102,n87,1.31578947368);
  g.add_edge(n102,n92,1.0752688172);
  g.add_edge(n102,n98,1.14942528736);
  g.add_edge(n102,n99,1.12359550562);


}


void initialize_senate(GraphType& g,double min_win_size, double max_win_size, double m){

  srand (time(NULL));
  static std::mt19937 default_generator;
  std::uniform_real_distribution<double> dist(min_win_size, max_win_size);

  //Randomly Create Nodes
  auto n0  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n1  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n2  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n3  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n4  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n5  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n6  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n7  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n8  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n9  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n10  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n11  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n12  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n13  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n14  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n15  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n16  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n17  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n18  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n19  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n20  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n21  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n22  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n23  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n24  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n25  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n26  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n27  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n28  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n29  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n30  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n31  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n32  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n33  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n34  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n35  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n36  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n37  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n38  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n39  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n40  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n41  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n42  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n43  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n44  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n45  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n46  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n47  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n48  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n49  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n50  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n51  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n52  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n53  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n54  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n55  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n56  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n57  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n58  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n59  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n60  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n61  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n62  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n63  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n64  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n65  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n66  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n67  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n68  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n69  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n70  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n71  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n72  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n73  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n74  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n75  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n76  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n77  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n78  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n79  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n80  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n81  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n82  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n83  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n84  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n85  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,8));
  auto n86  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n87  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n88  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n89  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n90  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n91  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n92  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n93  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n94  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n95  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));
  auto n96  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n97  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n98  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n99  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n100  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n101  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,1));
  auto n102  = g.add_node(Point(dist(default_generator),dist(default_generator),0.0),NodeValue(m,2));

  g.add_edge(n0,n1,0.862068965517);
  g.add_edge(n0,n2,0.460829493088);
  g.add_edge(n0,n3,0.840336134454);
  g.add_edge(n0,n4,0.917431192661);
  g.add_edge(n0,n5,0.934579439252);
  g.add_edge(n0,n6,0.862068965517);
  g.add_edge(n0,n7,0.917431192661);
  g.add_edge(n0,n8,1.02040816327);
  g.add_edge(n0,n9,0.45871559633);
  g.add_edge(n0,n10,0.561797752809);
  g.add_edge(n0,n11,0.440528634361);
  g.add_edge(n0,n12,0.518134715026);
  g.add_edge(n0,n13,0.512820512821);
  g.add_edge(n0,n14,0.934579439252);
  g.add_edge(n0,n16,0.862068965517);
  g.add_edge(n0,n17,0.446428571429);
  g.add_edge(n0,n18,0.900900900901);
  g.add_edge(n0,n19,0.840336134454);
  g.add_edge(n0,n20,0.460829493088);
  g.add_edge(n0,n21,0.869565217391);
  g.add_edge(n0,n22,0.961538461538);
  g.add_edge(n0,n23,0.510204081633);
  g.add_edge(n0,n24,0.490196078431);
  g.add_edge(n0,n25,0.448430493274);
  g.add_edge(n0,n26,0.442477876106);
  g.add_edge(n0,n27,0.444444444444);
  g.add_edge(n0,n28,0.49504950495);
  g.add_edge(n0,n29,0.456621004566);
  g.add_edge(n0,n30,0.446428571429);
  g.add_edge(n0,n31,0.8);
  g.add_edge(n0,n32,33.3333333333);
  g.add_edge(n0,n33,0.925925925926);
  g.add_edge(n0,n34,0.961538461538);
  g.add_edge(n0,n35,0.529100529101);
  g.add_edge(n0,n36,1.49253731343);
  g.add_edge(n0,n37,0.454545454545);
  g.add_edge(n0,n38,0.497512437811);
  g.add_edge(n0,n39,0.462962962963);
  g.add_edge(n0,n40,0.813008130081);
  g.add_edge(n0,n41,1.72413793103);
  g.add_edge(n0,n42,0.934579439252);
  g.add_edge(n0,n43,9.09090909091);
  g.add_edge(n0,n44,0.456621004566);
  g.add_edge(n0,n45,0.900900900901);
  g.add_edge(n0,n46,0.819672131148);
  g.add_edge(n0,n47,0.537634408602);
  g.add_edge(n0,n48,0.529100529101);
  g.add_edge(n0,n49,0.934579439252);
  g.add_edge(n0,n50,3.0303030303);
  g.add_edge(n0,n51,0.440528634361);
  g.add_edge(n0,n52,0.909090909091);
  g.add_edge(n0,n53,0.473933649289);
  g.add_edge(n0,n54,0.653594771242);
  g.add_edge(n0,n55,0.909090909091);
  g.add_edge(n0,n56,0.925925925926);
  g.add_edge(n0,n57,0.440528634361);
  g.add_edge(n0,n58,0.840336134454);
  g.add_edge(n0,n59,0.917431192661);
  g.add_edge(n0,n60,0.934579439252);
  g.add_edge(n0,n61,0.473933649289);
  g.add_edge(n0,n62,0.961538461538);
  g.add_edge(n0,n63,0.934579439252);
  g.add_edge(n0,n64,0.675675675676);
  g.add_edge(n0,n65,0.909090909091);
  g.add_edge(n0,n66,0.425531914894);
  g.add_edge(n0,n67,0.833333333333);
  g.add_edge(n0,n68,0.406504065041);
  g.add_edge(n0,n69,0.431034482759);
  g.add_edge(n0,n70,0.826446280992);
  g.add_edge(n0,n71,0.429184549356);
  g.add_edge(n0,n72,14.2857142857);
  g.add_edge(n0,n73,0.456621004566);
  g.add_edge(n0,n74,0.925925925926);
  g.add_edge(n0,n75,0.438596491228);
  g.add_edge(n0,n76,0.862068965517);
  g.add_edge(n0,n77,0.462962962963);
  g.add_edge(n0,n78,0.943396226415);
  g.add_edge(n0,n79,0.425531914894);
  g.add_edge(n0,n80,0.909090909091);
  g.add_edge(n0,n81,0.45045045045);
  g.add_edge(n0,n82,0.416666666667);
  g.add_edge(n0,n83,0.884955752212);
  g.add_edge(n0,n84,0.719424460432);
  g.add_edge(n0,n85,0.990099009901);
  g.add_edge(n0,n86,0.909090909091);
  g.add_edge(n0,n87,0.970873786408);
  g.add_edge(n0,n88,0.925925925926);
  g.add_edge(n0,n89,0.884955752212);
  g.add_edge(n0,n90,0.45045045045);
  g.add_edge(n0,n91,0.460829493088);
  g.add_edge(n0,n92,0.819672131148);
  g.add_edge(n0,n93,0.471698113208);
  g.add_edge(n0,n94,0.438596491228);
  g.add_edge(n0,n95,0.429184549356);
  g.add_edge(n0,n96,0.980392156863);
  g.add_edge(n0,n97,0.719424460432);
  g.add_edge(n0,n98,0.884955752212);
  g.add_edge(n0,n99,0.952380952381);
  g.add_edge(n0,n100,0.840336134454);
  g.add_edge(n0,n101,0.884955752212);
  g.add_edge(n0,n102,0.473933649289);
  g.add_edge(n1,n9,1.17647058824);
  g.add_edge(n1,n10,0.564971751412);
  g.add_edge(n1,n12,1.5625);
  g.add_edge(n1,n13,1.6393442623);
  g.add_edge(n1,n20,0.769230769231);
  g.add_edge(n1,n24,1.28205128205);
  g.add_edge(n1,n26,1.19047619048);
  g.add_edge(n1,n28,1.61290322581);
  g.add_edge(n1,n30,1.40845070423);
  g.add_edge(n1,n37,1.2987012987);
  g.add_edge(n1,n43,3.125);
  g.add_edge(n1,n44,1.53846153846);
  g.add_edge(n1,n50,0.854700854701);
  g.add_edge(n1,n54,0.423728813559);
  g.add_edge(n1,n61,1.5625);
  g.add_edge(n1,n64,0.401606425703);
  g.add_edge(n1,n75,0.840336134454);
  g.add_edge(n1,n77,1.17647058824);
  g.add_edge(n1,n94,0.884955752212);
  g.add_edge(n1,n95,1.0101010101);
  g.add_edge(n1,n102,1.12359550562);
  g.add_edge(n2,n1,0.833333333333);
  g.add_edge(n2,n3,0.8);
  g.add_edge(n2,n5,0.884955752212);
  g.add_edge(n2,n7,0.884955752212);
  g.add_edge(n2,n9,0.492610837438);
  g.add_edge(n2,n10,0.552486187845);
  g.add_edge(n2,n12,0.531914893617);
  g.add_edge(n2,n13,0.534759358289);
  g.add_edge(n2,n20,0.436681222707);
  g.add_edge(n2,n21,0.833333333333);
  g.add_edge(n2,n22,0.917431192661);
  g.add_edge(n2,n24,0.46511627907);
  g.add_edge(n2,n26,0.473933649289);
  g.add_edge(n2,n28,0.520833333333);
  g.add_edge(n2,n30,0.492610837438);
  g.add_edge(n2,n31,0.769230769231);
  g.add_edge(n2,n32,100.0);
  g.add_edge(n2,n34,0.917431192661);
  g.add_edge(n2,n35,0.561797752809);
  g.add_edge(n2,n37,0.487804878049);
  g.add_edge(n2,n42,0.884955752212);
  g.add_edge(n2,n43,10.0);
  g.add_edge(n2,n44,0.497512437811);
  g.add_edge(n2,n46,0.769230769231);
  g.add_edge(n2,n47,0.529100529101);
  g.add_edge(n2,n49,0.909090909091);
  g.add_edge(n2,n50,2.94117647059);
  g.add_edge(n2,n52,0.877192982456);
  g.add_edge(n2,n53,0.510204081633);
  g.add_edge(n2,n54,0.662251655629);
  g.add_edge(n2,n55,0.854700854701);
  g.add_edge(n2,n56,0.869565217391);
  g.add_edge(n2,n58,0.8);
  g.add_edge(n2,n60,0.892857142857);
  g.add_edge(n2,n61,0.512820512821);
  g.add_edge(n2,n62,0.917431192661);
  g.add_edge(n2,n63,0.877192982456);
  g.add_edge(n2,n64,0.699300699301);
  g.add_edge(n2,n65,0.862068965517);
  g.add_edge(n2,n67,0.78125);
  g.add_edge(n2,n68,0.446428571429);
  g.add_edge(n2,n70,0.8);
  g.add_edge(n2,n71,0.46511627907);
  g.add_edge(n2,n73,0.47619047619);
  g.add_edge(n2,n74,0.869565217391);
  g.add_edge(n2,n75,0.460829493088);
  g.add_edge(n2,n77,0.49504950495);
  g.add_edge(n2,n79,0.467289719626);
  g.add_edge(n2,n80,0.884955752212);
  g.add_edge(n2,n83,0.840336134454);
  g.add_edge(n2,n85,0.943396226415);
  g.add_edge(n2,n87,0.925925925926);
  g.add_edge(n2,n88,0.892857142857);
  g.add_edge(n2,n89,0.78125);
  g.add_edge(n2,n91,0.49504950495);
  g.add_edge(n2,n92,0.806451612903);
  g.add_edge(n2,n93,0.471698113208);
  g.add_edge(n2,n94,0.438596491228);
  g.add_edge(n2,n95,0.452488687783);
  g.add_edge(n2,n96,0.934579439252);
  g.add_edge(n2,n97,0.709219858156);
  g.add_edge(n2,n98,0.847457627119);
  g.add_edge(n2,n99,0.884955752212);
  g.add_edge(n2,n101,0.833333333333);
  g.add_edge(n2,n102,0.49504950495);
  g.add_edge(n3,n24,1.26582278481);
  g.add_edge(n3,n28,1.5625);
  g.add_edge(n3,n30,1.33333333333);
  g.add_edge(n3,n37,1.26582278481);
  g.add_edge(n3,n44,1.47058823529);
  g.add_edge(n3,n61,1.53846153846);
  g.add_edge(n3,n77,1.13636363636);
  g.add_edge(n3,n89,0.406504065041);
  g.add_edge(n3,n92,0.403225806452);
  g.add_edge(n3,n94,0.840336134454);
  g.add_edge(n3,n95,0.980392156863);
  g.add_edge(n3,n102,1.13636363636);
  g.add_edge(n4,n2,0.877192982456);
  g.add_edge(n4,n9,1.31578947368);
  g.add_edge(n4,n10,0.591715976331);
  g.add_edge(n4,n11,1.14942528736);
  g.add_edge(n4,n12,1.69491525424);
  g.add_edge(n4,n13,1.75438596491);
  g.add_edge(n4,n15,0.862068965517);
  g.add_edge(n4,n17,1.5625);
  g.add_edge(n4,n20,0.813008130081);
  g.add_edge(n4,n23,0.505050505051);
  g.add_edge(n4,n24,1.42857142857);
  g.add_edge(n4,n25,1.0);
  g.add_edge(n4,n26,1.2987012987);
  g.add_edge(n4,n27,1.53846153846);
  g.add_edge(n4,n28,1.85185185185);
  g.add_edge(n4,n29,1.5873015873);
  g.add_edge(n4,n30,1.5625);
  g.add_edge(n4,n32,25.0);
  g.add_edge(n4,n35,1.96078431373);
  g.add_edge(n4,n36,0.671140939597);
  g.add_edge(n4,n37,1.44927536232);
  g.add_edge(n4,n38,1.69491525424);
  g.add_edge(n4,n39,0.917431192661);
  g.add_edge(n4,n41,2.5641025641);
  g.add_edge(n4,n43,3.0303030303);
  g.add_edge(n4,n44,1.75438596491);
  g.add_edge(n4,n47,0.813008130081);
  g.add_edge(n4,n48,1.92307692308);
  g.add_edge(n4,n50,0.847457627119);
  g.add_edge(n4,n51,1.0752688172);
  g.add_edge(n4,n53,1.47058823529);
  g.add_edge(n4,n54,0.434782608696);
  g.add_edge(n4,n61,1.85185185185);
  g.add_edge(n4,n64,0.406504065041);
  g.add_edge(n4,n66,1.14942528736);
  g.add_edge(n4,n68,0.990099009901);
  g.add_edge(n4,n69,1.02040816327);
  g.add_edge(n4,n71,0.934579439252);
  g.add_edge(n4,n72,1.53846153846);
  g.add_edge(n4,n73,1.26582278481);
  g.add_edge(n4,n75,0.892857142857);
  g.add_edge(n4,n77,1.33333333333);
  g.add_edge(n4,n79,1.03092783505);
  g.add_edge(n4,n81,1.44927536232);
  g.add_edge(n4,n82,1.14942528736);
  g.add_edge(n4,n90,0.934579439252);
  g.add_edge(n4,n91,1.16279069767);
  g.add_edge(n4,n93,0.900900900901);
  g.add_edge(n4,n94,0.925925925926);
  g.add_edge(n4,n95,1.11111111111);
  g.add_edge(n4,n102,1.23456790123);
  g.add_edge(n5,n9,1.26582278481);
  g.add_edge(n5,n10,0.591715976331);
  g.add_edge(n5,n12,1.72413793103);
  g.add_edge(n5,n13,1.85185185185);
  g.add_edge(n5,n20,0.847457627119);
  g.add_edge(n5,n24,1.44927536232);
  g.add_edge(n5,n26,1.28205128205);
  g.add_edge(n5,n28,1.81818181818);
  g.add_edge(n5,n30,1.53846153846);
  g.add_edge(n5,n37,1.47058823529);
  g.add_edge(n5,n44,1.72413793103);
  g.add_edge(n5,n50,0.854700854701);
  g.add_edge(n5,n54,0.444444444444);
  g.add_edge(n5,n61,1.81818181818);
  g.add_edge(n5,n64,0.408163265306);
  g.add_edge(n5,n75,0.900900900901);
  g.add_edge(n5,n77,1.28205128205);
  g.add_edge(n5,n94,0.917431192661);
  g.add_edge(n5,n95,1.0752688172);
  g.add_edge(n5,n102,1.28205128205);
  g.add_edge(n6,n2,0.840336134454);
  g.add_edge(n6,n9,1.20481927711);
  g.add_edge(n6,n10,0.581395348837);
  g.add_edge(n6,n12,1.5625);
  g.add_edge(n6,n13,1.72413793103);
  g.add_edge(n6,n15,0.813008130081);
  g.add_edge(n6,n17,1.40845070423);
  g.add_edge(n6,n20,0.78125);
  g.add_edge(n6,n24,1.3698630137);
  g.add_edge(n6,n26,1.21951219512);
  g.add_edge(n6,n28,1.6393442623);
  g.add_edge(n6,n29,1.47058823529);
  g.add_edge(n6,n30,1.44927536232);
  g.add_edge(n6,n32,25.0);
  g.add_edge(n6,n35,1.75438596491);
  g.add_edge(n6,n36,0.684931506849);
  g.add_edge(n6,n37,1.31578947368);
  g.add_edge(n6,n39,0.869565217391);
  g.add_edge(n6,n43,3.125);
  g.add_edge(n6,n44,1.5625);
  g.add_edge(n6,n47,0.806451612903);
  g.add_edge(n6,n48,1.69491525424);
  g.add_edge(n6,n50,0.884955752212);
  g.add_edge(n6,n53,1.3698630137);
  g.add_edge(n6,n54,0.434782608696);
  g.add_edge(n6,n61,1.69491525424);
  g.add_edge(n6,n64,0.403225806452);
  g.add_edge(n6,n66,1.06382978723);
  g.add_edge(n6,n68,0.943396226415);
  g.add_edge(n6,n71,0.892857142857);
  g.add_edge(n6,n73,1.16279069767);
  g.add_edge(n6,n75,0.840336134454);
  g.add_edge(n6,n77,1.21951219512);
  g.add_edge(n6,n79,0.961538461538);
  g.add_edge(n6,n81,1.35135135135);
  g.add_edge(n6,n91,1.12359550562);
  g.add_edge(n6,n93,0.877192982456);
  g.add_edge(n6,n94,0.900900900901);
  g.add_edge(n6,n95,1.03092783505);
  g.add_edge(n6,n102,1.16279069767);
  g.add_edge(n7,n9,1.26582278481);
  g.add_edge(n7,n10,0.602409638554);
  g.add_edge(n7,n12,1.75438596491);
  g.add_edge(n7,n13,2.0);
  g.add_edge(n7,n20,0.847457627119);
  g.add_edge(n7,n24,1.49253731343);
  g.add_edge(n7,n26,1.28205128205);
  g.add_edge(n7,n28,1.72413793103);
  g.add_edge(n7,n30,1.53846153846);
  g.add_edge(n7,n31,0.404858299595);
  g.add_edge(n7,n32,25.0);
  g.add_edge(n7,n35,1.92307692308);
  g.add_edge(n7,n37,1.47058823529);
  g.add_edge(n7,n43,3.125);
  g.add_edge(n7,n44,1.78571428571);
  g.add_edge(n7,n47,0.869565217391);
  g.add_edge(n7,n50,0.877192982456);
  g.add_edge(n7,n53,1.51515151515);
  g.add_edge(n7,n54,0.444444444444);
  g.add_edge(n7,n61,1.81818181818);
  g.add_edge(n7,n64,0.409836065574);
  g.add_edge(n7,n68,0.961538461538);
  g.add_edge(n7,n71,0.909090909091);
  g.add_edge(n7,n75,0.900900900901);
  g.add_edge(n7,n77,1.25);
  g.add_edge(n7,n79,1.0);
  g.add_edge(n7,n91,1.21951219512);
  g.add_edge(n7,n93,0.909090909091);
  g.add_edge(n7,n94,0.892857142857);
  g.add_edge(n7,n95,1.0752688172);
  g.add_edge(n7,n102,1.25);
  g.add_edge(n8,n2,0.980392156863);
  g.add_edge(n8,n9,1.44927536232);
  g.add_edge(n8,n10,0.625);
  g.add_edge(n8,n11,1.33333333333);
  g.add_edge(n8,n12,2.0);
  g.add_edge(n8,n13,2.04081632653);
  g.add_edge(n8,n15,0.961538461538);
  g.add_edge(n8,n17,1.75438596491);
  g.add_edge(n8,n20,0.900900900901);
  g.add_edge(n8,n23,0.549450549451);
  g.add_edge(n8,n24,1.6393442623);
  g.add_edge(n8,n25,1.11111111111);
  g.add_edge(n8,n26,1.49253731343);
  g.add_edge(n8,n28,2.0);
  g.add_edge(n8,n29,1.78571428571);
  g.add_edge(n8,n30,1.81818181818);
  g.add_edge(n8,n31,0.411522633745);
  g.add_edge(n8,n32,25.0);
  g.add_edge(n8,n35,2.22222222222);
  g.add_edge(n8,n36,0.719424460432);
  g.add_edge(n8,n37,1.66666666667);
  g.add_edge(n8,n38,2.0);
  g.add_edge(n8,n39,0.980392156863);
  g.add_edge(n8,n41,2.5641025641);
  g.add_edge(n8,n43,3.0303030303);
  g.add_edge(n8,n44,2.04081632653);
  g.add_edge(n8,n46,0.413223140496);
  g.add_edge(n8,n47,0.900900900901);
  g.add_edge(n8,n48,2.27272727273);
  g.add_edge(n8,n50,0.869565217391);
  g.add_edge(n8,n51,1.19047619048);
  g.add_edge(n8,n53,1.69491525424);
  g.add_edge(n8,n54,0.462962962963);
  g.add_edge(n8,n61,2.04081632653);
  g.add_edge(n8,n64,0.42735042735);
  g.add_edge(n8,n66,1.28205128205);
  g.add_edge(n8,n68,1.0989010989);
  g.add_edge(n8,n70,0.404858299595);
  g.add_edge(n8,n71,1.04166666667);
  g.add_edge(n8,n73,1.42857142857);
  g.add_edge(n8,n75,0.990099009901);
  g.add_edge(n8,n77,1.44927536232);
  g.add_edge(n8,n79,1.13636363636);
  g.add_edge(n8,n81,1.69491525424);
  g.add_edge(n8,n84,0.409836065574);
  g.add_edge(n8,n90,1.03092783505);
  g.add_edge(n8,n91,1.26582278481);
  g.add_edge(n8,n93,1.0);
  g.add_edge(n8,n94,1.0101010101);
  g.add_edge(n8,n95,1.20481927711);
  g.add_edge(n8,n97,0.406504065041);
  g.add_edge(n8,n102,1.40845070423);
  g.add_edge(n9,n3,1.12359550562);
  g.add_edge(n9,n10,0.632911392405);
  g.add_edge(n9,n12,0.448430493274);
  g.add_edge(n9,n22,1.40845070423);
  g.add_edge(n9,n24,0.454545454545);
  g.add_edge(n9,n28,0.452488687783);
  g.add_edge(n9,n34,1.31578947368);
  g.add_edge(n9,n37,0.42735042735);
  g.add_edge(n9,n44,0.416666666667);
  g.add_edge(n9,n49,1.3698630137);
  g.add_edge(n9,n52,1.28205128205);
  g.add_edge(n9,n56,1.2987012987);
  g.add_edge(n9,n61,0.414937759336);
  g.add_edge(n9,n62,1.3698630137);
  g.add_edge(n9,n63,1.31578947368);
  g.add_edge(n9,n64,0.847457627119);
  g.add_edge(n9,n65,1.25);
  g.add_edge(n9,n74,1.33333333333);
  g.add_edge(n9,n75,0.425531914894);
  g.add_edge(n9,n77,0.434782608696);
  g.add_edge(n9,n80,1.26582278481);
  g.add_edge(n9,n83,1.21951219512);
  g.add_edge(n9,n85,1.3698630137);
  g.add_edge(n9,n87,1.38888888889);
  g.add_edge(n9,n89,1.08695652174);
  g.add_edge(n9,n92,1.11111111111);
  g.add_edge(n9,n94,0.429184549356);
  g.add_edge(n9,n98,1.19047619048);
  g.add_edge(n9,n99,1.31578947368);
  g.add_edge(n9,n102,0.42194092827);
  g.add_edge(n10,n3,0.595238095238);
  g.add_edge(n10,n12,0.740740740741);
  g.add_edge(n10,n22,0.595238095238);
  g.add_edge(n10,n24,0.625);
  g.add_edge(n10,n28,0.694444444444);
  g.add_edge(n10,n30,0.653594771242);
  g.add_edge(n10,n34,0.602409638554);
  g.add_edge(n10,n37,0.675675675676);
  g.add_edge(n10,n44,0.666666666667);
  g.add_edge(n10,n49,0.613496932515);
  g.add_edge(n10,n52,0.578034682081);
  g.add_edge(n10,n56,0.581395348837);
  g.add_edge(n10,n61,0.724637681159);
  g.add_edge(n10,n62,0.59880239521);
  g.add_edge(n10,n63,0.591715976331);
  g.add_edge(n10,n64,0.510204081633);
  g.add_edge(n10,n65,0.595238095238);
  g.add_edge(n10,n74,0.595238095238);
  g.add_edge(n10,n75,0.549450549451);
  g.add_edge(n10,n77,0.645161290323);
  g.add_edge(n10,n80,0.558659217877);
  g.add_edge(n10,n83,0.584795321637);
  g.add_edge(n10,n85,0.621118012422);
  g.add_edge(n10,n87,0.606060606061);
  g.add_edge(n10,n89,0.546448087432);
  g.add_edge(n10,n92,0.568181818182);
  g.add_edge(n10,n94,0.555555555556);
  g.add_edge(n10,n95,0.578034682081);
  g.add_edge(n10,n98,0.574712643678);
  g.add_edge(n10,n99,0.552486187845);
  g.add_edge(n10,n102,0.59880239521);
  g.add_edge(n11,n1,1.05263157895);
  g.add_edge(n11,n2,0.460829493088);
  g.add_edge(n11,n3,1.04166666667);
  g.add_edge(n11,n5,1.21951219512);
  g.add_edge(n11,n6,1.08695652174);
  g.add_edge(n11,n7,1.19047619048);
  g.add_edge(n11,n9,0.414937759336);
  g.add_edge(n11,n10,0.591715976331);
  g.add_edge(n11,n12,0.440528634361);
  g.add_edge(n11,n13,0.440528634361);
  g.add_edge(n11,n15,0.409836065574);
  g.add_edge(n11,n17,0.411522633745);
  g.add_edge(n11,n18,1.12359550562);
  g.add_edge(n11,n20,0.473933649289);
  g.add_edge(n11,n21,1.0752688172);
  g.add_edge(n11,n22,1.19047619048);
  g.add_edge(n11,n23,0.568181818182);
  g.add_edge(n11,n24,0.448430493274);
  g.add_edge(n11,n26,0.401606425703);
  g.add_edge(n11,n28,0.452488687783);
  g.add_edge(n11,n29,0.414937759336);
  g.add_edge(n11,n30,0.406504065041);
  g.add_edge(n11,n31,0.943396226415);
  g.add_edge(n11,n33,1.17647058824);
  g.add_edge(n11,n34,1.17647058824);
  g.add_edge(n11,n35,0.473933649289);
  g.add_edge(n11,n36,2.12765957447);
  g.add_edge(n11,n37,0.414937759336);
  g.add_edge(n11,n38,0.456621004566);
  g.add_edge(n11,n39,0.454545454545);
  g.add_edge(n11,n42,1.21951219512);
  g.add_edge(n11,n43,14.2857142857);
  g.add_edge(n11,n44,0.404858299595);
  g.add_edge(n11,n45,1.12359550562);
  g.add_edge(n11,n46,0.990099009901);
  g.add_edge(n11,n47,0.523560209424);
  g.add_edge(n11,n48,0.45045045045);
  g.add_edge(n11,n49,1.17647058824);
  g.add_edge(n11,n50,3.125);
  g.add_edge(n11,n52,1.14942528736);
  g.add_edge(n11,n53,0.414937759336);
  g.add_edge(n11,n54,0.729927007299);
  g.add_edge(n11,n55,1.14942528736);
  g.add_edge(n11,n56,1.16279069767);
  g.add_edge(n11,n58,1.05263157895);
  g.add_edge(n11,n60,1.17647058824);
  g.add_edge(n11,n61,0.420168067227);
  g.add_edge(n11,n62,1.19047619048);
  g.add_edge(n11,n63,1.16279069767);
  g.add_edge(n11,n64,0.806451612903);
  g.add_edge(n11,n65,1.17647058824);
  g.add_edge(n11,n67,1.0101010101);
  g.add_edge(n11,n68,0.406504065041);
  g.add_edge(n11,n70,1.05263157895);
  g.add_edge(n11,n71,0.429184549356);
  g.add_edge(n11,n74,1.17647058824);
  g.add_edge(n11,n75,0.406504065041);
  g.add_edge(n11,n77,0.42735042735);
  g.add_edge(n11,n79,0.408163265306);
  g.add_edge(n11,n80,1.0989010989);
  g.add_edge(n11,n81,0.406504065041);
  g.add_edge(n11,n83,1.12359550562);
  g.add_edge(n11,n84,0.862068965517);
  g.add_edge(n11,n85,1.28205128205);
  g.add_edge(n11,n86,1.11111111111);
  g.add_edge(n11,n87,1.23456790123);
  g.add_edge(n11,n88,1.19047619048);
  g.add_edge(n11,n89,1.0101010101);
  g.add_edge(n11,n90,0.420168067227);
  g.add_edge(n11,n91,0.434782608696);
  g.add_edge(n11,n92,1.04166666667);
  g.add_edge(n11,n93,0.444444444444);
  g.add_edge(n11,n94,0.416666666667);
  g.add_edge(n11,n96,1.20481927711);
  g.add_edge(n11,n97,0.877192982456);
  g.add_edge(n11,n98,1.0752688172);
  g.add_edge(n11,n99,1.14942528736);
  g.add_edge(n11,n101,1.0989010989);
  g.add_edge(n12,n3,1.47058823529);
  g.add_edge(n12,n22,1.75438596491);
  g.add_edge(n12,n24,0.42194092827);
  g.add_edge(n12,n28,0.448430493274);
  g.add_edge(n12,n30,0.413223140496);
  g.add_edge(n12,n37,0.431034482759);
  g.add_edge(n12,n49,1.78571428571);
  g.add_edge(n12,n52,1.66666666667);
  g.add_edge(n12,n56,1.72413793103);
  g.add_edge(n12,n61,0.409836065574);
  g.add_edge(n12,n62,1.75438596491);
  g.add_edge(n12,n64,1.05263157895);
  g.add_edge(n12,n65,1.69491525424);
  g.add_edge(n12,n74,1.85185185185);
  g.add_edge(n12,n75,0.469483568075);
  g.add_edge(n12,n77,0.440528634361);
  g.add_edge(n12,n80,1.44927536232);
  g.add_edge(n12,n85,1.72413793103);
  g.add_edge(n12,n87,1.88679245283);
  g.add_edge(n12,n89,1.23456790123);
  g.add_edge(n12,n92,1.42857142857);
  g.add_edge(n12,n94,0.49504950495);
  g.add_edge(n12,n95,0.434782608696);
  g.add_edge(n12,n98,1.53846153846);
  g.add_edge(n12,n99,1.47058823529);
  g.add_edge(n12,n102,0.414937759336);
  g.add_edge(n13,n3,1.61290322581);
  g.add_edge(n13,n9,0.436681222707);
  g.add_edge(n13,n10,0.735294117647);
  g.add_edge(n13,n20,0.546448087432);
  g.add_edge(n13,n22,1.81818181818);
  g.add_edge(n13,n24,0.409836065574);
  g.add_edge(n13,n26,0.418410041841);
  g.add_edge(n13,n28,0.45045045045);
  g.add_edge(n13,n31,1.42857142857);
  g.add_edge(n13,n34,1.85185185185);
  g.add_edge(n13,n37,0.416666666667);
  g.add_edge(n13,n49,1.88679245283);
  g.add_edge(n13,n50,5.55555555556);
  g.add_edge(n13,n52,1.72413793103);
  g.add_edge(n13,n54,0.980392156863);
  g.add_edge(n13,n55,1.81818181818);
  g.add_edge(n13,n56,1.85185185185);
  g.add_edge(n13,n60,1.92307692308);
  g.add_edge(n13,n62,1.75438596491);
  g.add_edge(n13,n63,1.85185185185);
  g.add_edge(n13,n64,1.11111111111);
  g.add_edge(n13,n65,1.81818181818);
  g.add_edge(n13,n74,1.96078431373);
  g.add_edge(n13,n75,0.469483568075);
  g.add_edge(n13,n77,0.440528634361);
  g.add_edge(n13,n80,1.53846153846);
  g.add_edge(n13,n83,1.72413793103);
  g.add_edge(n13,n85,1.69491525424);
  g.add_edge(n13,n87,1.96078431373);
  g.add_edge(n13,n88,1.81818181818);
  g.add_edge(n13,n89,1.3698630137);
  g.add_edge(n13,n92,1.5625);
  g.add_edge(n13,n94,0.487804878049);
  g.add_edge(n13,n95,0.431034482759);
  g.add_edge(n13,n96,1.5625);
  g.add_edge(n13,n98,1.66666666667);
  g.add_edge(n13,n99,1.5873015873);
  g.add_edge(n13,n102,0.414937759336);
  g.add_edge(n14,n2,0.869565217391);
  g.add_edge(n14,n9,1.31578947368);
  g.add_edge(n14,n10,0.581395348837);
  g.add_edge(n14,n11,1.16279069767);
  g.add_edge(n14,n12,1.75438596491);
  g.add_edge(n14,n13,1.88679245283);
  g.add_edge(n14,n15,0.877192982456);
  g.add_edge(n14,n17,1.5625);
  g.add_edge(n14,n20,0.819672131148);
  g.add_edge(n14,n23,0.510204081633);
  g.add_edge(n14,n24,1.40845070423);
  g.add_edge(n14,n25,1.0);
  g.add_edge(n14,n26,1.33333333333);
  g.add_edge(n14,n28,1.85185185185);
  g.add_edge(n14,n29,1.5873015873);
  g.add_edge(n14,n30,1.61290322581);
  g.add_edge(n14,n32,25.0);
  g.add_edge(n14,n35,2.0);
  g.add_edge(n14,n36,0.675675675676);
  g.add_edge(n14,n37,1.49253731343);
  g.add_edge(n14,n38,1.75438596491);
  g.add_edge(n14,n39,0.917431192661);
  g.add_edge(n14,n41,2.5641025641);
  g.add_edge(n14,n43,3.0303030303);
  g.add_edge(n14,n44,1.81818181818);
  g.add_edge(n14,n47,0.826446280992);
  g.add_edge(n14,n48,1.96078431373);
  g.add_edge(n14,n50,0.854700854701);
  g.add_edge(n14,n53,1.51515151515);
  g.add_edge(n14,n54,0.434782608696);
  g.add_edge(n14,n61,1.85185185185);
  g.add_edge(n14,n64,0.406504065041);
  g.add_edge(n14,n66,1.14942528736);
  g.add_edge(n14,n68,0.990099009901);
  g.add_edge(n14,n71,0.934579439252);
  g.add_edge(n14,n73,1.2987012987);
  g.add_edge(n14,n75,0.909090909091);
  g.add_edge(n14,n77,1.33333333333);
  g.add_edge(n14,n79,1.03092783505);
  g.add_edge(n14,n81,1.49253731343);
  g.add_edge(n14,n90,0.934579439252);
  g.add_edge(n14,n91,1.19047619048);
  g.add_edge(n14,n93,0.900900900901);
  g.add_edge(n14,n94,0.925925925926);
  g.add_edge(n14,n95,1.11111111111);
  g.add_edge(n14,n102,1.25);
  g.add_edge(n15,n1,0.806451612903);
  g.add_edge(n15,n2,0.4329004329);
  g.add_edge(n15,n3,0.8);
  g.add_edge(n15,n5,0.884955752212);
  g.add_edge(n15,n7,0.869565217391);
  g.add_edge(n15,n9,0.444444444444);
  g.add_edge(n15,n10,0.526315789474);
  g.add_edge(n15,n12,0.487804878049);
  g.add_edge(n15,n13,0.48309178744);
  g.add_edge(n15,n17,0.431034482759);
  g.add_edge(n15,n18,0.847457627119);
  g.add_edge(n15,n20,0.434782608696);
  g.add_edge(n15,n21,0.819672131148);
  g.add_edge(n15,n22,0.869565217391);
  g.add_edge(n15,n24,0.460829493088);
  g.add_edge(n15,n26,0.420168067227);
  g.add_edge(n15,n28,0.497512437811);
  g.add_edge(n15,n29,0.448430493274);
  g.add_edge(n15,n30,0.436681222707);
  g.add_edge(n15,n31,0.746268656716);
  g.add_edge(n15,n32,50.0);
  g.add_edge(n15,n33,0.877192982456);
  g.add_edge(n15,n34,0.892857142857);
  g.add_edge(n15,n35,0.520833333333);
  g.add_edge(n15,n36,1.53846153846);
  g.add_edge(n15,n37,0.438596491228);
  g.add_edge(n15,n39,0.414937759336);
  g.add_edge(n15,n42,0.884955752212);
  g.add_edge(n15,n43,10.0);
  g.add_edge(n15,n44,0.448430493274);
  g.add_edge(n15,n45,0.847457627119);
  g.add_edge(n15,n46,0.78125);
  g.add_edge(n15,n47,0.492610837438);
  g.add_edge(n15,n48,0.497512437811);
  g.add_edge(n15,n49,0.892857142857);
  g.add_edge(n15,n50,2.38095238095);
  g.add_edge(n15,n52,0.862068965517);
  g.add_edge(n15,n53,0.454545454545);
  g.add_edge(n15,n54,0.609756097561);
  g.add_edge(n15,n55,0.854700854701);
  g.add_edge(n15,n56,0.869565217391);
  g.add_edge(n15,n58,0.8);
  g.add_edge(n15,n60,0.877192982456);
  g.add_edge(n15,n61,0.456621004566);
  g.add_edge(n15,n62,0.869565217391);
  g.add_edge(n15,n63,0.854700854701);
  g.add_edge(n15,n64,0.653594771242);
  g.add_edge(n15,n65,0.862068965517);
  g.add_edge(n15,n66,0.411522633745);
  g.add_edge(n15,n67,0.769230769231);
  g.add_edge(n15,n70,0.8);
  g.add_edge(n15,n71,0.420168067227);
  g.add_edge(n15,n73,0.423728813559);
  g.add_edge(n15,n74,0.877192982456);
  g.add_edge(n15,n75,0.404858299595);
  g.add_edge(n15,n77,0.452488687783);
  g.add_edge(n15,n79,0.425531914894);
  g.add_edge(n15,n80,0.862068965517);
  g.add_edge(n15,n81,0.431034482759);
  g.add_edge(n15,n83,0.826446280992);
  g.add_edge(n15,n84,0.680272108844);
  g.add_edge(n15,n85,0.900900900901);
  g.add_edge(n15,n86,0.840336134454);
  g.add_edge(n15,n87,0.909090909091);
  g.add_edge(n15,n88,0.892857142857);
  g.add_edge(n15,n89,0.806451612903);
  g.add_edge(n15,n91,0.442477876106);
  g.add_edge(n15,n92,0.78125);
  g.add_edge(n15,n93,0.434782608696);
  g.add_edge(n15,n94,0.413223140496);
  g.add_edge(n15,n95,0.404858299595);
  g.add_edge(n15,n96,0.909090909091);
  g.add_edge(n15,n97,0.689655172414);
  g.add_edge(n15,n98,0.826446280992);
  g.add_edge(n15,n99,0.877192982456);
  g.add_edge(n15,n101,0.833333333333);
  g.add_edge(n15,n102,0.434782608696);
  g.add_edge(n16,n2,0.826446280992);
  g.add_edge(n16,n9,1.20481927711);
  g.add_edge(n16,n10,0.588235294118);
  g.add_edge(n16,n11,1.06382978723);
  g.add_edge(n16,n12,1.49253731343);
  g.add_edge(n16,n13,1.5873015873);
  g.add_edge(n16,n15,0.813008130081);
  g.add_edge(n16,n17,1.40845070423);
  g.add_edge(n16,n20,0.78125);
  g.add_edge(n16,n23,0.507614213198);
  g.add_edge(n16,n24,1.28205128205);
  g.add_edge(n16,n25,0.934579439252);
  g.add_edge(n16,n26,1.17647058824);
  g.add_edge(n16,n28,1.6393442623);
  g.add_edge(n16,n29,1.40845070423);
  g.add_edge(n16,n30,1.40845070423);
  g.add_edge(n16,n32,25.0);
  g.add_edge(n16,n35,1.69491525424);
  g.add_edge(n16,n36,0.689655172414);
  g.add_edge(n16,n37,1.31578947368);
  g.add_edge(n16,n38,1.49253731343);
  g.add_edge(n16,n39,0.884955752212);
  g.add_edge(n16,n41,2.5);
  g.add_edge(n16,n43,3.0303030303);
  g.add_edge(n16,n44,1.5625);
  g.add_edge(n16,n47,0.8);
  g.add_edge(n16,n48,1.66666666667);
  g.add_edge(n16,n50,0.892857142857);
  g.add_edge(n16,n53,1.31578947368);
  g.add_edge(n16,n54,0.4329004329);
  g.add_edge(n16,n61,1.61290322581);
  g.add_edge(n16,n64,0.403225806452);
  g.add_edge(n16,n66,1.08695652174);
  g.add_edge(n16,n68,0.925925925926);
  g.add_edge(n16,n71,0.877192982456);
  g.add_edge(n16,n73,1.19047619048);
  g.add_edge(n16,n75,0.854700854701);
  g.add_edge(n16,n77,1.21951219512);
  g.add_edge(n16,n79,0.980392156863);
  g.add_edge(n16,n81,1.31578947368);
  g.add_edge(n16,n90,0.877192982456);
  g.add_edge(n16,n91,1.0989010989);
  g.add_edge(n16,n93,0.862068965517);
  g.add_edge(n16,n94,0.869565217391);
  g.add_edge(n16,n95,1.03092783505);
  g.add_edge(n16,n102,1.16279069767);
  g.add_edge(n17,n1,1.3698630137);
  g.add_edge(n17,n2,0.487804878049);
  g.add_edge(n17,n3,1.31578947368);
  g.add_edge(n17,n5,1.49253731343);
  g.add_edge(n17,n7,1.47058823529);
  g.add_edge(n17,n10,0.680272108844);
  g.add_edge(n17,n12,0.425531914894);
  g.add_edge(n17,n13,0.401606425703);
  g.add_edge(n17,n18,1.51515151515);
  g.add_edge(n17,n20,0.507614213198);
  g.add_edge(n17,n21,1.38888888889);
  g.add_edge(n17,n22,1.6393442623);
  g.add_edge(n17,n24,0.4329004329);
  g.add_edge(n17,n28,0.425531914894);
  g.add_edge(n17,n31,1.21951219512);
  g.add_edge(n17,n32,50.0);
  g.add_edge(n17,n33,1.51515151515);
  g.add_edge(n17,n34,1.5873015873);
  g.add_edge(n17,n35,0.440528634361);
  g.add_edge(n17,n39,0.487804878049);
  g.add_edge(n17,n42,1.53846153846);
  g.add_edge(n17,n43,11.1111111111);
  g.add_edge(n17,n45,1.47058823529);
  g.add_edge(n17,n46,1.19047619048);
  g.add_edge(n17,n47,0.546448087432);
  g.add_edge(n17,n49,1.5873015873);
  g.add_edge(n17,n50,6.25);
  g.add_edge(n17,n52,1.51515151515);
  g.add_edge(n17,n53,0.401606425703);
  g.add_edge(n17,n54,0.877192982456);
  g.add_edge(n17,n55,1.49253731343);
  g.add_edge(n17,n56,1.53846153846);
  g.add_edge(n17,n58,1.31578947368);
  g.add_edge(n17,n60,1.5625);
  g.add_edge(n17,n62,1.5873015873);
  g.add_edge(n17,n63,1.5625);
  g.add_edge(n17,n64,0.934579439252);
  g.add_edge(n17,n65,1.47058823529);
  g.add_edge(n17,n67,1.25);
  g.add_edge(n17,n68,0.414937759336);
  g.add_edge(n17,n70,1.26582278481);
  g.add_edge(n17,n71,0.440528634361);
  g.add_edge(n17,n74,1.5625);
  g.add_edge(n17,n75,0.425531914894);
  g.add_edge(n17,n79,0.416666666667);
  g.add_edge(n17,n80,1.53846153846);
  g.add_edge(n17,n83,1.40845070423);
  g.add_edge(n17,n85,1.53846153846);
  g.add_edge(n17,n87,1.72413793103);
  g.add_edge(n17,n88,1.5873015873);
  g.add_edge(n17,n89,1.28205128205);
  g.add_edge(n17,n91,0.423728813559);
  g.add_edge(n17,n92,1.26582278481);
  g.add_edge(n17,n93,0.480769230769);
  g.add_edge(n17,n94,0.4329004329);
  g.add_edge(n17,n96,1.5625);
  g.add_edge(n17,n97,1.03092783505);
  g.add_edge(n17,n98,1.3698630137);
  g.add_edge(n17,n99,1.5625);
  g.add_edge(n17,n101,1.44927536232);
  g.add_edge(n17,n102,0.411522633745);
  g.add_edge(n18,n2,0.869565217391);
  g.add_edge(n18,n9,1.28205128205);
  g.add_edge(n18,n10,0.584795321637);
  g.add_edge(n18,n12,1.6393442623);
  g.add_edge(n18,n13,1.75438596491);
  g.add_edge(n18,n20,0.806451612903);
  g.add_edge(n18,n24,1.40845070423);
  g.add_edge(n18,n26,1.26582278481);
  g.add_edge(n18,n28,1.78571428571);
  g.add_edge(n18,n30,1.51515151515);
  g.add_edge(n18,n32,25.0);
  g.add_edge(n18,n35,1.92307692308);
  g.add_edge(n18,n37,1.40845070423);
  g.add_edge(n18,n39,0.900900900901);
  g.add_edge(n18,n43,3.125);
  g.add_edge(n18,n44,1.69491525424);
  g.add_edge(n18,n47,0.813008130081);
  g.add_edge(n18,n50,0.862068965517);
  g.add_edge(n18,n53,1.42857142857);
  g.add_edge(n18,n54,0.42735042735);
  g.add_edge(n18,n61,1.78571428571);
  g.add_edge(n18,n64,0.406504065041);
  g.add_edge(n18,n66,1.12359550562);
  g.add_edge(n18,n68,0.970873786408);
  g.add_edge(n18,n71,0.917431192661);
  g.add_edge(n18,n73,1.23456790123);
  g.add_edge(n18,n75,0.877192982456);
  g.add_edge(n18,n77,1.2987012987);
  g.add_edge(n18,n79,1.0101010101);
  g.add_edge(n18,n91,1.13636363636);
  g.add_edge(n18,n93,0.884955752212);
  g.add_edge(n18,n94,0.909090909091);
  g.add_edge(n18,n95,1.08695652174);
  g.add_edge(n18,n102,1.20481927711);
  g.add_edge(n19,n2,0.819672131148);
  g.add_edge(n19,n9,1.13636363636);
  g.add_edge(n19,n10,0.558659217877);
  g.add_edge(n19,n11,1.05263157895);
  g.add_edge(n19,n12,1.49253731343);
  g.add_edge(n19,n13,1.6393442623);
  g.add_edge(n19,n15,0.793650793651);
  g.add_edge(n19,n17,1.31578947368);
  g.add_edge(n19,n20,0.763358778626);
  g.add_edge(n19,n23,0.485436893204);
  g.add_edge(n19,n24,1.28205128205);
  g.add_edge(n19,n25,0.925925925926);
  g.add_edge(n19,n26,1.17647058824);
  g.add_edge(n19,n28,1.5625);
  g.add_edge(n19,n29,1.3698630137);
  g.add_edge(n19,n30,1.38888888889);
  g.add_edge(n19,n32,25.0);
  g.add_edge(n19,n35,1.66666666667);
  g.add_edge(n19,n36,0.704225352113);
  g.add_edge(n19,n37,1.26582278481);
  g.add_edge(n19,n38,1.47058823529);
  g.add_edge(n19,n39,0.840336134454);
  g.add_edge(n19,n41,2.43902439024);
  g.add_edge(n19,n43,3.22580645161);
  g.add_edge(n19,n44,1.49253731343);
  g.add_edge(n19,n47,0.8);
  g.add_edge(n19,n48,1.61290322581);
  g.add_edge(n19,n50,0.862068965517);
  g.add_edge(n19,n51,0.970873786408);
  g.add_edge(n19,n53,1.31578947368);
  g.add_edge(n19,n54,0.423728813559);
  g.add_edge(n19,n61,1.5625);
  g.add_edge(n19,n66,1.0101010101);
  g.add_edge(n19,n68,0.900900900901);
  g.add_edge(n19,n69,0.943396226415);
  g.add_edge(n19,n71,0.869565217391);
  g.add_edge(n19,n72,1.53846153846);
  g.add_edge(n19,n73,1.12359550562);
  g.add_edge(n19,n75,0.819672131148);
  g.add_edge(n19,n77,1.14942528736);
  g.add_edge(n19,n79,0.917431192661);
  g.add_edge(n19,n81,1.2987012987);
  g.add_edge(n19,n82,1.03092783505);
  g.add_edge(n19,n90,0.869565217391);
  g.add_edge(n19,n91,1.08695652174);
  g.add_edge(n19,n93,0.840336134454);
  g.add_edge(n19,n94,0.877192982456);
  g.add_edge(n19,n95,0.980392156863);
  g.add_edge(n19,n102,1.12359550562);
  g.add_edge(n20,n3,0.77519379845);
  g.add_edge(n20,n9,0.526315789474);
  g.add_edge(n20,n10,0.531914893617);
  g.add_edge(n20,n12,0.540540540541);
  g.add_edge(n20,n22,0.833333333333);
  g.add_edge(n20,n24,0.502512562814);
  g.add_edge(n20,n26,0.5);
  g.add_edge(n20,n28,0.558659217877);
  g.add_edge(n20,n30,0.510204081633);
  g.add_edge(n20,n31,0.704225352113);
  g.add_edge(n20,n34,0.840336134454);
  g.add_edge(n20,n37,0.497512437811);
  g.add_edge(n20,n44,0.507614213198);
  g.add_edge(n20,n49,0.840336134454);
  g.add_edge(n20,n52,0.813008130081);
  g.add_edge(n20,n56,0.819672131148);
  g.add_edge(n20,n60,0.840336134454);
  g.add_edge(n20,n61,0.523560209424);
  g.add_edge(n20,n62,0.826446280992);
  g.add_edge(n20,n63,0.819672131148);
  g.add_edge(n20,n64,0.694444444444);
  g.add_edge(n20,n65,0.826446280992);
  g.add_edge(n20,n74,0.819672131148);
  g.add_edge(n20,n75,0.452488687783);
  g.add_edge(n20,n77,0.510204081633);
  g.add_edge(n20,n80,0.813008130081);
  g.add_edge(n20,n83,0.8);
  g.add_edge(n20,n85,0.917431192661);
  g.add_edge(n20,n87,0.862068965517);
  g.add_edge(n20,n88,0.826446280992);
  g.add_edge(n20,n89,0.751879699248);
  g.add_edge(n20,n92,0.751879699248);
  g.add_edge(n20,n94,0.460829493088);
  g.add_edge(n20,n95,0.473933649289);
  g.add_edge(n20,n96,0.869565217391);
  g.add_edge(n20,n98,0.787401574803);
  g.add_edge(n20,n99,0.854700854701);
  g.add_edge(n20,n102,0.478468899522);
  g.add_edge(n21,n9,1.19047619048);
  g.add_edge(n21,n10,0.568181818182);
  g.add_edge(n21,n12,1.5625);
  g.add_edge(n21,n13,1.66666666667);
  g.add_edge(n21,n20,0.77519379845);
  g.add_edge(n21,n24,1.2987012987);
  g.add_edge(n21,n26,1.20481927711);
  g.add_edge(n21,n28,1.6393442623);
  g.add_edge(n21,n30,1.42857142857);
  g.add_edge(n21,n32,25.0);
  g.add_edge(n21,n35,1.75438596491);
  g.add_edge(n21,n37,1.33333333333);
  g.add_edge(n21,n43,3.33333333333);
  g.add_edge(n21,n44,1.5873015873);
  g.add_edge(n21,n47,0.819672131148);
  g.add_edge(n21,n50,0.869565217391);
  g.add_edge(n21,n53,1.33333333333);
  g.add_edge(n21,n54,0.425531914894);
  g.add_edge(n21,n61,1.61290322581);
  g.add_edge(n21,n64,0.401606425703);
  g.add_edge(n21,n68,0.917431192661);
  g.add_edge(n21,n71,0.884955752212);
  g.add_edge(n21,n75,0.847457627119);
  g.add_edge(n21,n77,1.20481927711);
  g.add_edge(n21,n79,0.952380952381);
  g.add_edge(n21,n91,1.11111111111);
  g.add_edge(n21,n94,0.892857142857);
  g.add_edge(n21,n95,1.02040816327);
  g.add_edge(n21,n102,1.13636363636);
  g.add_edge(n22,n24,1.44927536232);
  g.add_edge(n22,n28,1.96078431373);
  g.add_edge(n22,n30,1.6393442623);
  g.add_edge(n22,n37,1.49253731343);
  g.add_edge(n22,n44,1.78571428571);
  g.add_edge(n22,n61,1.88679245283);
  g.add_edge(n22,n77,1.35135135135);
  g.add_edge(n22,n94,0.961538461538);
  g.add_edge(n22,n95,1.14942528736);
  g.add_edge(n22,n102,1.23456790123);
  g.add_edge(n23,n1,0.487804878049);
  g.add_edge(n23,n2,0.526315789474);
  g.add_edge(n23,n3,0.529100529101);
  g.add_edge(n23,n5,0.523560209424);
  g.add_edge(n23,n6,0.49504950495);
  g.add_edge(n23,n7,0.520833333333);
  g.add_edge(n23,n9,0.609756097561);
  g.add_edge(n23,n10,0.418410041841);
  g.add_edge(n23,n12,0.729927007299);
  g.add_edge(n23,n13,0.714285714286);
  g.add_edge(n23,n15,0.487804878049);
  g.add_edge(n23,n17,0.636942675159);
  g.add_edge(n23,n18,0.505050505051);
  g.add_edge(n23,n20,0.49504950495);
  g.add_edge(n23,n21,0.492610837438);
  g.add_edge(n23,n22,0.518134715026);
  g.add_edge(n23,n24,0.653594771242);
  g.add_edge(n23,n26,0.609756097561);
  g.add_edge(n23,n28,0.709219858156);
  g.add_edge(n23,n29,0.662251655629);
  g.add_edge(n23,n30,0.653594771242);
  g.add_edge(n23,n31,0.485436893204);
  g.add_edge(n23,n32,25.0);
  g.add_edge(n23,n33,0.510204081633);
  g.add_edge(n23,n34,0.534759358289);
  g.add_edge(n23,n35,0.740740740741);
  g.add_edge(n23,n36,1.0);
  g.add_edge(n23,n37,0.617283950617);
  g.add_edge(n23,n39,0.537634408602);
  g.add_edge(n23,n42,0.520833333333);
  g.add_edge(n23,n43,4.54545454545);
  g.add_edge(n23,n44,0.666666666667);
  g.add_edge(n23,n45,0.5);
  g.add_edge(n23,n46,0.492610837438);
  g.add_edge(n23,n47,0.534759358289);
  g.add_edge(n23,n48,0.740740740741);
  g.add_edge(n23,n49,0.526315789474);
  g.add_edge(n23,n50,1.20481927711);
  g.add_edge(n23,n52,0.505050505051);
  g.add_edge(n23,n53,0.636942675159);
  g.add_edge(n23,n54,0.460829493088);
  g.add_edge(n23,n55,0.507614213198);
  g.add_edge(n23,n56,0.507614213198);
  g.add_edge(n23,n58,0.492610837438);
  g.add_edge(n23,n60,0.520833333333);
  g.add_edge(n23,n61,0.699300699301);
  g.add_edge(n23,n62,0.518134715026);
  g.add_edge(n23,n63,0.515463917526);
  g.add_edge(n23,n64,0.460829493088);
  g.add_edge(n23,n65,0.510204081633);
  g.add_edge(n23,n66,0.561797752809);
  g.add_edge(n23,n67,0.485436893204);
  g.add_edge(n23,n68,0.531914893617);
  g.add_edge(n23,n70,0.5);
  g.add_edge(n23,n71,0.526315789474);
  g.add_edge(n23,n73,0.595238095238);
  g.add_edge(n23,n74,0.518134715026);
  g.add_edge(n23,n75,0.512820512821);
  g.add_edge(n23,n77,0.613496932515);
  g.add_edge(n23,n79,0.549450549451);
  g.add_edge(n23,n80,0.505050505051);
  g.add_edge(n23,n81,0.649350649351);
  g.add_edge(n23,n83,0.505050505051);
  g.add_edge(n23,n84,0.460829493088);
  g.add_edge(n23,n85,0.546448087432);
  g.add_edge(n23,n86,0.502512562814);
  g.add_edge(n23,n87,0.529100529101);
  g.add_edge(n23,n88,0.515463917526);
  g.add_edge(n23,n89,0.505050505051);
  g.add_edge(n23,n91,0.578034682081);
  g.add_edge(n23,n92,0.497512437811);
  g.add_edge(n23,n93,0.515463917526);
  g.add_edge(n23,n94,0.526315789474);
  g.add_edge(n23,n95,0.552486187845);
  g.add_edge(n23,n96,0.529100529101);
  g.add_edge(n23,n97,0.460829493088);
  g.add_edge(n23,n98,0.5);
  g.add_edge(n23,n99,0.520833333333);
  g.add_edge(n23,n101,0.5);
  g.add_edge(n23,n102,0.588235294118);
  g.add_edge(n24,n28,0.45871559633);
  g.add_edge(n24,n37,0.440528634361);
  g.add_edge(n24,n44,0.406504065041);
  g.add_edge(n24,n52,1.40845070423);
  g.add_edge(n24,n56,1.40845070423);
  g.add_edge(n24,n62,1.44927536232);
  g.add_edge(n24,n65,1.38888888889);
  g.add_edge(n24,n74,1.47058823529);
  g.add_edge(n24,n77,0.452488687783);
  g.add_edge(n24,n80,1.28205128205);
  g.add_edge(n24,n85,1.44927536232);
  g.add_edge(n24,n87,1.5873015873);
  g.add_edge(n24,n89,1.06382978723);
  g.add_edge(n24,n92,1.21951219512);
  g.add_edge(n24,n94,0.480769230769);
  g.add_edge(n24,n95,0.438596491228);
  g.add_edge(n24,n98,1.33333333333);
  g.add_edge(n24,n99,1.26582278481);
  g.add_edge(n24,n102,0.425531914894);
  g.add_edge(n25,n1,0.934579439252);
  g.add_edge(n25,n2,0.471698113208);
  g.add_edge(n25,n3,0.909090909091);
  g.add_edge(n25,n5,0.970873786408);
  g.add_edge(n25,n6,0.952380952381);
  g.add_edge(n25,n7,0.961538461538);
  g.add_edge(n25,n9,0.442477876106);
  g.add_edge(n25,n10,0.568181818182);
  g.add_edge(n25,n11,0.429184549356);
  g.add_edge(n25,n12,0.49504950495);
  g.add_edge(n25,n13,0.497512437811);
  g.add_edge(n25,n15,0.42194092827);
  g.add_edge(n25,n17,0.4329004329);
  g.add_edge(n25,n18,0.980392156863);
  g.add_edge(n25,n20,0.48309178744);
  g.add_edge(n25,n21,0.943396226415);
  g.add_edge(n25,n22,1.05263157895);
  g.add_edge(n25,n23,0.546448087432);
  g.add_edge(n25,n24,0.490196078431);
  g.add_edge(n25,n26,0.423728813559);
  g.add_edge(n25,n28,0.490196078431);
  g.add_edge(n25,n29,0.460829493088);
  g.add_edge(n25,n30,0.442477876106);
  g.add_edge(n25,n31,0.862068965517);
  g.add_edge(n25,n33,0.980392156863);
  g.add_edge(n25,n34,1.03092783505);
  g.add_edge(n25,n35,0.526315789474);
  g.add_edge(n25,n36,1.78571428571);
  g.add_edge(n25,n37,0.448430493274);
  g.add_edge(n25,n38,0.47619047619);
  g.add_edge(n25,n39,0.47619047619);
  g.add_edge(n25,n41,1.72413793103);
  g.add_edge(n25,n42,0.990099009901);
  g.add_edge(n25,n43,12.5);
  g.add_edge(n25,n44,0.45871559633);
  g.add_edge(n25,n45,0.961538461538);
  g.add_edge(n25,n46,0.854700854701);
  g.add_edge(n25,n47,0.552486187845);
  g.add_edge(n25,n48,0.512820512821);
  g.add_edge(n25,n49,1.02040816327);
  g.add_edge(n25,n50,2.5641025641);
  g.add_edge(n25,n52,1.0);
  g.add_edge(n25,n53,0.446428571429);
  g.add_edge(n25,n54,0.684931506849);
  g.add_edge(n25,n55,0.970873786408);
  g.add_edge(n25,n56,0.990099009901);
  g.add_edge(n25,n58,0.909090909091);
  g.add_edge(n25,n60,1.0101010101);
  g.add_edge(n25,n61,0.467289719626);
  g.add_edge(n25,n62,1.05263157895);
  g.add_edge(n25,n63,1.0);
  g.add_edge(n25,n64,0.724637681159);
  g.add_edge(n25,n65,0.961538461538);
  g.add_edge(n25,n66,0.416666666667);
  g.add_edge(n25,n67,0.877192982456);
  g.add_edge(n25,n68,0.414937759336);
  g.add_edge(n25,n70,0.884955752212);
  g.add_edge(n25,n73,0.431034482759);
  g.add_edge(n25,n74,1.0101010101);
  g.add_edge(n25,n75,0.408163265306);
  g.add_edge(n25,n77,0.460829493088);
  g.add_edge(n25,n79,0.423728813559);
  g.add_edge(n25,n80,0.990099009901);
  g.add_edge(n25,n81,0.436681222707);
  g.add_edge(n25,n83,0.952380952381);
  g.add_edge(n25,n84,0.769230769231);
  g.add_edge(n25,n85,0.990099009901);
  g.add_edge(n25,n86,0.990099009901);
  g.add_edge(n25,n87,1.05263157895);
  g.add_edge(n25,n88,1.03092783505);
  g.add_edge(n25,n89,0.892857142857);
  g.add_edge(n25,n90,0.429184549356);
  g.add_edge(n25,n91,0.480769230769);
  g.add_edge(n25,n92,0.877192982456);
  g.add_edge(n25,n93,0.456621004566);
  g.add_edge(n25,n94,0.42194092827);
  g.add_edge(n25,n95,0.408163265306);
  g.add_edge(n25,n96,1.04166666667);
  g.add_edge(n25,n97,0.763358778626);
  g.add_edge(n25,n98,0.934579439252);
  g.add_edge(n25,n99,1.0);
  g.add_edge(n25,n101,0.952380952381);
  g.add_edge(n25,n102,0.434782608696);
  g.add_edge(n26,n3,1.13636363636);
  g.add_edge(n26,n9,0.413223140496);
  g.add_edge(n26,n10,0.609756097561);
  g.add_edge(n26,n12,0.42194092827);
  g.add_edge(n26,n22,1.35135135135);
  g.add_edge(n26,n24,0.431034482759);
  g.add_edge(n26,n28,0.434782608696);
  g.add_edge(n26,n34,1.3698630137);
  g.add_edge(n26,n37,0.409836065574);
  g.add_edge(n26,n49,1.31578947368);
  g.add_edge(n26,n52,1.33333333333);
  g.add_edge(n26,n56,1.31578947368);
  g.add_edge(n26,n60,1.35135135135);
  g.add_edge(n26,n62,1.35135135135);
  g.add_edge(n26,n63,1.33333333333);
  g.add_edge(n26,n64,0.862068965517);
  g.add_edge(n26,n65,1.26582278481);
  g.add_edge(n26,n74,1.35135135135);
  g.add_edge(n26,n75,0.411522633745);
  g.add_edge(n26,n77,0.416666666667);
  g.add_edge(n26,n80,1.16279069767);
  g.add_edge(n26,n83,1.23456790123);
  g.add_edge(n26,n85,1.35135135135);
  g.add_edge(n26,n87,1.38888888889);
  g.add_edge(n26,n88,1.33333333333);
  g.add_edge(n26,n89,1.03092783505);
  g.add_edge(n26,n92,1.0989010989);
  g.add_edge(n26,n94,0.414937759336);
  g.add_edge(n26,n96,1.25);
  g.add_edge(n26,n98,1.20481927711);
  g.add_edge(n26,n99,1.17647058824);
  g.add_edge(n26,n102,0.404858299595);
  g.add_edge(n27,n1,1.35135135135);
  g.add_edge(n27,n2,0.492610837438);
  g.add_edge(n27,n3,1.28205128205);
  g.add_edge(n27,n5,1.47058823529);
  g.add_edge(n27,n6,1.38888888889);
  g.add_edge(n27,n7,1.47058823529);
  g.add_edge(n27,n8,1.69491525424);
  g.add_edge(n27,n10,0.645161290323);
  g.add_edge(n27,n11,0.404858299595);
  g.add_edge(n27,n12,0.425531914894);
  g.add_edge(n27,n13,0.403225806452);
  g.add_edge(n27,n14,1.53846153846);
  g.add_edge(n27,n15,0.4329004329);
  g.add_edge(n27,n16,1.38888888889);
  g.add_edge(n27,n18,1.49253731343);
  g.add_edge(n27,n19,1.2987012987);
  g.add_edge(n27,n20,0.512820512821);
  g.add_edge(n27,n21,1.3698630137);
  g.add_edge(n27,n22,1.61290322581);
  g.add_edge(n27,n23,0.632911392405);
  g.add_edge(n27,n24,0.434782608696);
  g.add_edge(n27,n25,0.4329004329);
  g.add_edge(n27,n28,0.423728813559);
  g.add_edge(n27,n31,1.23456790123);
  g.add_edge(n27,n32,50.0);
  g.add_edge(n27,n33,1.49253731343);
  g.add_edge(n27,n34,1.5873015873);
  g.add_edge(n27,n35,0.436681222707);
  g.add_edge(n27,n36,2.5641025641);
  g.add_edge(n27,n38,0.42735042735);
  g.add_edge(n27,n39,0.478468899522);
  g.add_edge(n27,n40,1.0989010989);
  g.add_edge(n27,n41,2.0);
  g.add_edge(n27,n42,1.51515151515);
  g.add_edge(n27,n43,11.1111111111);
  g.add_edge(n27,n45,1.44927536232);
  g.add_edge(n27,n46,1.17647058824);
  g.add_edge(n27,n47,0.534759358289);
  g.add_edge(n27,n48,0.416666666667);
  g.add_edge(n27,n49,1.5625);
  g.add_edge(n27,n50,5.26315789474);
  g.add_edge(n27,n51,0.416666666667);
  g.add_edge(n27,n52,1.49253731343);
  g.add_edge(n27,n53,0.401606425703);
  g.add_edge(n27,n54,0.869565217391);
  g.add_edge(n27,n55,1.47058823529);
  g.add_edge(n27,n56,1.51515151515);
  g.add_edge(n27,n58,1.2987012987);
  g.add_edge(n27,n59,1.53846153846);
  g.add_edge(n27,n60,1.5625);
  g.add_edge(n27,n62,1.61290322581);
  g.add_edge(n27,n63,1.5873015873);
  g.add_edge(n27,n64,0.925925925926);
  g.add_edge(n27,n65,1.44927536232);
  g.add_edge(n27,n67,1.26582278481);
  g.add_edge(n27,n68,0.413223140496);
  g.add_edge(n27,n69,0.440528634361);
  g.add_edge(n27,n70,1.25);
  g.add_edge(n27,n71,0.444444444444);
  g.add_edge(n27,n72,25.0);
  g.add_edge(n27,n74,1.53846153846);
  g.add_edge(n27,n75,0.425531914894);
  g.add_edge(n27,n76,1.38888888889);
  g.add_edge(n27,n77,0.404858299595);
  g.add_edge(n27,n78,1.5873015873);
  g.add_edge(n27,n79,0.416666666667);
  g.add_edge(n27,n80,1.35135135135);
  g.add_edge(n27,n83,1.38888888889);
  g.add_edge(n27,n84,1.02040816327);
  g.add_edge(n27,n85,1.51515151515);
  g.add_edge(n27,n86,1.51515151515);
  g.add_edge(n27,n87,1.69491525424);
  g.add_edge(n27,n88,1.5625);
  g.add_edge(n27,n89,1.17647058824);
  g.add_edge(n27,n90,0.42735042735);
  g.add_edge(n27,n91,0.423728813559);
  g.add_edge(n27,n92,1.25);
  g.add_edge(n27,n93,0.467289719626);
  g.add_edge(n27,n94,0.431034482759);
  g.add_edge(n27,n96,1.3698630137);
  g.add_edge(n27,n97,1.02040816327);
  g.add_edge(n27,n98,1.35135135135);
  g.add_edge(n27,n99,1.3698630137);
  g.add_edge(n27,n100,1.21951219512);
  g.add_edge(n27,n101,1.42857142857);
  g.add_edge(n27,n102,0.411522633745);
  g.add_edge(n28,n62,2.08333333333);
  g.add_edge(n28,n87,2.0);
  g.add_edge(n28,n92,1.49253731343);
  g.add_edge(n28,n94,0.473933649289);
  g.add_edge(n28,n99,1.5625);
  g.add_edge(n29,n1,1.38888888889);
  g.add_edge(n29,n2,0.507614213198);
  g.add_edge(n29,n3,1.3698630137);
  g.add_edge(n29,n5,1.5625);
  g.add_edge(n29,n7,1.53846153846);
  g.add_edge(n29,n9,0.408163265306);
  g.add_edge(n29,n10,0.680272108844);
  g.add_edge(n29,n12,0.414937759336);
  g.add_edge(n29,n13,0.404858299595);
  g.add_edge(n29,n18,1.53846153846);
  g.add_edge(n29,n20,0.520833333333);
  g.add_edge(n29,n21,1.40845070423);
  g.add_edge(n29,n22,1.66666666667);
  g.add_edge(n29,n24,0.440528634361);
  g.add_edge(n29,n26,0.406504065041);
  g.add_edge(n29,n28,0.429184549356);
  g.add_edge(n29,n31,1.23456790123);
  g.add_edge(n29,n32,100.0);
  g.add_edge(n29,n33,1.53846153846);
  g.add_edge(n29,n34,1.5873015873);
  g.add_edge(n29,n35,0.45045045045);
  g.add_edge(n29,n39,0.5);
  g.add_edge(n29,n42,1.61290322581);
  g.add_edge(n29,n43,10.0);
  g.add_edge(n29,n45,1.49253731343);
  g.add_edge(n29,n46,1.23456790123);
  g.add_edge(n29,n47,0.537634408602);
  g.add_edge(n29,n48,0.416666666667);
  g.add_edge(n29,n49,1.6393442623);
  g.add_edge(n29,n50,6.25);
  g.add_edge(n29,n52,1.51515151515);
  g.add_edge(n29,n53,0.406504065041);
  g.add_edge(n29,n54,0.884955752212);
  g.add_edge(n29,n55,1.53846153846);
  g.add_edge(n29,n56,1.5625);
  g.add_edge(n29,n58,1.33333333333);
  g.add_edge(n29,n60,1.5873015873);
  g.add_edge(n29,n62,1.61290322581);
  g.add_edge(n29,n63,1.6393442623);
  g.add_edge(n29,n64,0.961538461538);
  g.add_edge(n29,n65,1.53846153846);
  g.add_edge(n29,n67,1.2987012987);
  g.add_edge(n29,n68,0.42735042735);
  g.add_edge(n29,n70,1.31578947368);
  g.add_edge(n29,n71,0.46511627907);
  g.add_edge(n29,n74,1.5625);
  g.add_edge(n29,n75,0.434782608696);
  g.add_edge(n29,n77,0.404858299595);
  g.add_edge(n29,n79,0.438596491228);
  g.add_edge(n29,n80,1.47058823529);
  g.add_edge(n29,n83,1.47058823529);
  g.add_edge(n29,n84,1.04166666667);
  g.add_edge(n29,n85,1.51515151515);
  g.add_edge(n29,n86,1.5625);
  g.add_edge(n29,n87,1.72413793103);
  g.add_edge(n29,n88,1.61290322581);
  g.add_edge(n29,n89,1.26582278481);
  g.add_edge(n29,n91,0.423728813559);
  g.add_edge(n29,n92,1.28205128205);
  g.add_edge(n29,n93,0.480769230769);
  g.add_edge(n29,n94,0.448430493274);
  g.add_edge(n29,n96,1.49253731343);
  g.add_edge(n29,n97,1.06382978723);
  g.add_edge(n29,n98,1.3698630137);
  g.add_edge(n29,n99,1.49253731343);
  g.add_edge(n29,n101,1.44927536232);
  g.add_edge(n29,n102,0.413223140496);
  g.add_edge(n30,n24,0.414937759336);
  g.add_edge(n30,n28,0.411522633745);
  g.add_edge(n30,n49,1.6393442623);
  g.add_edge(n30,n52,1.5873015873);
  g.add_edge(n30,n56,1.5873015873);
  g.add_edge(n30,n62,1.5873015873);
  g.add_edge(n30,n65,1.51515151515);
  g.add_edge(n30,n74,1.5873015873);
  g.add_edge(n30,n77,0.408163265306);
  g.add_edge(n30,n80,1.35135135135);
  g.add_edge(n30,n85,1.6393442623);
  g.add_edge(n30,n87,1.69491525424);
  g.add_edge(n30,n89,1.13636363636);
  g.add_edge(n30,n92,1.26582278481);
  g.add_edge(n30,n94,0.438596491228);
  g.add_edge(n30,n98,1.42857142857);
  g.add_edge(n30,n99,1.38888888889);
  g.add_edge(n31,n3,0.425531914894);
  g.add_edge(n31,n9,1.04166666667);
  g.add_edge(n31,n10,0.558659217877);
  g.add_edge(n31,n12,1.35135135135);
  g.add_edge(n31,n24,1.16279069767);
  g.add_edge(n31,n26,1.08695652174);
  g.add_edge(n31,n28,1.40845070423);
  g.add_edge(n31,n30,1.23456790123);
  g.add_edge(n31,n34,0.414937759336);
  g.add_edge(n31,n37,1.16279069767);
  g.add_edge(n31,n44,1.35135135135);
  g.add_edge(n31,n49,0.403225806452);
  g.add_edge(n31,n60,0.404858299595);
  g.add_edge(n31,n61,1.40845070423);
  g.add_edge(n31,n64,0.420168067227);
  g.add_edge(n31,n75,0.787401574803);
  g.add_edge(n31,n77,1.08695652174);
  g.add_edge(n31,n85,0.409836065574);
  g.add_edge(n31,n87,0.403225806452);
  g.add_edge(n31,n89,0.404858299595);
  g.add_edge(n31,n94,0.833333333333);
  g.add_edge(n31,n95,0.917431192661);
  g.add_edge(n31,n96,0.406504065041);
  g.add_edge(n31,n98,0.403225806452);
  g.add_edge(n31,n99,0.404858299595);
  g.add_edge(n31,n102,1.02040816327);
  g.add_edge(n32,n1,25.0);
  g.add_edge(n32,n3,25.0);
  g.add_edge(n32,n5,25.0);
  g.add_edge(n32,n9,50.0);
  g.add_edge(n32,n10,25.0);
  g.add_edge(n32,n20,33.3333333333);
  g.add_edge(n32,n22,25.0);
  g.add_edge(n32,n26,50.0);
  g.add_edge(n32,n28,50.0);
  g.add_edge(n32,n30,50.0);
  g.add_edge(n32,n31,25.0);
  g.add_edge(n32,n34,50.0);
  g.add_edge(n32,n43,25.0);
  g.add_edge(n32,n47,50.0);
  g.add_edge(n32,n49,25.0);
  g.add_edge(n32,n52,25.0);
  g.add_edge(n32,n54,25.0);
  g.add_edge(n32,n55,25.0);
  g.add_edge(n32,n56,25.0);
  g.add_edge(n32,n60,25.0);
  g.add_edge(n32,n61,100.0);
  g.add_edge(n32,n62,25.0);
  g.add_edge(n32,n63,25.0);
  g.add_edge(n32,n64,25.0);
  g.add_edge(n32,n65,25.0);
  g.add_edge(n32,n67,50.0);
  g.add_edge(n32,n70,33.3333333333);
  g.add_edge(n32,n74,25.0);
  g.add_edge(n32,n75,50.0);
  g.add_edge(n32,n77,50.0);
  g.add_edge(n32,n80,25.0);
  g.add_edge(n32,n83,25.0);
  g.add_edge(n32,n85,100.0);
  g.add_edge(n32,n87,25.0);
  g.add_edge(n32,n88,25.0);
  g.add_edge(n32,n89,25.0);
  g.add_edge(n32,n92,25.0);
  g.add_edge(n32,n94,25.0);
  g.add_edge(n32,n95,50.0);
  g.add_edge(n32,n96,25.0);
  g.add_edge(n32,n98,25.0);
  g.add_edge(n32,n99,25.0);
  g.add_edge(n32,n102,100.0);
  g.add_edge(n33,n2,0.877192982456);
  g.add_edge(n33,n9,1.28205128205);
  g.add_edge(n33,n10,0.591715976331);
  g.add_edge(n33,n12,1.81818181818);
  g.add_edge(n33,n13,1.85185185185);
  g.add_edge(n33,n20,0.819672131148);
  g.add_edge(n33,n24,1.47058823529);
  g.add_edge(n33,n26,1.2987012987);
  g.add_edge(n33,n28,1.81818181818);
  g.add_edge(n33,n30,1.5625);
  g.add_edge(n33,n32,25.0);
  g.add_edge(n33,n35,1.96078431373);
  g.add_edge(n33,n37,1.47058823529);
  g.add_edge(n33,n43,3.125);
  g.add_edge(n33,n44,1.81818181818);
  g.add_edge(n33,n47,0.840336134454);
  g.add_edge(n33,n50,0.847457627119);
  g.add_edge(n33,n53,1.49253731343);
  g.add_edge(n33,n54,0.438596491228);
  g.add_edge(n33,n61,1.78571428571);
  g.add_edge(n33,n64,0.406504065041);
  g.add_edge(n33,n68,0.970873786408);
  g.add_edge(n33,n71,0.917431192661);
  g.add_edge(n33,n73,1.2987012987);
  g.add_edge(n33,n75,0.909090909091);
  g.add_edge(n33,n77,1.2987012987);
  g.add_edge(n33,n79,1.0101010101);
  g.add_edge(n33,n91,1.20481927711);
  g.add_edge(n33,n93,0.900900900901);
  g.add_edge(n33,n94,0.925925925926);
  g.add_edge(n33,n95,1.08695652174);
  g.add_edge(n33,n102,1.26582278481);
  g.add_edge(n34,n12,1.75438596491);
  g.add_edge(n34,n24,1.40845070423);
  g.add_edge(n34,n28,2.04081632653);
  g.add_edge(n34,n30,1.6393442623);
  g.add_edge(n34,n37,1.53846153846);
  g.add_edge(n34,n44,1.78571428571);
  g.add_edge(n34,n61,1.85185185185);
  g.add_edge(n34,n64,0.429184549356);
  g.add_edge(n34,n75,0.934579439252);
  g.add_edge(n34,n77,1.42857142857);
  g.add_edge(n34,n89,0.401606425703);
  g.add_edge(n34,n94,0.990099009901);
  g.add_edge(n34,n95,1.12359550562);
  g.add_edge(n34,n102,1.28205128205);
  g.add_edge(n35,n1,1.75438596491);
  g.add_edge(n35,n3,1.69491525424);
  g.add_edge(n35,n5,1.96078431373);
  g.add_edge(n35,n9,0.473933649289);
  g.add_edge(n35,n10,0.724637681159);
  g.add_edge(n35,n12,0.480769230769);
  g.add_edge(n35,n13,0.46511627907);
  g.add_edge(n35,n20,0.571428571429);
  g.add_edge(n35,n22,2.08333333333);
  g.add_edge(n35,n24,0.480769230769);
  g.add_edge(n35,n26,0.436681222707);
  g.add_edge(n35,n28,0.480769230769);
  g.add_edge(n35,n30,0.429184549356);
  g.add_edge(n35,n31,1.47058823529);
  g.add_edge(n35,n32,33.3333333333);
  g.add_edge(n35,n34,2.12765957447);
  g.add_edge(n35,n37,0.456621004566);
  g.add_edge(n35,n43,14.2857142857);
  g.add_edge(n35,n44,0.434782608696);
  g.add_edge(n35,n47,0.609756097561);
  g.add_edge(n35,n49,2.04081632653);
  g.add_edge(n35,n50,7.69230769231);
  g.add_edge(n35,n52,1.92307692308);
  g.add_edge(n35,n53,0.454545454545);
  g.add_edge(n35,n54,1.0101010101);
  g.add_edge(n35,n55,1.92307692308);
  g.add_edge(n35,n56,2.0);
  g.add_edge(n35,n58,1.5873015873);
  g.add_edge(n35,n60,2.0);
  g.add_edge(n35,n61,0.448430493274);
  g.add_edge(n35,n62,2.08333333333);
  g.add_edge(n35,n63,2.04081632653);
  g.add_edge(n35,n64,1.13636363636);
  g.add_edge(n35,n65,1.96078431373);
  g.add_edge(n35,n67,1.5873015873);
  g.add_edge(n35,n70,1.5873015873);
  g.add_edge(n35,n71,0.534759358289);
  g.add_edge(n35,n74,2.0);
  g.add_edge(n35,n75,0.485436893204);
  g.add_edge(n35,n77,0.46511627907);
  g.add_edge(n35,n79,0.505050505051);
  g.add_edge(n35,n80,1.61290322581);
  g.add_edge(n35,n83,1.85185185185);
  g.add_edge(n35,n85,2.27272727273);
  g.add_edge(n35,n87,2.17391304348);
  g.add_edge(n35,n88,2.0);
  g.add_edge(n35,n89,1.35135135135);
  g.add_edge(n35,n92,1.51515151515);
  g.add_edge(n35,n94,0.49504950495);
  g.add_edge(n35,n95,0.460829493088);
  g.add_edge(n35,n96,1.72413793103);
  g.add_edge(n35,n98,1.75438596491);
  g.add_edge(n35,n99,1.69491525424);
  g.add_edge(n35,n101,1.85185185185);
  g.add_edge(n35,n102,0.448430493274);
  g.add_edge(n36,n1,0.699300699301);
  g.add_edge(n36,n2,1.40845070423);
  g.add_edge(n36,n3,0.709219858156);
  g.add_edge(n36,n5,0.680272108844);
  g.add_edge(n36,n7,0.709219858156);
  g.add_edge(n36,n9,2.08333333333);
  g.add_edge(n36,n10,1.28205128205);
  g.add_edge(n36,n12,2.5641025641);
  g.add_edge(n36,n13,2.94117647059);
  g.add_edge(n36,n17,2.43902439024);
  g.add_edge(n36,n18,0.684931506849);
  g.add_edge(n36,n20,1.53846153846);
  g.add_edge(n36,n21,0.714285714286);
  g.add_edge(n36,n22,0.684931506849);
  g.add_edge(n36,n24,1.96078431373);
  g.add_edge(n36,n26,2.27272727273);
  g.add_edge(n36,n28,2.94117647059);
  g.add_edge(n36,n29,2.43902439024);
  g.add_edge(n36,n30,2.38095238095);
  g.add_edge(n36,n31,0.787401574803);
  g.add_edge(n36,n33,0.680272108844);
  g.add_edge(n36,n34,0.704225352113);
  g.add_edge(n36,n35,3.22580645161);
  g.add_edge(n36,n37,2.32558139535);
  g.add_edge(n36,n39,1.75438596491);
  g.add_edge(n36,n42,0.666666666667);
  g.add_edge(n36,n43,4.7619047619);
  g.add_edge(n36,n44,3.0303030303);
  g.add_edge(n36,n45,0.684931506849);
  g.add_edge(n36,n46,0.751879699248);
  g.add_edge(n36,n47,1.35135135135);
  g.add_edge(n36,n48,2.94117647059);
  g.add_edge(n36,n49,0.714285714286);
  g.add_edge(n36,n52,0.689655172414);
  g.add_edge(n36,n53,3.0303030303);
  g.add_edge(n36,n54,0.925925925926);
  g.add_edge(n36,n55,0.684931506849);
  g.add_edge(n36,n56,0.680272108844);
  g.add_edge(n36,n58,0.689655172414);
  g.add_edge(n36,n60,0.699300699301);
  g.add_edge(n36,n61,2.85714285714);
  g.add_edge(n36,n62,0.709219858156);
  g.add_edge(n36,n63,0.680272108844);
  g.add_edge(n36,n64,0.813008130081);
  g.add_edge(n36,n65,0.662251655629);
  g.add_edge(n36,n66,1.85185185185);
  g.add_edge(n36,n67,0.735294117647);
  g.add_edge(n36,n68,1.5625);
  g.add_edge(n36,n70,0.735294117647);
  g.add_edge(n36,n71,1.61290322581);
  g.add_edge(n36,n73,2.17391304348);
  g.add_edge(n36,n74,0.680272108844);
  g.add_edge(n36,n75,1.85185185185);
  g.add_edge(n36,n77,2.04081632653);
  g.add_edge(n36,n79,1.61290322581);
  g.add_edge(n36,n80,0.709219858156);
  g.add_edge(n36,n83,0.694444444444);
  g.add_edge(n36,n84,0.769230769231);
  g.add_edge(n36,n85,0.704225352113);
  g.add_edge(n36,n86,0.675675675676);
  g.add_edge(n36,n87,0.680272108844);
  g.add_edge(n36,n88,0.675675675676);
  g.add_edge(n36,n89,0.78125);
  g.add_edge(n36,n91,2.04081632653);
  g.add_edge(n36,n92,0.724637681159);
  g.add_edge(n36,n93,1.85185185185);
  g.add_edge(n36,n94,1.75438596491);
  g.add_edge(n36,n95,2.0);
  g.add_edge(n36,n96,0.719424460432);
  g.add_edge(n36,n97,0.769230769231);
  g.add_edge(n36,n98,0.735294117647);
  g.add_edge(n36,n99,0.704225352113);
  g.add_edge(n36,n101,0.699300699301);
  g.add_edge(n36,n102,2.5);
  g.add_edge(n37,n28,0.431034482759);
  g.add_edge(n37,n52,1.44927536232);
  g.add_edge(n37,n62,1.51515151515);
  g.add_edge(n37,n65,1.44927536232);
  g.add_edge(n37,n80,1.42857142857);
  g.add_edge(n37,n87,1.61290322581);
  g.add_edge(n37,n89,1.26582278481);
  g.add_edge(n37,n92,1.23456790123);
  g.add_edge(n37,n94,0.444444444444);
  g.add_edge(n37,n98,1.33333333333);
  g.add_edge(n37,n99,1.49253731343);
  g.add_edge(n37,n102,0.42194092827);
  g.add_edge(n38,n1,1.51515151515);
  g.add_edge(n38,n2,0.518134715026);
  g.add_edge(n38,n3,1.44927536232);
  g.add_edge(n38,n5,1.72413793103);
  g.add_edge(n38,n6,1.53846153846);
  g.add_edge(n38,n7,1.72413793103);
  g.add_edge(n38,n9,0.440528634361);
  g.add_edge(n38,n10,0.684931506849);
  g.add_edge(n38,n12,0.452488687783);
  g.add_edge(n38,n13,0.4329004329);
  g.add_edge(n38,n15,0.467289719626);
  g.add_edge(n38,n17,0.431034482759);
  g.add_edge(n38,n18,1.66666666667);
  g.add_edge(n38,n20,0.552486187845);
  g.add_edge(n38,n21,1.53846153846);
  g.add_edge(n38,n22,1.72413793103);
  g.add_edge(n38,n23,0.689655172414);
  g.add_edge(n38,n24,0.45045045045);
  g.add_edge(n38,n26,0.434782608696);
  g.add_edge(n38,n28,0.47619047619);
  g.add_edge(n38,n29,0.442477876106);
  g.add_edge(n38,n30,0.429184549356);
  g.add_edge(n38,n31,1.26582278481);
  g.add_edge(n38,n33,1.72413793103);
  g.add_edge(n38,n34,1.75438596491);
  g.add_edge(n38,n35,0.47619047619);
  g.add_edge(n38,n36,2.85714285714);
  g.add_edge(n38,n37,0.446428571429);
  g.add_edge(n38,n39,0.502512562814);
  g.add_edge(n38,n42,1.78571428571);
  g.add_edge(n38,n43,25.0);
  g.add_edge(n38,n44,0.425531914894);
  g.add_edge(n38,n45,1.66666666667);
  g.add_edge(n38,n46,1.33333333333);
  g.add_edge(n38,n47,0.568181818182);
  g.add_edge(n38,n48,0.45045045045);
  g.add_edge(n38,n49,1.75438596491);
  g.add_edge(n38,n50,5.55555555556);
  g.add_edge(n38,n52,1.66666666667);
  g.add_edge(n38,n53,0.425531914894);
  g.add_edge(n38,n54,0.934579439252);
  g.add_edge(n38,n55,1.66666666667);
  g.add_edge(n38,n56,1.72413793103);
  g.add_edge(n38,n58,1.42857142857);
  g.add_edge(n38,n60,1.75438596491);
  g.add_edge(n38,n61,0.438596491228);
  g.add_edge(n38,n62,1.72413793103);
  g.add_edge(n38,n63,1.66666666667);
  g.add_edge(n38,n64,1.0752688172);
  g.add_edge(n38,n65,1.72413793103);
  g.add_edge(n38,n66,0.456621004566);
  g.add_edge(n38,n67,1.3698630137);
  g.add_edge(n38,n68,0.487804878049);
  g.add_edge(n38,n70,1.44927536232);
  g.add_edge(n38,n71,0.507614213198);
  g.add_edge(n38,n73,0.42735042735);
  g.add_edge(n38,n74,1.72413793103);
  g.add_edge(n38,n75,0.467289719626);
  g.add_edge(n38,n77,0.471698113208);
  g.add_edge(n38,n79,0.485436893204);
  g.add_edge(n38,n80,1.47058823529);
  g.add_edge(n38,n81,0.436681222707);
  g.add_edge(n38,n83,1.5873015873);
  g.add_edge(n38,n84,1.14942528736);
  g.add_edge(n38,n85,1.78571428571);
  g.add_edge(n38,n86,1.6393442623);
  g.add_edge(n38,n87,1.78571428571);
  g.add_edge(n38,n88,1.75438596491);
  g.add_edge(n38,n89,1.25);
  g.add_edge(n38,n90,0.502512562814);
  g.add_edge(n38,n91,0.448430493274);
  g.add_edge(n38,n92,1.3698630137);
  g.add_edge(n38,n93,0.487804878049);
  g.add_edge(n38,n94,0.492610837438);
  g.add_edge(n38,n95,0.4329004329);
  g.add_edge(n38,n96,1.5625);
  g.add_edge(n38,n97,1.14942528736);
  g.add_edge(n38,n98,1.5625);
  g.add_edge(n38,n99,1.49253731343);
  g.add_edge(n38,n101,1.61290322581);
  g.add_edge(n38,n102,0.431034482759);
  g.add_edge(n39,n1,0.862068965517);
  g.add_edge(n39,n2,0.46511627907);
  g.add_edge(n39,n3,0.826446280992);
  g.add_edge(n39,n5,0.917431192661);
  g.add_edge(n39,n7,0.934579439252);
  g.add_edge(n39,n9,0.497512437811);
  g.add_edge(n39,n10,0.54347826087);
  g.add_edge(n39,n12,0.510204081633);
  g.add_edge(n39,n13,0.512820512821);
  g.add_edge(n39,n20,0.440528634361);
  g.add_edge(n39,n21,0.862068965517);
  g.add_edge(n39,n22,0.909090909091);
  g.add_edge(n39,n24,0.471698113208);
  g.add_edge(n39,n26,0.462962962963);
  g.add_edge(n39,n28,0.552486187845);
  g.add_edge(n39,n30,0.490196078431);
  g.add_edge(n39,n31,0.78125);
  g.add_edge(n39,n32,100.0);
  g.add_edge(n39,n33,0.925925925926);
  g.add_edge(n39,n34,0.925925925926);
  g.add_edge(n39,n35,0.555555555556);
  g.add_edge(n39,n37,0.490196078431);
  g.add_edge(n39,n42,0.934579439252);
  g.add_edge(n39,n43,11.1111111111);
  g.add_edge(n39,n44,0.490196078431);
  g.add_edge(n39,n45,0.900900900901);
  g.add_edge(n39,n46,0.819672131148);
  g.add_edge(n39,n47,0.54347826087);
  g.add_edge(n39,n49,0.934579439252);
  g.add_edge(n39,n50,2.27272727273);
  g.add_edge(n39,n52,0.909090909091);
  g.add_edge(n39,n53,0.478468899522);
  g.add_edge(n39,n54,0.666666666667);
  g.add_edge(n39,n55,0.909090909091);
  g.add_edge(n39,n56,0.917431192661);
  g.add_edge(n39,n58,0.854700854701);
  g.add_edge(n39,n60,0.952380952381);
  g.add_edge(n39,n61,0.497512437811);
  g.add_edge(n39,n62,0.909090909091);
  g.add_edge(n39,n63,0.909090909091);
  g.add_edge(n39,n64,0.735294117647);
  g.add_edge(n39,n65,0.917431192661);
  g.add_edge(n39,n67,0.806451612903);
  g.add_edge(n39,n68,0.460829493088);
  g.add_edge(n39,n70,0.833333333333);
  g.add_edge(n39,n71,0.473933649289);
  g.add_edge(n39,n73,0.467289719626);
  g.add_edge(n39,n74,0.934579439252);
  g.add_edge(n39,n75,0.448430493274);
  g.add_edge(n39,n77,0.510204081633);
  g.add_edge(n39,n79,0.485436893204);
  g.add_edge(n39,n80,0.862068965517);
  g.add_edge(n39,n83,0.884955752212);
  g.add_edge(n39,n85,0.943396226415);
  g.add_edge(n39,n87,0.970873786408);
  g.add_edge(n39,n88,0.943396226415);
  g.add_edge(n39,n89,0.78125);
  g.add_edge(n39,n91,0.454545454545);
  g.add_edge(n39,n92,0.826446280992);
  g.add_edge(n39,n93,0.454545454545);
  g.add_edge(n39,n94,0.456621004566);
  g.add_edge(n39,n95,0.452488687783);
  g.add_edge(n39,n96,0.900900900901);
  g.add_edge(n39,n97,0.746268656716);
  g.add_edge(n39,n98,0.892857142857);
  g.add_edge(n39,n99,0.869565217391);
  g.add_edge(n39,n101,0.892857142857);
  g.add_edge(n39,n102,0.442477876106);
  g.add_edge(n40,n2,0.787401574803);
  g.add_edge(n40,n3,0.414937759336);
  g.add_edge(n40,n8,0.401606425703);
  g.add_edge(n40,n9,1.04166666667);
  g.add_edge(n40,n10,0.529100529101);
  g.add_edge(n40,n11,0.970873786408);
  g.add_edge(n40,n12,1.20481927711);
  g.add_edge(n40,n13,1.33333333333);
  g.add_edge(n40,n15,0.77519379845);
  g.add_edge(n40,n17,1.21951219512);
  g.add_edge(n40,n20,0.769230769231);
  g.add_edge(n40,n23,0.5);
  g.add_edge(n40,n24,1.06382978723);
  g.add_edge(n40,n25,0.854700854701);
  g.add_edge(n40,n26,0.970873786408);
  g.add_edge(n40,n28,1.20481927711);
  g.add_edge(n40,n29,1.20481927711);
  g.add_edge(n40,n30,1.11111111111);
  g.add_edge(n40,n31,0.408163265306);
  g.add_edge(n40,n32,25.0);
  g.add_edge(n40,n34,0.414937759336);
  g.add_edge(n40,n35,1.2987012987);
  g.add_edge(n40,n36,0.78125);
  g.add_edge(n40,n37,1.20481927711);
  g.add_edge(n40,n38,1.21951219512);
  g.add_edge(n40,n39,0.769230769231);
  g.add_edge(n40,n41,2.5641025641);
  g.add_edge(n40,n43,4.0);
  g.add_edge(n40,n44,1.20481927711);
  g.add_edge(n40,n47,0.787401574803);
  g.add_edge(n40,n48,1.33333333333);
  g.add_edge(n40,n50,0.869565217391);
  g.add_edge(n40,n51,0.892857142857);
  g.add_edge(n40,n53,1.14942528736);
  g.add_edge(n40,n54,0.442477876106);
  g.add_edge(n40,n61,1.35135135135);
  g.add_edge(n40,n62,0.403225806452);
  g.add_edge(n40,n66,0.952380952381);
  g.add_edge(n40,n68,0.840336134454);
  g.add_edge(n40,n69,0.900900900901);
  g.add_edge(n40,n71,0.819672131148);
  g.add_edge(n40,n72,1.5625);
  g.add_edge(n40,n73,0.990099009901);
  g.add_edge(n40,n75,0.793650793651);
  g.add_edge(n40,n77,1.0752688172);
  g.add_edge(n40,n79,0.869565217391);
  g.add_edge(n40,n81,1.11111111111);
  g.add_edge(n40,n82,0.970873786408);
  g.add_edge(n40,n85,0.403225806452);
  g.add_edge(n40,n87,0.404858299595);
  g.add_edge(n40,n90,0.813008130081);
  g.add_edge(n40,n91,0.917431192661);
  g.add_edge(n40,n93,0.746268656716);
  g.add_edge(n40,n94,0.8);
  g.add_edge(n40,n95,0.909090909091);
  g.add_edge(n40,n102,0.970873786408);
  g.add_edge(n41,n1,2.5);
  g.add_edge(n41,n2,1.92307692308);
  g.add_edge(n41,n3,2.38095238095);
  g.add_edge(n41,n5,2.5641025641);
  g.add_edge(n41,n6,2.5);
  g.add_edge(n41,n7,2.5);
  g.add_edge(n41,n9,1.96078431373);
  g.add_edge(n41,n10,1.92307692308);
  g.add_edge(n41,n11,1.78571428571);
  g.add_edge(n41,n12,2.17391304348);
  g.add_edge(n41,n13,2.32558139535);
  g.add_edge(n41,n15,1.72413793103);
  g.add_edge(n41,n17,2.17391304348);
  g.add_edge(n41,n18,2.43902439024);
  g.add_edge(n41,n20,2.12765957447);
  g.add_edge(n41,n21,2.43902439024);
  g.add_edge(n41,n22,2.63157894737);
  g.add_edge(n41,n23,1.78571428571);
  g.add_edge(n41,n24,2.17391304348);
  g.add_edge(n41,n26,1.81818181818);
  g.add_edge(n41,n28,2.12765957447);
  g.add_edge(n41,n29,2.04081632653);
  g.add_edge(n41,n30,2.04081632653);
  g.add_edge(n41,n31,2.5641025641);
  g.add_edge(n41,n33,2.5641025641);
  g.add_edge(n41,n34,2.43902439024);
  g.add_edge(n41,n35,3.0303030303);
  g.add_edge(n41,n36,6.66666666667);
  g.add_edge(n41,n37,2.0);
  g.add_edge(n41,n38,2.27272727273);
  g.add_edge(n41,n39,2.0);
  g.add_edge(n41,n42,2.5641025641);
  g.add_edge(n41,n44,2.04081632653);
  g.add_edge(n41,n45,2.5);
  g.add_edge(n41,n46,2.5641025641);
  g.add_edge(n41,n47,1.75438596491);
  g.add_edge(n41,n48,2.32558139535);
  g.add_edge(n41,n49,2.63157894737);
  g.add_edge(n41,n50,4.16666666667);
  g.add_edge(n41,n52,2.63157894737);
  g.add_edge(n41,n53,1.92307692308);
  g.add_edge(n41,n54,2.12765957447);
  g.add_edge(n41,n55,2.5);
  g.add_edge(n41,n56,2.5);
  g.add_edge(n41,n58,2.43902439024);
  g.add_edge(n41,n60,2.63157894737);
  g.add_edge(n41,n61,2.22222222222);
  g.add_edge(n41,n62,2.7027027027);
  g.add_edge(n41,n63,2.5641025641);
  g.add_edge(n41,n64,2.17391304348);
  g.add_edge(n41,n65,2.5641025641);
  g.add_edge(n41,n66,1.69491525424);
  g.add_edge(n41,n67,2.38095238095);
  g.add_edge(n41,n68,1.5873015873);
  g.add_edge(n41,n70,2.63157894737);
  g.add_edge(n41,n71,1.69491525424);
  g.add_edge(n41,n73,1.96078431373);
  g.add_edge(n41,n74,2.5);
  g.add_edge(n41,n75,1.75438596491);
  g.add_edge(n41,n77,2.17391304348);
  g.add_edge(n41,n79,1.72413793103);
  g.add_edge(n41,n80,2.5641025641);
  g.add_edge(n41,n81,1.92307692308);
  g.add_edge(n41,n83,2.5);
  g.add_edge(n41,n84,2.38095238095);
  g.add_edge(n41,n85,2.63157894737);
  g.add_edge(n41,n86,2.43902439024);
  g.add_edge(n41,n87,2.5641025641);
  g.add_edge(n41,n88,2.5641025641);
  g.add_edge(n41,n89,2.43902439024);
  g.add_edge(n41,n90,1.88679245283);
  g.add_edge(n41,n91,1.78571428571);
  g.add_edge(n41,n92,2.5641025641);
  g.add_edge(n41,n93,1.69491525424);
  g.add_edge(n41,n94,1.78571428571);
  g.add_edge(n41,n95,1.72413793103);
  g.add_edge(n41,n96,2.5641025641);
  g.add_edge(n41,n97,2.43902439024);
  g.add_edge(n41,n98,2.63157894737);
  g.add_edge(n41,n99,2.5);
  g.add_edge(n41,n101,2.5);
  g.add_edge(n41,n102,1.85185185185);
  g.add_edge(n42,n9,1.2987012987);
  g.add_edge(n42,n10,0.59880239521);
  g.add_edge(n42,n12,1.78571428571);
  g.add_edge(n42,n13,1.92307692308);
  g.add_edge(n42,n20,0.847457627119);
  g.add_edge(n42,n24,1.44927536232);
  g.add_edge(n42,n26,1.31578947368);
  g.add_edge(n42,n28,1.85185185185);
  g.add_edge(n42,n30,1.5873015873);
  g.add_edge(n42,n32,25.0);
  g.add_edge(n42,n35,2.04081632653);
  g.add_edge(n42,n37,1.51515151515);
  g.add_edge(n42,n43,3.0303030303);
  g.add_edge(n42,n44,1.85185185185);
  g.add_edge(n42,n47,0.847457627119);
  g.add_edge(n42,n50,0.854700854701);
  g.add_edge(n42,n53,1.5873015873);
  g.add_edge(n42,n54,0.442477876106);
  g.add_edge(n42,n61,1.88679245283);
  g.add_edge(n42,n64,0.406504065041);
  g.add_edge(n42,n68,0.980392156863);
  g.add_edge(n42,n71,0.925925925926);
  g.add_edge(n42,n75,0.917431192661);
  g.add_edge(n42,n77,1.31578947368);
  g.add_edge(n42,n79,1.02040816327);
  g.add_edge(n42,n94,0.917431192661);
  g.add_edge(n42,n95,1.0989010989);
  g.add_edge(n42,n102,1.31578947368);
  g.add_edge(n43,n3,3.33333333333);
  g.add_edge(n43,n5,3.0303030303);
  g.add_edge(n43,n9,12.5);
  g.add_edge(n43,n10,5.0);
  g.add_edge(n43,n12,14.2857142857);
  g.add_edge(n43,n13,14.2857142857);
  g.add_edge(n43,n20,7.69230769231);
  g.add_edge(n43,n22,3.0303030303);
  g.add_edge(n43,n24,16.6666666667);
  g.add_edge(n43,n26,12.5);
  g.add_edge(n43,n28,14.2857142857);
  g.add_edge(n43,n30,14.2857142857);
  g.add_edge(n43,n31,3.57142857143);
  g.add_edge(n43,n34,4.16666666667);
  g.add_edge(n43,n37,33.3333333333);
  g.add_edge(n43,n44,25.0);
  g.add_edge(n43,n49,3.125);
  g.add_edge(n43,n52,3.22580645161);
  g.add_edge(n43,n54,3.84615384615);
  g.add_edge(n43,n55,3.0303030303);
  g.add_edge(n43,n56,3.0303030303);
  g.add_edge(n43,n60,3.125);
  g.add_edge(n43,n61,20.0);
  g.add_edge(n43,n62,3.125);
  g.add_edge(n43,n63,3.0303030303);
  g.add_edge(n43,n64,4.0);
  g.add_edge(n43,n65,3.125);
  g.add_edge(n43,n74,3.0303030303);
  g.add_edge(n43,n75,10.0);
  g.add_edge(n43,n77,11.1111111111);
  g.add_edge(n43,n80,3.125);
  g.add_edge(n43,n83,3.125);
  g.add_edge(n43,n85,3.44827586207);
  g.add_edge(n43,n87,3.0303030303);
  g.add_edge(n43,n88,3.0303030303);
  g.add_edge(n43,n89,3.84615384615);
  g.add_edge(n43,n92,3.57142857143);
  g.add_edge(n43,n94,7.69230769231);
  g.add_edge(n43,n95,11.1111111111);
  g.add_edge(n43,n96,3.0303030303);
  g.add_edge(n43,n98,3.33333333333);
  g.add_edge(n43,n99,3.0303030303);
  g.add_edge(n43,n102,11.1111111111);
  g.add_edge(n44,n28,0.408163265306);
  g.add_edge(n44,n52,1.72413793103);
  g.add_edge(n44,n62,1.78571428571);
  g.add_edge(n44,n65,1.75438596491);
  g.add_edge(n44,n77,0.408163265306);
  g.add_edge(n44,n80,1.44927536232);
  g.add_edge(n44,n87,1.92307692308);
  g.add_edge(n44,n89,1.23456790123);
  g.add_edge(n44,n92,1.38888888889);
  g.add_edge(n44,n94,0.452488687783);
  g.add_edge(n44,n95,0.404858299595);
  g.add_edge(n44,n98,1.5625);
  g.add_edge(n44,n99,1.53846153846);
  g.add_edge(n44,n102,0.404858299595);
  g.add_edge(n45,n2,0.847457627119);
  g.add_edge(n45,n9,1.25);
  g.add_edge(n45,n10,0.581395348837);
  g.add_edge(n45,n12,1.69491525424);
  g.add_edge(n45,n13,1.81818181818);
  g.add_edge(n45,n20,0.8);
  g.add_edge(n45,n24,1.38888888889);
  g.add_edge(n45,n26,1.26582278481);
  g.add_edge(n45,n28,1.72413793103);
  g.add_edge(n45,n30,1.51515151515);
  g.add_edge(n45,n32,25.0);
  g.add_edge(n45,n35,1.92307692308);
  g.add_edge(n45,n37,1.40845070423);
  g.add_edge(n45,n43,3.125);
  g.add_edge(n45,n44,1.69491525424);
  g.add_edge(n45,n47,0.813008130081);
  g.add_edge(n45,n50,0.854700854701);
  g.add_edge(n45,n53,1.42857142857);
  g.add_edge(n45,n54,0.431034482759);
  g.add_edge(n45,n61,1.72413793103);
  g.add_edge(n45,n64,0.403225806452);
  g.add_edge(n45,n68,0.952380952381);
  g.add_edge(n45,n71,0.900900900901);
  g.add_edge(n45,n73,1.23456790123);
  g.add_edge(n45,n75,0.877192982456);
  g.add_edge(n45,n77,1.26582278481);
  g.add_edge(n45,n79,0.990099009901);
  g.add_edge(n45,n91,1.16279069767);
  g.add_edge(n45,n93,0.869565217391);
  g.add_edge(n45,n94,0.909090909091);
  g.add_edge(n45,n95,1.06382978723);
  g.add_edge(n45,n102,1.20481927711);
  g.add_edge(n46,n3,0.414937759336);
  g.add_edge(n46,n9,1.04166666667);
  g.add_edge(n46,n10,0.561797752809);
  g.add_edge(n46,n12,1.33333333333);
  g.add_edge(n46,n13,1.53846153846);
  g.add_edge(n46,n20,0.763358778626);
  g.add_edge(n46,n24,1.14942528736);
  g.add_edge(n46,n26,1.0752688172);
  g.add_edge(n46,n28,1.35135135135);
  g.add_edge(n46,n30,1.23456790123);
  g.add_edge(n46,n31,0.408163265306);
  g.add_edge(n46,n32,25.0);
  g.add_edge(n46,n34,0.411522633745);
  g.add_edge(n46,n35,1.49253731343);
  g.add_edge(n46,n37,1.19047619048);
  g.add_edge(n46,n43,3.84615384615);
  g.add_edge(n46,n44,1.3698630137);
  g.add_edge(n46,n47,0.862068965517);
  g.add_edge(n46,n49,0.406504065041);
  g.add_edge(n46,n50,0.925925925926);
  g.add_edge(n46,n53,1.23456790123);
  g.add_edge(n46,n54,0.4329004329);
  g.add_edge(n46,n55,0.401606425703);
  g.add_edge(n46,n61,1.38888888889);
  g.add_edge(n46,n62,0.404858299595);
  g.add_edge(n46,n68,0.819672131148);
  g.add_edge(n46,n71,0.806451612903);
  g.add_edge(n46,n75,0.8);
  g.add_edge(n46,n77,1.06382978723);
  g.add_edge(n46,n79,0.862068965517);
  g.add_edge(n46,n85,0.408163265306);
  g.add_edge(n46,n87,0.403225806452);
  g.add_edge(n46,n91,1.0101010101);
  g.add_edge(n46,n94,0.813008130081);
  g.add_edge(n46,n95,0.917431192661);
  g.add_edge(n46,n96,0.409836065574);
  g.add_edge(n46,n99,0.401606425703);
  g.add_edge(n46,n102,1.08695652174);
  g.add_edge(n47,n1,0.77519379845);
  g.add_edge(n47,n3,0.806451612903);
  g.add_edge(n47,n5,0.862068965517);
  g.add_edge(n47,n9,0.549450549451);
  g.add_edge(n47,n10,0.578034682081);
  g.add_edge(n47,n12,0.581395348837);
  g.add_edge(n47,n13,0.561797752809);
  g.add_edge(n47,n20,0.529100529101);
  g.add_edge(n47,n22,0.819672131148);
  g.add_edge(n47,n24,0.54347826087);
  g.add_edge(n47,n26,0.526315789474);
  g.add_edge(n47,n28,0.581395348837);
  g.add_edge(n47,n30,0.518134715026);
  g.add_edge(n47,n31,0.746268656716);
  g.add_edge(n47,n34,0.840336134454);
  g.add_edge(n47,n37,0.546448087432);
  g.add_edge(n47,n43,5.26315789474);
  g.add_edge(n47,n44,0.534759358289);
  g.add_edge(n47,n49,0.833333333333);
  g.add_edge(n47,n50,2.5641025641);
  g.add_edge(n47,n52,0.854700854701);
  g.add_edge(n47,n54,0.704225352113);
  g.add_edge(n47,n55,0.819672131148);
  g.add_edge(n47,n56,0.819672131148);
  g.add_edge(n47,n60,0.826446280992);
  g.add_edge(n47,n61,0.568181818182);
  g.add_edge(n47,n62,0.819672131148);
  g.add_edge(n47,n63,0.833333333333);
  g.add_edge(n47,n64,0.757575757576);
  g.add_edge(n47,n65,0.826446280992);
  g.add_edge(n47,n70,0.847457627119);
  g.add_edge(n47,n74,0.833333333333);
  g.add_edge(n47,n75,0.510204081633);
  g.add_edge(n47,n77,0.568181818182);
  g.add_edge(n47,n80,0.793650793651);
  g.add_edge(n47,n83,0.8);
  g.add_edge(n47,n85,0.877192982456);
  g.add_edge(n47,n87,0.869565217391);
  g.add_edge(n47,n88,0.826446280992);
  g.add_edge(n47,n89,0.763358778626);
  g.add_edge(n47,n92,0.806451612903);
  g.add_edge(n47,n94,0.526315789474);
  g.add_edge(n47,n95,0.518134715026);
  g.add_edge(n47,n96,0.806451612903);
  g.add_edge(n47,n98,0.826446280992);
  g.add_edge(n47,n99,0.787401574803);
  g.add_edge(n47,n102,0.5);
  g.add_edge(n48,n1,1.66666666667);
  g.add_edge(n48,n2,0.558659217877);
  g.add_edge(n48,n3,1.66666666667);
  g.add_edge(n48,n5,1.88679245283);
  g.add_edge(n48,n7,1.96078431373);
  g.add_edge(n48,n9,0.444444444444);
  g.add_edge(n48,n10,0.763358778626);
  g.add_edge(n48,n12,0.408163265306);
  g.add_edge(n48,n17,0.413223140496);
  g.add_edge(n48,n18,1.85185185185);
  g.add_edge(n48,n20,0.574712643678);
  g.add_edge(n48,n21,1.69491525424);
  g.add_edge(n48,n22,1.96078431373);
  g.add_edge(n48,n24,0.42194092827);
  g.add_edge(n48,n26,0.4329004329);
  g.add_edge(n48,n28,0.460829493088);
  g.add_edge(n48,n30,0.406504065041);
  g.add_edge(n48,n31,1.40845070423);
  g.add_edge(n48,n33,2.0);
  g.add_edge(n48,n34,1.92307692308);
  g.add_edge(n48,n35,0.469483568075);
  g.add_edge(n48,n37,0.42194092827);
  g.add_edge(n48,n39,0.526315789474);
  g.add_edge(n48,n42,2.04081632653);
  g.add_edge(n48,n43,16.6666666667);
  g.add_edge(n48,n45,1.85185185185);
  g.add_edge(n48,n46,1.44927536232);
  g.add_edge(n48,n47,0.571428571429);
  g.add_edge(n48,n49,2.04081632653);
  g.add_edge(n48,n50,6.66666666667);
  g.add_edge(n48,n52,1.88679245283);
  g.add_edge(n48,n53,0.403225806452);
  g.add_edge(n48,n54,1.0);
  g.add_edge(n48,n55,1.92307692308);
  g.add_edge(n48,n56,1.96078431373);
  g.add_edge(n48,n58,1.5625);
  g.add_edge(n48,n60,2.04081632653);
  g.add_edge(n48,n61,0.409836065574);
  g.add_edge(n48,n62,1.96078431373);
  g.add_edge(n48,n63,1.88679245283);
  g.add_edge(n48,n64,1.11111111111);
  g.add_edge(n48,n65,1.92307692308);
  g.add_edge(n48,n66,0.45045045045);
  g.add_edge(n48,n67,1.49253731343);
  g.add_edge(n48,n68,0.490196078431);
  g.add_edge(n48,n70,1.5625);
  g.add_edge(n48,n71,0.523560209424);
  g.add_edge(n48,n73,0.414937759336);
  g.add_edge(n48,n74,2.0);
  g.add_edge(n48,n75,0.469483568075);
  g.add_edge(n48,n77,0.446428571429);
  g.add_edge(n48,n79,0.5);
  g.add_edge(n48,n80,1.5873015873);
  g.add_edge(n48,n83,1.75438596491);
  g.add_edge(n48,n84,1.21951219512);
  g.add_edge(n48,n85,1.88679245283);
  g.add_edge(n48,n86,1.81818181818);
  g.add_edge(n48,n87,2.12765957447);
  g.add_edge(n48,n88,2.0);
  g.add_edge(n48,n89,1.33333333333);
  g.add_edge(n48,n91,0.431034482759);
  g.add_edge(n48,n92,1.53846153846);
  g.add_edge(n48,n93,0.520833333333);
  g.add_edge(n48,n94,0.507614213198);
  g.add_edge(n48,n95,0.438596491228);
  g.add_edge(n48,n96,1.66666666667);
  g.add_edge(n48,n97,1.23456790123);
  g.add_edge(n48,n98,1.72413793103);
  g.add_edge(n48,n99,1.66666666667);
  g.add_edge(n48,n101,1.81818181818);
  g.add_edge(n48,n102,0.425531914894);
  g.add_edge(n49,n24,1.47058823529);
  g.add_edge(n49,n28,1.85185185185);
  g.add_edge(n49,n37,1.53846153846);
  g.add_edge(n49,n44,1.85185185185);
  g.add_edge(n49,n77,1.38888888889);
  g.add_edge(n49,n94,0.952380952381);
  g.add_edge(n49,n95,1.14942528736);
  g.add_edge(n49,n102,1.28205128205);
  g.add_edge(n50,n3,0.952380952381);
  g.add_edge(n50,n9,4.16666666667);
  g.add_edge(n50,n10,1.2987012987);
  g.add_edge(n50,n12,6.25);
  g.add_edge(n50,n20,2.22222222222);
  g.add_edge(n50,n22,0.847457627119);
  g.add_edge(n50,n24,6.66666666667);
  g.add_edge(n50,n26,3.7037037037);
  g.add_edge(n50,n28,6.66666666667);
  g.add_edge(n50,n30,5.55555555556);
  g.add_edge(n50,n31,0.900900900901);
  g.add_edge(n50,n34,0.862068965517);
  g.add_edge(n50,n37,4.7619047619);
  g.add_edge(n50,n44,5.0);
  g.add_edge(n50,n49,0.900900900901);
  g.add_edge(n50,n52,0.854700854701);
  g.add_edge(n50,n56,0.854700854701);
  g.add_edge(n50,n60,0.877192982456);
  g.add_edge(n50,n61,7.69230769231);
  g.add_edge(n50,n62,0.847457627119);
  g.add_edge(n50,n63,0.847457627119);
  g.add_edge(n50,n64,0.925925925926);
  g.add_edge(n50,n65,0.847457627119);
  g.add_edge(n50,n74,0.884955752212);
  g.add_edge(n50,n75,2.04081632653);
  g.add_edge(n50,n77,5.26315789474);
  g.add_edge(n50,n80,0.862068965517);
  g.add_edge(n50,n83,0.869565217391);
  g.add_edge(n50,n85,0.869565217391);
  g.add_edge(n50,n87,0.862068965517);
  g.add_edge(n50,n88,0.854700854701);
  g.add_edge(n50,n89,0.869565217391);
  g.add_edge(n50,n92,0.892857142857);
  g.add_edge(n50,n94,2.43902439024);
  g.add_edge(n50,n95,3.0303030303);
  g.add_edge(n50,n96,0.884955752212);
  g.add_edge(n50,n98,0.877192982456);
  g.add_edge(n50,n99,0.877192982456);
  g.add_edge(n50,n102,3.0303030303);
  g.add_edge(n51,n1,1.0);
  g.add_edge(n51,n2,0.442477876106);
  g.add_edge(n51,n3,0.980392156863);
  g.add_edge(n51,n5,1.06382978723);
  g.add_edge(n51,n6,1.0);
  g.add_edge(n51,n7,1.06382978723);
  g.add_edge(n51,n9,0.406504065041);
  g.add_edge(n51,n10,0.602409638554);
  g.add_edge(n51,n12,0.454545454545);
  g.add_edge(n51,n13,0.452488687783);
  g.add_edge(n51,n14,1.0752688172);
  g.add_edge(n51,n15,0.418410041841);
  g.add_edge(n51,n16,1.0);
  g.add_edge(n51,n17,0.418410041841);
  g.add_edge(n51,n18,1.05263157895);
  g.add_edge(n51,n20,0.480769230769);
  g.add_edge(n51,n21,1.0101010101);
  g.add_edge(n51,n22,1.13636363636);
  g.add_edge(n51,n23,0.568181818182);
  g.add_edge(n51,n24,0.45045045045);
  g.add_edge(n51,n25,0.42194092827);
  g.add_edge(n51,n26,0.42194092827);
  g.add_edge(n51,n28,0.448430493274);
  g.add_edge(n51,n29,0.42735042735);
  g.add_edge(n51,n30,0.418410041841);
  g.add_edge(n51,n31,0.877192982456);
  g.add_edge(n51,n33,1.0752688172);
  g.add_edge(n51,n34,1.0989010989);
  g.add_edge(n51,n35,0.48309178744);
  g.add_edge(n51,n36,1.96078431373);
  g.add_edge(n51,n37,0.418410041841);
  g.add_edge(n51,n38,0.434782608696);
  g.add_edge(n51,n39,0.460829493088);
  g.add_edge(n51,n41,1.78571428571);
  g.add_edge(n51,n42,1.08695652174);
  g.add_edge(n51,n43,12.5);
  g.add_edge(n51,n44,0.420168067227);
  g.add_edge(n51,n45,1.03092783505);
  g.add_edge(n51,n46,0.909090909091);
  g.add_edge(n51,n47,0.526315789474);
  g.add_edge(n51,n48,0.454545454545);
  g.add_edge(n51,n49,1.12359550562);
  g.add_edge(n51,n50,2.77777777778);
  g.add_edge(n51,n52,1.05263157895);
  g.add_edge(n51,n53,0.414937759336);
  g.add_edge(n51,n54,0.714285714286);
  g.add_edge(n51,n55,1.04166666667);
  g.add_edge(n51,n56,1.06382978723);
  g.add_edge(n51,n58,0.961538461538);
  g.add_edge(n51,n60,1.08695652174);
  g.add_edge(n51,n61,0.436681222707);
  g.add_edge(n51,n62,1.13636363636);
  g.add_edge(n51,n63,1.0752688172);
  g.add_edge(n51,n64,0.757575757576);
  g.add_edge(n51,n65,1.05263157895);
  g.add_edge(n51,n67,0.934579439252);
  g.add_edge(n51,n68,0.420168067227);
  g.add_edge(n51,n70,0.952380952381);
  g.add_edge(n51,n71,0.42735042735);
  g.add_edge(n51,n73,0.406504065041);
  g.add_edge(n51,n74,1.08695652174);
  g.add_edge(n51,n76,0.980392156863);
  g.add_edge(n51,n77,0.440528634361);
  g.add_edge(n51,n79,0.423728813559);
  g.add_edge(n51,n80,1.03092783505);
  g.add_edge(n51,n81,0.420168067227);
  g.add_edge(n51,n83,1.02040816327);
  g.add_edge(n51,n84,0.806451612903);
  g.add_edge(n51,n85,1.16279069767);
  g.add_edge(n51,n86,1.06382978723);
  g.add_edge(n51,n87,1.13636363636);
  g.add_edge(n51,n88,1.0989010989);
  g.add_edge(n51,n89,0.909090909091);
  g.add_edge(n51,n90,0.42194092827);
  g.add_edge(n51,n91,0.4329004329);
  g.add_edge(n51,n92,0.961538461538);
  g.add_edge(n51,n93,0.452488687783);
  g.add_edge(n51,n94,0.420168067227);
  g.add_edge(n51,n96,1.11111111111);
  g.add_edge(n51,n97,0.806451612903);
  g.add_edge(n51,n98,1.0101010101);
  g.add_edge(n51,n99,1.06382978723);
  g.add_edge(n51,n101,1.02040816327);
  g.add_edge(n51,n102,0.411522633745);
  g.add_edge(n52,n28,1.75438596491);
  g.add_edge(n52,n94,0.925925925926);
  g.add_edge(n53,n1,1.31578947368);
  g.add_edge(n53,n3,1.2987012987);
  g.add_edge(n53,n5,1.49253731343);
  g.add_edge(n53,n9,0.42194092827);
  g.add_edge(n53,n10,0.657894736842);
  g.add_edge(n53,n12,0.418410041841);
  g.add_edge(n53,n20,0.507614213198);
  g.add_edge(n53,n22,1.51515151515);
  g.add_edge(n53,n24,0.42735042735);
  g.add_edge(n53,n26,0.408163265306);
  g.add_edge(n53,n28,0.45045045045);
  g.add_edge(n53,n31,1.14942528736);
  g.add_edge(n53,n34,1.51515151515);
  g.add_edge(n53,n37,0.413223140496);
  g.add_edge(n53,n43,16.6666666667);
  g.add_edge(n53,n47,0.537634408602);
  g.add_edge(n53,n49,1.53846153846);
  g.add_edge(n53,n50,3.84615384615);
  g.add_edge(n53,n52,1.44927536232);
  g.add_edge(n53,n54,0.847457627119);
  g.add_edge(n53,n55,1.49253731343);
  g.add_edge(n53,n56,1.49253731343);
  g.add_edge(n53,n58,1.28205128205);
  g.add_edge(n53,n60,1.53846153846);
  g.add_edge(n53,n61,0.403225806452);
  g.add_edge(n53,n62,1.49253731343);
  g.add_edge(n53,n63,1.49253731343);
  g.add_edge(n53,n64,0.961538461538);
  g.add_edge(n53,n65,1.51515151515);
  g.add_edge(n53,n67,1.25);
  g.add_edge(n53,n70,1.2987012987);
  g.add_edge(n53,n74,1.51515151515);
  g.add_edge(n53,n75,0.425531914894);
  g.add_edge(n53,n77,0.436681222707);
  g.add_edge(n53,n80,1.31578947368);
  g.add_edge(n53,n83,1.42857142857);
  g.add_edge(n53,n85,1.49253731343);
  g.add_edge(n53,n87,1.61290322581);
  g.add_edge(n53,n88,1.51515151515);
  g.add_edge(n53,n89,1.17647058824);
  g.add_edge(n53,n92,1.23456790123);
  g.add_edge(n53,n94,0.452488687783);
  g.add_edge(n53,n95,0.401606425703);
  g.add_edge(n53,n96,1.40845070423);
  g.add_edge(n53,n98,1.31578947368);
  g.add_edge(n53,n99,1.40845070423);
  g.add_edge(n54,n3,0.467289719626);
  g.add_edge(n54,n9,0.806451612903);
  g.add_edge(n54,n10,0.502512562814);
  g.add_edge(n54,n12,0.934579439252);
  g.add_edge(n54,n20,0.625);
  g.add_edge(n54,n22,0.434782608696);
  g.add_edge(n54,n24,0.862068965517);
  g.add_edge(n54,n26,0.787401574803);
  g.add_edge(n54,n28,0.980392156863);
  g.add_edge(n54,n30,0.877192982456);
  g.add_edge(n54,n31,0.438596491228);
  g.add_edge(n54,n34,0.45871559633);
  g.add_edge(n54,n37,0.862068965517);
  g.add_edge(n54,n44,0.917431192661);
  g.add_edge(n54,n49,0.444444444444);
  g.add_edge(n54,n50,0.961538461538);
  g.add_edge(n54,n52,0.434782608696);
  g.add_edge(n54,n56,0.4329004329);
  g.add_edge(n54,n60,0.442477876106);
  g.add_edge(n54,n61,0.943396226415);
  g.add_edge(n54,n62,0.442477876106);
  g.add_edge(n54,n63,0.436681222707);
  g.add_edge(n54,n64,0.411522633745);
  g.add_edge(n54,n65,0.438596491228);
  g.add_edge(n54,n74,0.440528634361);
  g.add_edge(n54,n75,0.625);
  g.add_edge(n54,n77,0.806451612903);
  g.add_edge(n54,n80,0.438596491228);
  g.add_edge(n54,n83,0.436681222707);
  g.add_edge(n54,n85,0.45871559633);
  g.add_edge(n54,n87,0.448430493274);
  g.add_edge(n54,n88,0.442477876106);
  g.add_edge(n54,n89,0.440528634361);
  g.add_edge(n54,n92,0.429184549356);
  g.add_edge(n54,n94,0.671140939597);
  g.add_edge(n54,n95,0.724637681159);
  g.add_edge(n54,n96,0.452488687783);
  g.add_edge(n54,n98,0.438596491228);
  g.add_edge(n54,n99,0.446428571429);
  g.add_edge(n54,n102,0.751879699248);
  g.add_edge(n55,n9,1.26582278481);
  g.add_edge(n55,n10,0.584795321637);
  g.add_edge(n55,n12,1.66666666667);
  g.add_edge(n55,n20,0.813008130081);
  g.add_edge(n55,n24,1.3698630137);
  g.add_edge(n55,n26,1.28205128205);
  g.add_edge(n55,n28,1.75438596491);
  g.add_edge(n55,n30,1.53846153846);
  g.add_edge(n55,n31,0.401606425703);
  g.add_edge(n55,n37,1.42857142857);
  g.add_edge(n55,n44,1.72413793103);
  g.add_edge(n55,n50,0.892857142857);
  g.add_edge(n55,n54,0.434782608696);
  g.add_edge(n55,n61,1.75438596491);
  g.add_edge(n55,n64,0.408163265306);
  g.add_edge(n55,n75,0.884955752212);
  g.add_edge(n55,n77,1.28205128205);
  g.add_edge(n55,n94,0.900900900901);
  g.add_edge(n55,n95,1.0752688172);
  g.add_edge(n55,n102,1.23456790123);
  g.add_edge(n56,n28,1.81818181818);
  g.add_edge(n56,n37,1.47058823529);
  g.add_edge(n56,n44,1.78571428571);
  g.add_edge(n56,n77,1.31578947368);
  g.add_edge(n56,n94,0.917431192661);
  g.add_edge(n56,n95,1.0989010989);
  g.add_edge(n56,n102,1.25);
  g.add_edge(n57,n1,0.826446280992);
  g.add_edge(n57,n2,0.431034482759);
  g.add_edge(n57,n3,0.826446280992);
  g.add_edge(n57,n4,0.884955752212);
  g.add_edge(n57,n5,0.892857142857);
  g.add_edge(n57,n6,0.847457627119);
  g.add_edge(n57,n7,0.917431192661);
  g.add_edge(n57,n8,0.970873786408);
  g.add_edge(n57,n9,0.452488687783);
  g.add_edge(n57,n10,0.515463917526);
  g.add_edge(n57,n11,0.429184549356);
  g.add_edge(n57,n12,0.469483568075);
  g.add_edge(n57,n13,0.45871559633);
  g.add_edge(n57,n14,0.900900900901);
  g.add_edge(n57,n15,0.409836065574);
  g.add_edge(n57,n16,0.847457627119);
  g.add_edge(n57,n17,0.460829493088);
  g.add_edge(n57,n18,0.869565217391);
  g.add_edge(n57,n19,0.826446280992);
  g.add_edge(n57,n20,0.429184549356);
  g.add_edge(n57,n21,0.840336134454);
  g.add_edge(n57,n22,0.892857142857);
  g.add_edge(n57,n23,0.5);
  g.add_edge(n57,n24,0.438596491228);
  g.add_edge(n57,n25,0.462962962963);
  g.add_edge(n57,n26,0.4329004329);
  g.add_edge(n57,n27,0.448430493274);
  g.add_edge(n57,n28,0.497512437811);
  g.add_edge(n57,n29,0.462962962963);
  g.add_edge(n57,n30,0.440528634361);
  g.add_edge(n57,n31,0.763358778626);
  g.add_edge(n57,n32,33.3333333333);
  g.add_edge(n57,n33,0.900900900901);
  g.add_edge(n57,n34,0.917431192661);
  g.add_edge(n57,n35,0.505050505051);
  g.add_edge(n57,n36,1.78571428571);
  g.add_edge(n57,n37,0.462962962963);
  g.add_edge(n57,n38,0.462962962963);
  g.add_edge(n57,n39,0.425531914894);
  g.add_edge(n57,n40,0.740740740741);
  g.add_edge(n57,n41,1.78571428571);
  g.add_edge(n57,n42,0.925925925926);
  g.add_edge(n57,n43,7.14285714286);
  g.add_edge(n57,n44,0.442477876106);
  g.add_edge(n57,n45,0.869565217391);
  g.add_edge(n57,n46,0.819672131148);
  g.add_edge(n57,n47,0.473933649289);
  g.add_edge(n57,n48,0.47619047619);
  g.add_edge(n57,n49,0.917431192661);
  g.add_edge(n57,n50,2.22222222222);
  g.add_edge(n57,n51,0.420168067227);
  g.add_edge(n57,n52,0.884955752212);
  g.add_edge(n57,n53,0.446428571429);
  g.add_edge(n57,n54,0.636942675159);
  g.add_edge(n57,n55,0.884955752212);
  g.add_edge(n57,n56,0.892857142857);
  g.add_edge(n57,n58,0.819672131148);
  g.add_edge(n57,n59,0.884955752212);
  g.add_edge(n57,n60,0.917431192661);
  g.add_edge(n57,n61,0.473933649289);
  g.add_edge(n57,n62,0.892857142857);
  g.add_edge(n57,n63,0.892857142857);
  g.add_edge(n57,n64,0.694444444444);
  g.add_edge(n57,n65,0.900900900901);
  g.add_edge(n57,n66,0.440528634361);
  g.add_edge(n57,n67,0.806451612903);
  g.add_edge(n57,n68,0.423728813559);
  g.add_edge(n57,n69,0.456621004566);
  g.add_edge(n57,n70,0.826446280992);
  g.add_edge(n57,n71,0.462962962963);
  g.add_edge(n57,n72,5.88235294118);
  g.add_edge(n57,n73,0.429184549356);
  g.add_edge(n57,n74,0.909090909091);
  g.add_edge(n57,n75,0.425531914894);
  g.add_edge(n57,n76,0.819672131148);
  g.add_edge(n57,n77,0.473933649289);
  g.add_edge(n57,n78,0.909090909091);
  g.add_edge(n57,n79,0.45871559633);
  g.add_edge(n57,n80,0.8);
  g.add_edge(n57,n81,0.440528634361);
  g.add_edge(n57,n82,0.444444444444);
  g.add_edge(n57,n83,0.869565217391);
  g.add_edge(n57,n84,0.719424460432);
  g.add_edge(n57,n85,0.970873786408);
  g.add_edge(n57,n86,0.862068965517);
  g.add_edge(n57,n87,0.917431192661);
  g.add_edge(n57,n88,0.900900900901);
  g.add_edge(n57,n89,0.740740740741);
  g.add_edge(n57,n90,0.456621004566);
  g.add_edge(n57,n91,0.406504065041);
  g.add_edge(n57,n92,0.806451612903);
  g.add_edge(n57,n93,0.434782608696);
  g.add_edge(n57,n94,0.429184549356);
  g.add_edge(n57,n95,0.420168067227);
  g.add_edge(n57,n96,0.833333333333);
  g.add_edge(n57,n97,0.714285714286);
  g.add_edge(n57,n98,0.862068965517);
  g.add_edge(n57,n99,0.826446280992);
  g.add_edge(n57,n100,0.819672131148);
  g.add_edge(n57,n101,0.862068965517);
  g.add_edge(n57,n102,0.414937759336);
  g.add_edge(n58,n9,1.13636363636);
  g.add_edge(n58,n10,0.578034682081);
  g.add_edge(n58,n12,1.44927536232);
  g.add_edge(n58,n13,1.5873015873);
  g.add_edge(n58,n20,0.763358778626);
  g.add_edge(n58,n24,1.25);
  g.add_edge(n58,n26,1.12359550562);
  g.add_edge(n58,n28,1.49253731343);
  g.add_edge(n58,n30,1.31578947368);
  g.add_edge(n58,n32,25.0);
  g.add_edge(n58,n37,1.23456790123);
  g.add_edge(n58,n43,3.125);
  g.add_edge(n58,n44,1.44927536232);
  g.add_edge(n58,n47,0.78125);
  g.add_edge(n58,n50,0.877192982456);
  g.add_edge(n58,n54,0.423728813559);
  g.add_edge(n58,n61,1.53846153846);
  g.add_edge(n58,n75,0.806451612903);
  g.add_edge(n58,n77,1.12359550562);
  g.add_edge(n58,n94,0.840336134454);
  g.add_edge(n58,n95,0.980392156863);
  g.add_edge(n58,n102,1.11111111111);
  g.add_edge(n59,n2,0.877192982456);
  g.add_edge(n59,n9,1.31578947368);
  g.add_edge(n59,n10,0.584795321637);
  g.add_edge(n59,n11,1.14942528736);
  g.add_edge(n59,n12,1.75438596491);
  g.add_edge(n59,n13,1.81818181818);
  g.add_edge(n59,n15,0.862068965517);
  g.add_edge(n59,n17,1.5625);
  g.add_edge(n59,n20,0.813008130081);
  g.add_edge(n59,n23,0.507614213198);
  g.add_edge(n59,n24,1.47058823529);
  g.add_edge(n59,n25,1.0);
  g.add_edge(n59,n26,1.2987012987);
  g.add_edge(n59,n28,1.85185185185);
  g.add_edge(n59,n29,1.5873015873);
  g.add_edge(n59,n30,1.5625);
  g.add_edge(n59,n32,25.0);
  g.add_edge(n59,n35,1.96078431373);
  g.add_edge(n59,n36,0.675675675676);
  g.add_edge(n59,n37,1.44927536232);
  g.add_edge(n59,n38,1.69491525424);
  g.add_edge(n59,n39,0.909090909091);
  g.add_edge(n59,n41,2.5641025641);
  g.add_edge(n59,n43,3.0303030303);
  g.add_edge(n59,n44,1.75438596491);
  g.add_edge(n59,n47,0.826446280992);
  g.add_edge(n59,n48,1.92307692308);
  g.add_edge(n59,n50,0.847457627119);
  g.add_edge(n59,n51,1.0752688172);
  g.add_edge(n59,n53,1.47058823529);
  g.add_edge(n59,n54,0.431034482759);
  g.add_edge(n59,n61,1.85185185185);
  g.add_edge(n59,n64,0.411522633745);
  g.add_edge(n59,n66,1.14942528736);
  g.add_edge(n59,n68,0.990099009901);
  g.add_edge(n59,n69,1.02040816327);
  g.add_edge(n59,n71,0.934579439252);
  g.add_edge(n59,n72,1.53846153846);
  g.add_edge(n59,n73,1.26582278481);
  g.add_edge(n59,n75,0.892857142857);
  g.add_edge(n59,n77,1.33333333333);
  g.add_edge(n59,n79,1.04166666667);
  g.add_edge(n59,n81,1.44927536232);
  g.add_edge(n59,n82,1.14942528736);
  g.add_edge(n59,n90,0.934579439252);
  g.add_edge(n59,n91,1.19047619048);
  g.add_edge(n59,n93,0.900900900901);
  g.add_edge(n59,n94,0.943396226415);
  g.add_edge(n59,n95,1.11111111111);
  g.add_edge(n59,n102,1.23456790123);
  g.add_edge(n60,n9,1.33333333333);
  g.add_edge(n60,n10,0.606060606061);
  g.add_edge(n60,n12,1.78571428571);
  g.add_edge(n60,n24,1.49253731343);
  g.add_edge(n60,n28,1.81818181818);
  g.add_edge(n60,n30,1.61290322581);
  g.add_edge(n60,n37,1.51515151515);
  g.add_edge(n60,n44,1.85185185185);
  g.add_edge(n60,n61,1.85185185185);
  g.add_edge(n60,n64,0.413223140496);
  g.add_edge(n60,n75,0.917431192661);
  g.add_edge(n60,n77,1.31578947368);
  g.add_edge(n60,n94,0.917431192661);
  g.add_edge(n60,n95,1.12359550562);
  g.add_edge(n60,n102,1.26582278481);
  g.add_edge(n61,n24,0.425531914894);
  g.add_edge(n61,n28,0.429184549356);
  g.add_edge(n61,n49,1.88679245283);
  g.add_edge(n61,n52,1.75438596491);
  g.add_edge(n61,n56,1.81818181818);
  g.add_edge(n61,n62,1.92307692308);
  g.add_edge(n61,n65,1.78571428571);
  g.add_edge(n61,n74,1.81818181818);
  g.add_edge(n61,n77,0.404858299595);
  g.add_edge(n61,n80,1.69491525424);
  g.add_edge(n61,n85,1.72413793103);
  g.add_edge(n61,n87,2.04081632653);
  g.add_edge(n61,n89,1.42857142857);
  g.add_edge(n61,n92,1.47058823529);
  g.add_edge(n61,n94,0.462962962963);
  g.add_edge(n61,n95,0.404858299595);
  g.add_edge(n61,n98,1.5873015873);
  g.add_edge(n61,n99,1.72413793103);
  g.add_edge(n61,n102,0.413223140496);
  g.add_edge(n62,n94,0.980392156863);
  g.add_edge(n63,n12,1.72413793103);
  g.add_edge(n63,n24,1.44927536232);
  g.add_edge(n63,n28,1.88679245283);
  g.add_edge(n63,n30,1.5625);
  g.add_edge(n63,n37,1.47058823529);
  g.add_edge(n63,n44,1.72413793103);
  g.add_edge(n63,n61,1.92307692308);
  g.add_edge(n63,n64,0.413223140496);
  g.add_edge(n63,n75,0.909090909091);
  g.add_edge(n63,n77,1.35135135135);
  g.add_edge(n63,n94,0.961538461538);
  g.add_edge(n63,n95,1.11111111111);
  g.add_edge(n63,n102,1.25);
  g.add_edge(n64,n3,0.431034482759);
  g.add_edge(n64,n22,0.414937759336);
  g.add_edge(n64,n24,0.970873786408);
  g.add_edge(n64,n28,1.03092783505);
  g.add_edge(n64,n30,0.970873786408);
  g.add_edge(n64,n37,0.925925925926);
  g.add_edge(n64,n44,1.03092783505);
  g.add_edge(n64,n49,0.418410041841);
  g.add_edge(n64,n52,0.403225806452);
  g.add_edge(n64,n56,0.404858299595);
  g.add_edge(n64,n61,1.06382978723);
  g.add_edge(n64,n62,0.42194092827);
  g.add_edge(n64,n74,0.414937759336);
  g.add_edge(n64,n77,0.862068965517);
  g.add_edge(n64,n80,0.409836065574);
  g.add_edge(n64,n85,0.42194092827);
  g.add_edge(n64,n87,0.42194092827);
  g.add_edge(n64,n89,0.404858299595);
  g.add_edge(n64,n92,0.404858299595);
  g.add_edge(n64,n94,0.684931506849);
  g.add_edge(n64,n95,0.751879699248);
  g.add_edge(n64,n98,0.408163265306);
  g.add_edge(n64,n99,0.416666666667);
  g.add_edge(n64,n102,0.877192982456);
  g.add_edge(n65,n28,1.75438596491);
  g.add_edge(n65,n94,0.892857142857);
  g.add_edge(n65,n95,1.06382978723);
  g.add_edge(n65,n102,1.26582278481);
  g.add_edge(n66,n1,1.04166666667);
  g.add_edge(n66,n2,0.456621004566);
  g.add_edge(n66,n3,1.0);
  g.add_edge(n66,n5,1.11111111111);
  g.add_edge(n66,n7,1.11111111111);
  g.add_edge(n66,n10,0.602409638554);
  g.add_edge(n66,n12,0.438596491228);
  g.add_edge(n66,n13,0.440528634361);
  g.add_edge(n66,n20,0.469483568075);
  g.add_edge(n66,n21,1.05263157895);
  g.add_edge(n66,n22,1.21951219512);
  g.add_edge(n66,n24,0.440528634361);
  g.add_edge(n66,n28,0.425531914894);
  g.add_edge(n66,n31,0.970873786408);
  g.add_edge(n66,n32,50.0);
  g.add_edge(n66,n33,1.12359550562);
  g.add_edge(n66,n34,1.16279069767);
  g.add_edge(n66,n35,0.454545454545);
  g.add_edge(n66,n39,0.469483568075);
  g.add_edge(n66,n42,1.13636363636);
  g.add_edge(n66,n43,11.1111111111);
  g.add_edge(n66,n45,1.0989010989);
  g.add_edge(n66,n46,0.943396226415);
  g.add_edge(n66,n47,0.523560209424);
  g.add_edge(n66,n49,1.16279069767);
  g.add_edge(n66,n50,3.7037037037);
  g.add_edge(n66,n52,1.12359550562);
  g.add_edge(n66,n53,0.420168067227);
  g.add_edge(n66,n54,0.735294117647);
  g.add_edge(n66,n55,1.11111111111);
  g.add_edge(n66,n56,1.13636363636);
  g.add_edge(n66,n58,1.0101010101);
  g.add_edge(n66,n60,1.14942528736);
  g.add_edge(n66,n61,0.403225806452);
  g.add_edge(n66,n62,1.21951219512);
  g.add_edge(n66,n63,1.17647058824);
  g.add_edge(n66,n64,0.769230769231);
  g.add_edge(n66,n65,1.0989010989);
  g.add_edge(n66,n67,0.990099009901);
  g.add_edge(n66,n70,1.0);
  g.add_edge(n66,n71,0.414937759336);
  g.add_edge(n66,n74,1.14942528736);
  g.add_edge(n66,n77,0.406504065041);
  g.add_edge(n66,n80,1.14942528736);
  g.add_edge(n66,n83,1.0752688172);
  g.add_edge(n66,n85,1.16279069767);
  g.add_edge(n66,n87,1.23456790123);
  g.add_edge(n66,n88,1.17647058824);
  g.add_edge(n66,n89,0.990099009901);
  g.add_edge(n66,n91,0.438596491228);
  g.add_edge(n66,n92,0.980392156863);
  g.add_edge(n66,n93,0.46511627907);
  g.add_edge(n66,n94,0.406504065041);
  g.add_edge(n66,n96,1.20481927711);
  g.add_edge(n66,n97,0.833333333333);
  g.add_edge(n66,n98,1.05263157895);
  g.add_edge(n66,n99,1.17647058824);
  g.add_edge(n66,n101,1.0752688172);
  g.add_edge(n66,n102,0.404858299595);
  g.add_edge(n67,n9,1.08695652174);
  g.add_edge(n67,n10,0.555555555556);
  g.add_edge(n67,n12,1.40845070423);
  g.add_edge(n67,n13,1.53846153846);
  g.add_edge(n67,n20,0.740740740741);
  g.add_edge(n67,n24,1.17647058824);
  g.add_edge(n67,n26,1.12359550562);
  g.add_edge(n67,n28,1.53846153846);
  g.add_edge(n67,n30,1.28205128205);
  g.add_edge(n67,n37,1.23456790123);
  g.add_edge(n67,n43,3.44827586207);
  g.add_edge(n67,n44,1.40845070423);
  g.add_edge(n67,n47,0.77519379845);
  g.add_edge(n67,n50,0.869565217391);
  g.add_edge(n67,n54,0.431034482759);
  g.add_edge(n67,n61,1.49253731343);
  g.add_edge(n67,n64,0.409836065574);
  g.add_edge(n67,n70,0.401606425703);
  g.add_edge(n67,n75,0.806451612903);
  g.add_edge(n67,n77,1.14942528736);
  g.add_edge(n67,n94,0.862068965517);
  g.add_edge(n67,n95,0.943396226415);
  g.add_edge(n67,n102,1.06382978723);
  g.add_edge(n68,n1,0.909090909091);
  g.add_edge(n68,n3,0.877192982456);
  g.add_edge(n68,n5,0.961538461538);
  g.add_edge(n68,n9,0.431034482759);
  g.add_edge(n68,n10,0.558659217877);
  g.add_edge(n68,n12,0.469483568075);
  g.add_edge(n68,n13,0.473933649289);
  g.add_edge(n68,n20,0.46511627907);
  g.add_edge(n68,n22,1.04166666667);
  g.add_edge(n68,n24,0.452488687783);
  g.add_edge(n68,n26,0.408163265306);
  g.add_edge(n68,n28,0.469483568075);
  g.add_edge(n68,n30,0.414937759336);
  g.add_edge(n68,n31,0.854700854701);
  g.add_edge(n68,n32,33.3333333333);
  g.add_edge(n68,n34,1.02040816327);
  g.add_edge(n68,n35,0.497512437811);
  g.add_edge(n68,n37,0.438596491228);
  g.add_edge(n68,n43,9.09090909091);
  g.add_edge(n68,n44,0.429184549356);
  g.add_edge(n68,n47,0.510204081633);
  g.add_edge(n68,n49,1.03092783505);
  g.add_edge(n68,n50,3.33333333333);
  g.add_edge(n68,n52,0.990099009901);
  g.add_edge(n68,n53,0.438596491228);
  g.add_edge(n68,n54,0.675675675676);
  g.add_edge(n68,n55,0.961538461538);
  g.add_edge(n68,n56,0.980392156863);
  g.add_edge(n68,n58,0.892857142857);
  g.add_edge(n68,n60,1.0);
  g.add_edge(n68,n61,0.438596491228);
  g.add_edge(n68,n62,1.02040816327);
  g.add_edge(n68,n63,0.990099009901);
  g.add_edge(n68,n64,0.709219858156);
  g.add_edge(n68,n65,0.952380952381);
  g.add_edge(n68,n67,0.862068965517);
  g.add_edge(n68,n70,0.877192982456);
  g.add_edge(n68,n71,0.404858299595);
  g.add_edge(n68,n74,1.0);
  g.add_edge(n68,n75,0.411522633745);
  g.add_edge(n68,n77,0.423728813559);
  g.add_edge(n68,n79,0.408163265306);
  g.add_edge(n68,n80,0.980392156863);
  g.add_edge(n68,n83,0.934579439252);
  g.add_edge(n68,n85,1.02040816327);
  g.add_edge(n68,n87,1.03092783505);
  g.add_edge(n68,n88,1.0101010101);
  g.add_edge(n68,n89,0.917431192661);
  g.add_edge(n68,n92,0.869565217391);
  g.add_edge(n68,n94,0.409836065574);
  g.add_edge(n68,n96,1.0101010101);
  g.add_edge(n68,n98,0.943396226415);
  g.add_edge(n68,n99,0.990099009901);
  g.add_edge(n68,n101,0.943396226415);
  g.add_edge(n68,n102,0.4329004329);
  g.add_edge(n69,n1,0.952380952381);
  g.add_edge(n69,n2,0.462962962963);
  g.add_edge(n69,n3,0.925925925926);
  g.add_edge(n69,n5,1.02040816327);
  g.add_edge(n69,n6,0.970873786408);
  g.add_edge(n69,n7,1.0101010101);
  g.add_edge(n69,n8,1.16279069767);
  g.add_edge(n69,n9,0.446428571429);
  g.add_edge(n69,n10,0.588235294118);
  g.add_edge(n69,n11,0.434782608696);
  g.add_edge(n69,n12,0.490196078431);
  g.add_edge(n69,n13,0.502512562814);
  g.add_edge(n69,n14,1.04166666667);
  g.add_edge(n69,n15,0.4329004329);
  g.add_edge(n69,n16,0.970873786408);
  g.add_edge(n69,n17,0.440528634361);
  g.add_edge(n69,n18,1.0);
  g.add_edge(n69,n20,0.460829493088);
  g.add_edge(n69,n21,0.961538461538);
  g.add_edge(n69,n22,1.0752688172);
  g.add_edge(n69,n23,0.549450549451);
  g.add_edge(n69,n24,0.502512562814);
  g.add_edge(n69,n25,0.444444444444);
  g.add_edge(n69,n26,0.42735042735);
  g.add_edge(n69,n28,0.492610837438);
  g.add_edge(n69,n29,0.456621004566);
  g.add_edge(n69,n30,0.440528634361);
  g.add_edge(n69,n31,0.869565217391);
  g.add_edge(n69,n32,50.0);
  g.add_edge(n69,n33,1.02040816327);
  g.add_edge(n69,n34,1.06382978723);
  g.add_edge(n69,n35,0.510204081633);
  g.add_edge(n69,n36,1.69491525424);
  g.add_edge(n69,n37,0.446428571429);
  g.add_edge(n69,n38,0.5);
  g.add_edge(n69,n39,0.49504950495);
  g.add_edge(n69,n41,1.75438596491);
  g.add_edge(n69,n42,1.03092783505);
  g.add_edge(n69,n43,12.5);
  g.add_edge(n69,n44,0.446428571429);
  g.add_edge(n69,n45,1.0);
  g.add_edge(n69,n46,0.892857142857);
  g.add_edge(n69,n47,0.540540540541);
  g.add_edge(n69,n48,0.518134715026);
  g.add_edge(n69,n49,1.04166666667);
  g.add_edge(n69,n50,3.22580645161);
  g.add_edge(n69,n51,0.444444444444);
  g.add_edge(n69,n52,1.04166666667);
  g.add_edge(n69,n53,0.460829493088);
  g.add_edge(n69,n54,0.699300699301);
  g.add_edge(n69,n55,1.0101010101);
  g.add_edge(n69,n56,1.03092783505);
  g.add_edge(n69,n58,0.900900900901);
  g.add_edge(n69,n60,1.04166666667);
  g.add_edge(n69,n61,0.462962962963);
  g.add_edge(n69,n62,1.05263157895);
  g.add_edge(n69,n63,1.02040816327);
  g.add_edge(n69,n64,0.740740740741);
  g.add_edge(n69,n65,1.0);
  g.add_edge(n69,n66,0.418410041841);
  g.add_edge(n69,n67,0.892857142857);
  g.add_edge(n69,n68,0.414937759336);
  g.add_edge(n69,n70,0.917431192661);
  g.add_edge(n69,n71,0.431034482759);
  g.add_edge(n69,n72,25.0);
  g.add_edge(n69,n73,0.444444444444);
  g.add_edge(n69,n74,1.03092783505);
  g.add_edge(n69,n75,0.4329004329);
  g.add_edge(n69,n76,0.934579439252);
  g.add_edge(n69,n77,0.45045045045);
  g.add_edge(n69,n78,1.04166666667);
  g.add_edge(n69,n79,0.425531914894);
  g.add_edge(n69,n80,1.03092783505);
  g.add_edge(n69,n81,0.438596491228);
  g.add_edge(n69,n82,0.403225806452);
  g.add_edge(n69,n83,0.980392156863);
  g.add_edge(n69,n84,0.78125);
  g.add_edge(n69,n85,1.11111111111);
  g.add_edge(n69,n86,1.0101010101);
  g.add_edge(n69,n87,1.08695652174);
  g.add_edge(n69,n88,1.03092783505);
  g.add_edge(n69,n89,0.980392156863);
  g.add_edge(n69,n90,0.434782608696);
  g.add_edge(n69,n91,0.490196078431);
  g.add_edge(n69,n92,0.869565217391);
  g.add_edge(n69,n93,0.47619047619);
  g.add_edge(n69,n94,0.431034482759);
  g.add_edge(n69,n95,0.411522633745);
  g.add_edge(n69,n96,1.08695652174);
  g.add_edge(n69,n97,0.793650793651);
  g.add_edge(n69,n98,0.990099009901);
  g.add_edge(n69,n99,1.0752688172);
  g.add_edge(n69,n101,0.980392156863);
  g.add_edge(n69,n102,0.460829493088);
  g.add_edge(n70,n3,0.413223140496);
  g.add_edge(n70,n9,1.11111111111);
  g.add_edge(n70,n10,0.571428571429);
  g.add_edge(n70,n12,1.38888888889);
  g.add_edge(n70,n13,1.5873015873);
  g.add_edge(n70,n20,0.757575757576);
  g.add_edge(n70,n24,1.20481927711);
  g.add_edge(n70,n26,1.16279069767);
  g.add_edge(n70,n28,1.40845070423);
  g.add_edge(n70,n30,1.35135135135);
  g.add_edge(n70,n31,0.406504065041);
  g.add_edge(n70,n34,0.409836065574);
  g.add_edge(n70,n37,1.26582278481);
  g.add_edge(n70,n43,4.0);
  g.add_edge(n70,n44,1.42857142857);
  g.add_edge(n70,n49,0.401606425703);
  g.add_edge(n70,n50,0.934579439252);
  g.add_edge(n70,n54,0.446428571429);
  g.add_edge(n70,n61,1.49253731343);
  g.add_edge(n70,n62,0.401606425703);
  g.add_edge(n70,n75,0.826446280992);
  g.add_edge(n70,n77,1.0989010989);
  g.add_edge(n70,n85,0.401606425703);
  g.add_edge(n70,n87,0.406504065041);
  g.add_edge(n70,n94,0.826446280992);
  g.add_edge(n70,n95,0.970873786408);
  g.add_edge(n70,n96,0.404858299595);
  g.add_edge(n70,n99,0.404858299595);
  g.add_edge(n70,n102,1.11111111111);
  g.add_edge(n71,n1,0.877192982456);
  g.add_edge(n71,n3,0.854700854701);
  g.add_edge(n71,n5,0.917431192661);
  g.add_edge(n71,n9,0.446428571429);
  g.add_edge(n71,n10,0.564971751412);
  g.add_edge(n71,n12,0.505050505051);
  g.add_edge(n71,n13,0.515463917526);
  g.add_edge(n71,n20,0.478468899522);
  g.add_edge(n71,n22,0.980392156863);
  g.add_edge(n71,n24,0.502512562814);
  g.add_edge(n71,n26,0.434782608696);
  g.add_edge(n71,n28,0.497512437811);
  g.add_edge(n71,n30,0.444444444444);
  g.add_edge(n71,n31,0.806451612903);
  g.add_edge(n71,n32,50.0);
  g.add_edge(n71,n34,0.961538461538);
  g.add_edge(n71,n37,0.452488687783);
  g.add_edge(n71,n43,11.1111111111);
  g.add_edge(n71,n44,0.467289719626);
  g.add_edge(n71,n47,0.558659217877);
  g.add_edge(n71,n49,0.970873786408);
  g.add_edge(n71,n50,2.5641025641);
  g.add_edge(n71,n52,0.934579439252);
  g.add_edge(n71,n53,0.460829493088);
  g.add_edge(n71,n54,0.649350649351);
  g.add_edge(n71,n55,0.909090909091);
  g.add_edge(n71,n56,0.925925925926);
  g.add_edge(n71,n58,0.847457627119);
  g.add_edge(n71,n60,0.943396226415);
  g.add_edge(n71,n61,0.47619047619);
  g.add_edge(n71,n62,0.980392156863);
  g.add_edge(n71,n63,0.934579439252);
  g.add_edge(n71,n64,0.694444444444);
  g.add_edge(n71,n65,0.900900900901);
  g.add_edge(n71,n67,0.826446280992);
  g.add_edge(n71,n70,0.840336134454);
  g.add_edge(n71,n74,0.943396226415);
  g.add_edge(n71,n75,0.401606425703);
  g.add_edge(n71,n77,0.456621004566);
  g.add_edge(n71,n79,0.409836065574);
  g.add_edge(n71,n80,0.943396226415);
  g.add_edge(n71,n83,0.892857142857);
  g.add_edge(n71,n85,0.970873786408);
  g.add_edge(n71,n87,1.0);
  g.add_edge(n71,n88,0.961538461538);
  g.add_edge(n71,n89,0.884955752212);
  g.add_edge(n71,n92,0.826446280992);
  g.add_edge(n71,n94,0.420168067227);
  g.add_edge(n71,n95,0.409836065574);
  g.add_edge(n71,n96,0.990099009901);
  g.add_edge(n71,n98,0.884955752212);
  g.add_edge(n71,n99,0.961538461538);
  g.add_edge(n71,n101,0.892857142857);
  g.add_edge(n71,n102,0.442477876106);
  g.add_edge(n72,n1,1.53846153846);
  g.add_edge(n72,n2,14.2857142857);
  g.add_edge(n72,n3,1.85185185185);
  g.add_edge(n72,n5,1.5625);
  g.add_edge(n72,n6,1.6393442623);
  g.add_edge(n72,n7,1.53846153846);
  g.add_edge(n72,n8,1.61290322581);
  g.add_edge(n72,n9,10.0);
  g.add_edge(n72,n10,2.63157894737);
  g.add_edge(n72,n11,10.0);
  g.add_edge(n72,n12,16.6666666667);
  g.add_edge(n72,n13,16.6666666667);
  g.add_edge(n72,n14,1.53846153846);
  g.add_edge(n72,n15,9.09090909091);
  g.add_edge(n72,n16,1.61290322581);
  g.add_edge(n72,n17,25.0);
  g.add_edge(n72,n18,1.53846153846);
  g.add_edge(n72,n20,9.09090909091);
  g.add_edge(n72,n21,1.5625);
  g.add_edge(n72,n22,1.53846153846);
  g.add_edge(n72,n23,2.27272727273);
  g.add_edge(n72,n24,14.2857142857);
  g.add_edge(n72,n25,10.0);
  g.add_edge(n72,n26,16.6666666667);
  g.add_edge(n72,n28,100.0);
  g.add_edge(n72,n29,33.3333333333);
  g.add_edge(n72,n30,20.0);
  g.add_edge(n72,n31,1.61290322581);
  g.add_edge(n72,n33,1.53846153846);
  g.add_edge(n72,n34,1.53846153846);
  g.add_edge(n72,n35,20.0);
  g.add_edge(n72,n37,25.0);
  g.add_edge(n72,n38,14.2857142857);
  g.add_edge(n72,n39,7.14285714286);
  g.add_edge(n72,n42,1.53846153846);
  g.add_edge(n72,n44,20.0);
  g.add_edge(n72,n45,1.53846153846);
  g.add_edge(n72,n46,1.53846153846);
  g.add_edge(n72,n47,10.0);
  g.add_edge(n72,n48,16.6666666667);
  g.add_edge(n72,n49,1.61290322581);
  g.add_edge(n72,n50,1.5625);
  g.add_edge(n72,n51,6.25);
  g.add_edge(n72,n52,1.53846153846);
  g.add_edge(n72,n53,9.09090909091);
  g.add_edge(n72,n54,1.78571428571);
  g.add_edge(n72,n55,1.66666666667);
  g.add_edge(n72,n56,1.53846153846);
  g.add_edge(n72,n58,1.53846153846);
  g.add_edge(n72,n60,1.5873015873);
  g.add_edge(n72,n61,33.3333333333);
  g.add_edge(n72,n62,1.53846153846);
  g.add_edge(n72,n63,1.53846153846);
  g.add_edge(n72,n64,1.72413793103);
  g.add_edge(n72,n65,1.53846153846);
  g.add_edge(n72,n66,16.6666666667);
  g.add_edge(n72,n67,1.53846153846);
  g.add_edge(n72,n68,12.5);
  g.add_edge(n72,n70,1.6393442623);
  g.add_edge(n72,n71,10.0);
  g.add_edge(n72,n73,9.09090909091);
  g.add_edge(n72,n74,1.61290322581);
  g.add_edge(n72,n75,5.0);
  g.add_edge(n72,n76,1.5625);
  g.add_edge(n72,n77,33.3333333333);
  g.add_edge(n72,n78,1.53846153846);
  g.add_edge(n72,n79,16.6666666667);
  g.add_edge(n72,n80,1.53846153846);
  g.add_edge(n72,n81,20.0);
  g.add_edge(n72,n82,16.6666666667);
  g.add_edge(n72,n83,1.5873015873);
  g.add_edge(n72,n84,1.6393442623);
  g.add_edge(n72,n85,1.61290322581);
  g.add_edge(n72,n86,1.53846153846);
  g.add_edge(n72,n87,1.5873015873);
  g.add_edge(n72,n88,1.5625);
  g.add_edge(n72,n89,1.5625);
  g.add_edge(n72,n90,10.0);
  g.add_edge(n72,n91,7.14285714286);
  g.add_edge(n72,n92,1.6393442623);
  g.add_edge(n72,n93,4.16666666667);
  g.add_edge(n72,n94,8.33333333333);
  g.add_edge(n72,n95,9.09090909091);
  g.add_edge(n72,n96,1.5873015873);
  g.add_edge(n72,n97,1.5873015873);
  g.add_edge(n72,n98,1.5625);
  g.add_edge(n72,n99,1.61290322581);
  g.add_edge(n72,n101,1.5625);
  g.add_edge(n72,n102,7.69230769231);
  g.add_edge(n73,n1,1.16279069767);
  g.add_edge(n73,n3,1.12359550562);
  g.add_edge(n73,n5,1.28205128205);
  g.add_edge(n73,n7,1.28205128205);
  g.add_edge(n73,n10,0.59880239521);
  g.add_edge(n73,n12,0.413223140496);
  g.add_edge(n73,n13,0.404858299595);
  g.add_edge(n73,n20,0.507614213198);
  g.add_edge(n73,n21,1.17647058824);
  g.add_edge(n73,n22,1.35135135135);
  g.add_edge(n73,n24,0.416666666667);
  g.add_edge(n73,n28,0.4329004329);
  g.add_edge(n73,n31,1.03092783505);
  g.add_edge(n73,n32,50.0);
  g.add_edge(n73,n34,1.2987012987);
  g.add_edge(n73,n35,0.436681222707);
  g.add_edge(n73,n37,0.403225806452);
  g.add_edge(n73,n42,1.31578947368);
  g.add_edge(n73,n43,12.5);
  g.add_edge(n73,n46,1.05263157895);
  g.add_edge(n73,n47,0.515463917526);
  g.add_edge(n73,n49,1.31578947368);
  g.add_edge(n73,n50,3.84615384615);
  g.add_edge(n73,n52,1.26582278481);
  g.add_edge(n73,n53,0.401606425703);
  g.add_edge(n73,n54,0.78125);
  g.add_edge(n73,n55,1.25);
  g.add_edge(n73,n56,1.28205128205);
  g.add_edge(n73,n58,1.12359550562);
  g.add_edge(n73,n60,1.31578947368);
  g.add_edge(n73,n62,1.31578947368);
  g.add_edge(n73,n63,1.26582278481);
  g.add_edge(n73,n64,0.847457627119);
  g.add_edge(n73,n65,1.26582278481);
  g.add_edge(n73,n67,1.0989010989);
  g.add_edge(n73,n68,0.414937759336);
  g.add_edge(n73,n70,1.12359550562);
  g.add_edge(n73,n71,0.440528634361);
  g.add_edge(n73,n74,1.31578947368);
  g.add_edge(n73,n75,0.401606425703);
  g.add_edge(n73,n77,0.416666666667);
  g.add_edge(n73,n79,0.420168067227);
  g.add_edge(n73,n80,1.13636363636);
  g.add_edge(n73,n83,1.20481927711);
  g.add_edge(n73,n85,1.35135135135);
  g.add_edge(n73,n87,1.35135135135);
  g.add_edge(n73,n88,1.31578947368);
  g.add_edge(n73,n89,0.990099009901);
  g.add_edge(n73,n91,0.404858299595);
  g.add_edge(n73,n92,1.0989010989);
  g.add_edge(n73,n93,0.446428571429);
  g.add_edge(n73,n94,0.42194092827);
  g.add_edge(n73,n96,1.19047619048);
  g.add_edge(n73,n97,0.925925925926);
  g.add_edge(n73,n98,1.17647058824);
  g.add_edge(n73,n99,1.17647058824);
  g.add_edge(n73,n101,1.21951219512);
  g.add_edge(n74,n28,1.81818181818);
  g.add_edge(n74,n37,1.49253731343);
  g.add_edge(n74,n44,1.81818181818);
  g.add_edge(n74,n77,1.33333333333);
  g.add_edge(n74,n94,0.952380952381);
  g.add_edge(n74,n95,1.11111111111);
  g.add_edge(n74,n102,1.28205128205);
  g.add_edge(n75,n3,0.847457627119);
  g.add_edge(n75,n22,0.917431192661);
  g.add_edge(n75,n24,0.469483568075);
  g.add_edge(n75,n28,0.473933649289);
  g.add_edge(n75,n30,0.425531914894);
  g.add_edge(n75,n37,0.423728813559);
  g.add_edge(n75,n44,0.431034482759);
  g.add_edge(n75,n49,0.934579439252);
  g.add_edge(n75,n52,0.892857142857);
  g.add_edge(n75,n56,0.900900900901);
  g.add_edge(n75,n61,0.446428571429);
  g.add_edge(n75,n62,0.917431192661);
  g.add_edge(n75,n64,0.662251655629);
  g.add_edge(n75,n65,0.892857142857);
  g.add_edge(n75,n74,0.917431192661);
  g.add_edge(n75,n77,0.440528634361);
  g.add_edge(n75,n80,0.884955752212);
  g.add_edge(n75,n85,0.952380952381);
  g.add_edge(n75,n87,0.943396226415);
  g.add_edge(n75,n89,0.813008130081);
  g.add_edge(n75,n92,0.793650793651);
  g.add_edge(n75,n94,0.413223140496);
  g.add_edge(n75,n98,0.847457627119);
  g.add_edge(n75,n99,0.917431192661);
  g.add_edge(n75,n102,0.404858299595);
  g.add_edge(n76,n2,0.813008130081);
  g.add_edge(n76,n9,1.20481927711);
  g.add_edge(n76,n10,0.571428571429);
  g.add_edge(n76,n11,1.0752688172);
  g.add_edge(n76,n12,1.5625);
  g.add_edge(n76,n13,1.66666666667);
  g.add_edge(n76,n15,0.813008130081);
  g.add_edge(n76,n17,1.40845070423);
  g.add_edge(n76,n20,0.757575757576);
  g.add_edge(n76,n23,0.487804878049);
  g.add_edge(n76,n24,1.2987012987);
  g.add_edge(n76,n25,0.934579439252);
  g.add_edge(n76,n26,1.19047619048);
  g.add_edge(n76,n28,1.5873015873);
  g.add_edge(n76,n29,1.42857142857);
  g.add_edge(n76,n30,1.40845070423);
  g.add_edge(n76,n32,25.0);
  g.add_edge(n76,n35,1.69491525424);
  g.add_edge(n76,n36,0.689655172414);
  g.add_edge(n76,n37,1.28205128205);
  g.add_edge(n76,n38,1.49253731343);
  g.add_edge(n76,n39,0.862068965517);
  g.add_edge(n76,n41,2.38095238095);
  g.add_edge(n76,n43,3.125);
  g.add_edge(n76,n44,1.51515151515);
  g.add_edge(n76,n47,0.78125);
  g.add_edge(n76,n48,1.6393442623);
  g.add_edge(n76,n50,0.877192982456);
  g.add_edge(n76,n53,1.2987012987);
  g.add_edge(n76,n54,0.425531914894);
  g.add_edge(n76,n61,1.66666666667);
  g.add_edge(n76,n64,0.401606425703);
  g.add_edge(n76,n66,1.04166666667);
  g.add_edge(n76,n68,0.925925925926);
  g.add_edge(n76,n71,0.877192982456);
  g.add_edge(n76,n73,1.16279069767);
  g.add_edge(n76,n75,0.826446280992);
  g.add_edge(n76,n77,1.19047619048);
  g.add_edge(n76,n79,0.961538461538);
  g.add_edge(n76,n81,1.31578947368);
  g.add_edge(n76,n90,0.862068965517);
  g.add_edge(n76,n91,1.0989010989);
  g.add_edge(n76,n93,0.833333333333);
  g.add_edge(n76,n94,0.869565217391);
  g.add_edge(n76,n95,1.03092783505);
  g.add_edge(n76,n102,1.13636363636);
  g.add_edge(n77,n28,0.440528634361);
  g.add_edge(n77,n52,1.2987012987);
  g.add_edge(n77,n62,1.38888888889);
  g.add_edge(n77,n65,1.26582278481);
  g.add_edge(n77,n87,1.47058823529);
  g.add_edge(n77,n89,1.23456790123);
  g.add_edge(n77,n92,1.11111111111);
  g.add_edge(n77,n94,0.434782608696);
  g.add_edge(n77,n95,0.408163265306);
  g.add_edge(n77,n98,1.21951219512);
  g.add_edge(n77,n99,1.33333333333);
  g.add_edge(n77,n102,0.4329004329);
  g.add_edge(n78,n2,0.900900900901);
  g.add_edge(n78,n9,1.35135135135);
  g.add_edge(n78,n10,0.59880239521);
  g.add_edge(n78,n11,1.16279069767);
  g.add_edge(n78,n12,1.72413793103);
  g.add_edge(n78,n13,1.81818181818);
  g.add_edge(n78,n15,0.884955752212);
  g.add_edge(n78,n17,1.61290322581);
  g.add_edge(n78,n20,0.833333333333);
  g.add_edge(n78,n23,0.515463917526);
  g.add_edge(n78,n24,1.49253731343);
  g.add_edge(n78,n25,1.02040816327);
  g.add_edge(n78,n26,1.33333333333);
  g.add_edge(n78,n28,1.88679245283);
  g.add_edge(n78,n29,1.6393442623);
  g.add_edge(n78,n30,1.61290322581);
  g.add_edge(n78,n32,25.0);
  g.add_edge(n78,n35,2.04081632653);
  g.add_edge(n78,n36,0.680272108844);
  g.add_edge(n78,n37,1.49253731343);
  g.add_edge(n78,n38,1.75438596491);
  g.add_edge(n78,n39,0.943396226415);
  g.add_edge(n78,n41,2.63157894737);
  g.add_edge(n78,n43,3.0303030303);
  g.add_edge(n78,n44,1.81818181818);
  g.add_edge(n78,n47,0.833333333333);
  g.add_edge(n78,n48,2.0);
  g.add_edge(n78,n50,0.847457627119);
  g.add_edge(n78,n51,1.0989010989);
  g.add_edge(n78,n53,1.51515151515);
  g.add_edge(n78,n54,0.440528634361);
  g.add_edge(n78,n61,1.92307692308);
  g.add_edge(n78,n64,0.413223140496);
  g.add_edge(n78,n66,1.17647058824);
  g.add_edge(n78,n68,1.02040816327);
  g.add_edge(n78,n71,0.952380952381);
  g.add_edge(n78,n73,1.2987012987);
  g.add_edge(n78,n75,0.909090909091);
  g.add_edge(n78,n77,1.3698630137);
  g.add_edge(n78,n79,1.06382978723);
  g.add_edge(n78,n81,1.49253731343);
  g.add_edge(n78,n90,0.952380952381);
  g.add_edge(n78,n91,1.20481927711);
  g.add_edge(n78,n93,0.925925925926);
  g.add_edge(n78,n94,0.952380952381);
  g.add_edge(n78,n95,1.13636363636);
  g.add_edge(n78,n102,1.26582278481);
  g.add_edge(n79,n1,0.943396226415);
  g.add_edge(n79,n3,0.943396226415);
  g.add_edge(n79,n5,1.0);
  g.add_edge(n79,n9,0.4329004329);
  g.add_edge(n79,n10,0.584795321637);
  g.add_edge(n79,n12,0.473933649289);
  g.add_edge(n79,n13,0.487804878049);
  g.add_edge(n79,n20,0.490196078431);
  g.add_edge(n79,n22,1.08695652174);
  g.add_edge(n79,n24,0.485436893204);
  g.add_edge(n79,n26,0.414937759336);
  g.add_edge(n79,n28,0.471698113208);
  g.add_edge(n79,n30,0.42194092827);
  g.add_edge(n79,n31,0.877192982456);
  g.add_edge(n79,n32,50.0);
  g.add_edge(n79,n34,1.04166666667);
  g.add_edge(n79,n37,0.431034482759);
  g.add_edge(n79,n43,11.1111111111);
  g.add_edge(n79,n44,0.429184549356);
  g.add_edge(n79,n47,0.564971751412);
  g.add_edge(n79,n49,1.04166666667);
  g.add_edge(n79,n50,3.44827586207);
  g.add_edge(n79,n52,1.0101010101);
  g.add_edge(n79,n53,0.45871559633);
  g.add_edge(n79,n54,0.689655172414);
  g.add_edge(n79,n55,1.0);
  g.add_edge(n79,n56,1.02040816327);
  g.add_edge(n79,n58,0.934579439252);
  g.add_edge(n79,n60,1.03092783505);
  g.add_edge(n79,n61,0.442477876106);
  g.add_edge(n79,n62,1.06382978723);
  g.add_edge(n79,n63,1.03092783505);
  g.add_edge(n79,n64,0.714285714286);
  g.add_edge(n79,n65,0.990099009901);
  g.add_edge(n79,n67,0.884955752212);
  g.add_edge(n79,n70,0.909090909091);
  g.add_edge(n79,n74,1.03092783505);
  g.add_edge(n79,n75,0.423728813559);
  g.add_edge(n79,n77,0.42735042735);
  g.add_edge(n79,n80,1.03092783505);
  g.add_edge(n79,n83,0.970873786408);
  g.add_edge(n79,n85,1.0989010989);
  g.add_edge(n79,n87,1.0989010989);
  g.add_edge(n79,n88,1.05263157895);
  g.add_edge(n79,n89,0.970873786408);
  g.add_edge(n79,n92,0.917431192661);
  g.add_edge(n79,n94,0.431034482759);
  g.add_edge(n79,n95,0.401606425703);
  g.add_edge(n79,n96,1.0752688172);
  g.add_edge(n79,n98,0.980392156863);
  g.add_edge(n79,n99,1.05263157895);
  g.add_edge(n79,n101,0.970873786408);
  g.add_edge(n79,n102,0.442477876106);
  g.add_edge(n80,n28,1.51515151515);
  g.add_edge(n80,n77,1.33333333333);
  g.add_edge(n80,n94,0.952380952381);
  g.add_edge(n80,n95,1.0752688172);
  g.add_edge(n80,n102,1.0752688172);
  g.add_edge(n81,n1,1.2987012987);
  g.add_edge(n81,n2,0.490196078431);
  g.add_edge(n81,n3,1.26582278481);
  g.add_edge(n81,n5,1.42857142857);
  g.add_edge(n81,n7,1.47058823529);
  g.add_edge(n81,n9,0.423728813559);
  g.add_edge(n81,n10,0.649350649351);
  g.add_edge(n81,n12,0.414937759336);
  g.add_edge(n81,n13,0.414937759336);
  g.add_edge(n81,n18,1.40845070423);
  g.add_edge(n81,n20,0.507614213198);
  g.add_edge(n81,n21,1.31578947368);
  g.add_edge(n81,n22,1.47058823529);
  g.add_edge(n81,n24,0.420168067227);
  g.add_edge(n81,n28,0.438596491228);
  g.add_edge(n81,n29,0.408163265306);
  g.add_edge(n81,n31,1.16279069767);
  g.add_edge(n81,n32,50.0);
  g.add_edge(n81,n33,1.49253731343);
  g.add_edge(n81,n34,1.44927536232);
  g.add_edge(n81,n35,0.446428571429);
  g.add_edge(n81,n36,2.32558139535);
  g.add_edge(n81,n37,0.404858299595);
  g.add_edge(n81,n39,0.47619047619);
  g.add_edge(n81,n42,1.51515151515);
  g.add_edge(n81,n43,14.2857142857);
  g.add_edge(n81,n45,1.40845070423);
  g.add_edge(n81,n46,1.19047619048);
  g.add_edge(n81,n47,0.537634408602);
  g.add_edge(n81,n48,0.408163265306);
  g.add_edge(n81,n49,1.51515151515);
  g.add_edge(n81,n50,5.0);
  g.add_edge(n81,n52,1.47058823529);
  g.add_edge(n81,n54,0.826446280992);
  g.add_edge(n81,n55,1.42857142857);
  g.add_edge(n81,n56,1.47058823529);
  g.add_edge(n81,n58,1.28205128205);
  g.add_edge(n81,n60,1.51515151515);
  g.add_edge(n81,n62,1.47058823529);
  g.add_edge(n81,n63,1.42857142857);
  g.add_edge(n81,n64,0.943396226415);
  g.add_edge(n81,n65,1.44927536232);
  g.add_edge(n81,n66,0.401606425703);
  g.add_edge(n81,n67,1.20481927711);
  g.add_edge(n81,n68,0.414937759336);
  g.add_edge(n81,n70,1.31578947368);
  g.add_edge(n81,n71,0.442477876106);
  g.add_edge(n81,n74,1.49253731343);
  g.add_edge(n81,n75,0.425531914894);
  g.add_edge(n81,n77,0.423728813559);
  g.add_edge(n81,n79,0.429184549356);
  g.add_edge(n81,n80,1.31578947368);
  g.add_edge(n81,n83,1.3698630137);
  g.add_edge(n81,n84,1.03092783505);
  g.add_edge(n81,n85,1.5625);
  g.add_edge(n81,n86,1.38888888889);
  g.add_edge(n81,n87,1.5625);
  g.add_edge(n81,n88,1.47058823529);
  g.add_edge(n81,n89,1.16279069767);
  g.add_edge(n81,n91,0.423728813559);
  g.add_edge(n81,n92,1.23456790123);
  g.add_edge(n81,n93,0.462962962963);
  g.add_edge(n81,n94,0.440528634361);
  g.add_edge(n81,n96,1.44927536232);
  g.add_edge(n81,n97,1.04166666667);
  g.add_edge(n81,n98,1.35135135135);
  g.add_edge(n81,n99,1.3698630137);
  g.add_edge(n81,n101,1.38888888889);
  g.add_edge(n81,n102,0.403225806452);
  g.add_edge(n82,n1,1.06382978723);
  g.add_edge(n82,n2,0.462962962963);
  g.add_edge(n82,n3,1.02040816327);
  g.add_edge(n82,n5,1.13636363636);
  g.add_edge(n82,n6,1.06382978723);
  g.add_edge(n82,n7,1.13636363636);
  g.add_edge(n82,n8,1.28205128205);
  g.add_edge(n82,n9,0.401606425703);
  g.add_edge(n82,n10,0.609756097561);
  g.add_edge(n82,n12,0.446428571429);
  g.add_edge(n82,n13,0.436681222707);
  g.add_edge(n82,n14,1.17647058824);
  g.add_edge(n82,n15,0.416666666667);
  g.add_edge(n82,n16,1.06382978723);
  g.add_edge(n82,n18,1.12359550562);
  g.add_edge(n82,n20,0.48309178744);
  g.add_edge(n82,n21,1.0752688172);
  g.add_edge(n82,n22,1.21951219512);
  g.add_edge(n82,n23,0.568181818182);
  g.add_edge(n82,n24,0.452488687783);
  g.add_edge(n82,n25,0.423728813559);
  g.add_edge(n82,n28,0.431034482759);
  g.add_edge(n82,n29,0.401606425703);
  g.add_edge(n82,n31,0.970873786408);
  g.add_edge(n82,n32,50.0);
  g.add_edge(n82,n33,1.14942528736);
  g.add_edge(n82,n34,1.20481927711);
  g.add_edge(n82,n35,0.442477876106);
  g.add_edge(n82,n36,1.85185185185);
  g.add_edge(n82,n38,0.45871559633);
  g.add_edge(n82,n39,0.485436893204);
  g.add_edge(n82,n41,1.75438596491);
  g.add_edge(n82,n42,1.16279069767);
  g.add_edge(n82,n43,14.2857142857);
  g.add_edge(n82,n45,1.12359550562);
  g.add_edge(n82,n46,0.961538461538);
  g.add_edge(n82,n47,0.523560209424);
  g.add_edge(n82,n48,0.446428571429);
  g.add_edge(n82,n49,1.19047619048);
  g.add_edge(n82,n50,3.7037037037);
  g.add_edge(n82,n51,0.406504065041);
  g.add_edge(n82,n52,1.14942528736);
  g.add_edge(n82,n53,0.416666666667);
  g.add_edge(n82,n54,0.735294117647);
  g.add_edge(n82,n55,1.13636363636);
  g.add_edge(n82,n56,1.16279069767);
  g.add_edge(n82,n58,1.02040816327);
  g.add_edge(n82,n60,1.19047619048);
  g.add_edge(n82,n62,1.21951219512);
  g.add_edge(n82,n63,1.17647058824);
  g.add_edge(n82,n64,0.78125);
  g.add_edge(n82,n65,1.12359550562);
  g.add_edge(n82,n67,1.0101010101);
  g.add_edge(n82,n70,1.0101010101);
  g.add_edge(n82,n71,0.413223140496);
  g.add_edge(n82,n74,1.17647058824);
  g.add_edge(n82,n75,0.406504065041);
  g.add_edge(n82,n76,1.06382978723);
  g.add_edge(n82,n78,1.17647058824);
  g.add_edge(n82,n80,1.13636363636);
  g.add_edge(n82,n83,1.0989010989);
  g.add_edge(n82,n84,0.847457627119);
  g.add_edge(n82,n85,1.21951219512);
  g.add_edge(n82,n86,1.13636363636);
  g.add_edge(n82,n87,1.25);
  g.add_edge(n82,n88,1.16279069767);
  g.add_edge(n82,n89,1.0989010989);
  g.add_edge(n82,n91,0.438596491228);
  g.add_edge(n82,n92,1.0101010101);
  g.add_edge(n82,n93,0.467289719626);
  g.add_edge(n82,n94,0.409836065574);
  g.add_edge(n82,n96,1.20481927711);
  g.add_edge(n82,n97,0.847457627119);
  g.add_edge(n82,n98,1.0752688172);
  g.add_edge(n82,n99,1.20481927711);
  g.add_edge(n82,n101,1.11111111111);
  g.add_edge(n82,n102,0.42194092827);
  g.add_edge(n83,n12,1.5625);
  g.add_edge(n83,n24,1.31578947368);
  g.add_edge(n83,n28,1.72413793103);
  g.add_edge(n83,n30,1.47058823529);
  g.add_edge(n83,n37,1.35135135135);
  g.add_edge(n83,n44,1.6393442623);
  g.add_edge(n83,n61,1.69491525424);
  g.add_edge(n83,n64,0.401606425703);
  g.add_edge(n83,n75,0.862068965517);
  g.add_edge(n83,n77,1.21951219512);
  g.add_edge(n83,n94,0.892857142857);
  g.add_edge(n83,n95,1.04166666667);
  g.add_edge(n83,n102,1.20481927711);
  g.add_edge(n84,n2,0.699300699301);
  g.add_edge(n84,n3,0.416666666667);
  g.add_edge(n84,n9,0.909090909091);
  g.add_edge(n84,n10,0.515463917526);
  g.add_edge(n84,n12,1.16279069767);
  g.add_edge(n84,n13,1.25);
  g.add_edge(n84,n17,1.0101010101);
  g.add_edge(n84,n20,0.666666666667);
  g.add_edge(n84,n24,1.0101010101);
  g.add_edge(n84,n26,0.943396226415);
  g.add_edge(n84,n28,1.19047619048);
  g.add_edge(n84,n30,1.05263157895);
  g.add_edge(n84,n32,25.0);
  g.add_edge(n84,n34,0.408163265306);
  g.add_edge(n84,n35,1.25);
  g.add_edge(n84,n37,1.02040816327);
  g.add_edge(n84,n39,0.729927007299);
  g.add_edge(n84,n43,3.7037037037);
  g.add_edge(n84,n44,1.13636363636);
  g.add_edge(n84,n47,0.787401574803);
  g.add_edge(n84,n49,0.403225806452);
  g.add_edge(n84,n50,0.900900900901);
  g.add_edge(n84,n53,1.03092783505);
  g.add_edge(n84,n54,0.411522633745);
  g.add_edge(n84,n61,1.16279069767);
  g.add_edge(n84,n66,0.833333333333);
  g.add_edge(n84,n68,0.746268656716);
  g.add_edge(n84,n71,0.729927007299);
  g.add_edge(n84,n73,0.909090909091);
  g.add_edge(n84,n75,0.709219858156);
  g.add_edge(n84,n77,0.925925925926);
  g.add_edge(n84,n79,0.757575757576);
  g.add_edge(n84,n85,0.408163265306);
  g.add_edge(n84,n87,0.404858299595);
  g.add_edge(n84,n91,0.884955752212);
  g.add_edge(n84,n93,0.714285714286);
  g.add_edge(n84,n94,0.740740740741);
  g.add_edge(n84,n95,0.8);
  g.add_edge(n84,n96,0.401606425703);
  g.add_edge(n84,n102,0.909090909091);
  g.add_edge(n85,n28,1.88679245283);
  g.add_edge(n85,n37,1.42857142857);
  g.add_edge(n85,n44,1.85185185185);
  g.add_edge(n85,n77,1.2987012987);
  g.add_edge(n85,n94,0.961538461538);
  g.add_edge(n85,n95,1.14942528736);
  g.add_edge(n85,n102,1.31578947368);
  g.add_edge(n86,n2,0.869565217391);
  g.add_edge(n86,n9,1.2987012987);
  g.add_edge(n86,n10,0.588235294118);
  g.add_edge(n86,n12,1.61290322581);
  g.add_edge(n86,n13,1.75438596491);
  g.add_edge(n86,n17,1.53846153846);
  g.add_edge(n86,n20,0.8);
  g.add_edge(n86,n24,1.3698630137);
  g.add_edge(n86,n26,1.28205128205);
  g.add_edge(n86,n28,1.78571428571);
  g.add_edge(n86,n30,1.53846153846);
  g.add_edge(n86,n32,25.0);
  g.add_edge(n86,n35,1.96078431373);
  g.add_edge(n86,n37,1.40845070423);
  g.add_edge(n86,n39,0.892857142857);
  g.add_edge(n86,n43,3.125);
  g.add_edge(n86,n44,1.66666666667);
  g.add_edge(n86,n47,0.793650793651);
  g.add_edge(n86,n50,0.862068965517);
  g.add_edge(n86,n53,1.42857142857);
  g.add_edge(n86,n54,0.429184549356);
  g.add_edge(n86,n61,1.75438596491);
  g.add_edge(n86,n64,0.404858299595);
  g.add_edge(n86,n66,1.13636363636);
  g.add_edge(n86,n68,0.980392156863);
  g.add_edge(n86,n71,0.925925925926);
  g.add_edge(n86,n73,1.25);
  g.add_edge(n86,n75,0.884955752212);
  g.add_edge(n86,n77,1.28205128205);
  g.add_edge(n86,n79,1.02040816327);
  g.add_edge(n86,n91,1.12359550562);
  g.add_edge(n86,n93,0.892857142857);
  g.add_edge(n86,n94,0.917431192661);
  g.add_edge(n86,n95,1.0989010989);
  g.add_edge(n86,n102,1.19047619048);
  g.add_edge(n87,n94,1.0);
  g.add_edge(n88,n9,1.35135135135);
  g.add_edge(n88,n10,0.606060606061);
  g.add_edge(n88,n12,1.72413793103);
  g.add_edge(n88,n24,1.47058823529);
  g.add_edge(n88,n28,1.88679245283);
  g.add_edge(n88,n30,1.61290322581);
  g.add_edge(n88,n37,1.47058823529);
  g.add_edge(n88,n44,1.78571428571);
  g.add_edge(n88,n61,1.88679245283);
  g.add_edge(n88,n64,0.413223140496);
  g.add_edge(n88,n75,0.925925925926);
  g.add_edge(n88,n77,1.3698630137);
  g.add_edge(n88,n94,0.952380952381);
  g.add_edge(n88,n95,1.13636363636);
  g.add_edge(n88,n102,1.26582278481);
  g.add_edge(n89,n28,1.25);
  g.add_edge(n89,n94,0.840336134454);
  g.add_edge(n89,n95,0.980392156863);
  g.add_edge(n89,n102,0.970873786408);
  g.add_edge(n90,n1,0.877192982456);
  g.add_edge(n90,n2,0.46511627907);
  g.add_edge(n90,n3,0.847457627119);
  g.add_edge(n90,n5,0.909090909091);
  g.add_edge(n90,n6,0.892857142857);
  g.add_edge(n90,n7,0.892857142857);
  g.add_edge(n90,n9,0.431034482759);
  g.add_edge(n90,n10,0.555555555556);
  g.add_edge(n90,n12,0.49504950495);
  g.add_edge(n90,n13,0.49504950495);
  g.add_edge(n90,n15,0.440528634361);
  g.add_edge(n90,n17,0.429184549356);
  g.add_edge(n90,n18,0.917431192661);
  g.add_edge(n90,n20,0.497512437811);
  g.add_edge(n90,n21,0.884955752212);
  g.add_edge(n90,n22,0.980392156863);
  g.add_edge(n90,n23,0.529100529101);
  g.add_edge(n90,n24,0.497512437811);
  g.add_edge(n90,n26,0.42194092827);
  g.add_edge(n90,n28,0.46511627907);
  g.add_edge(n90,n29,0.444444444444);
  g.add_edge(n90,n30,0.431034482759);
  g.add_edge(n90,n31,0.826446280992);
  g.add_edge(n90,n32,25.0);
  g.add_edge(n90,n33,0.917431192661);
  g.add_edge(n90,n34,1.02040816327);
  g.add_edge(n90,n35,0.487804878049);
  g.add_edge(n90,n36,1.61290322581);
  g.add_edge(n90,n37,0.431034482759);
  g.add_edge(n90,n39,0.505050505051);
  g.add_edge(n90,n42,0.934579439252);
  g.add_edge(n90,n43,6.66666666667);
  g.add_edge(n90,n44,0.45045045045);
  g.add_edge(n90,n45,0.900900900901);
  g.add_edge(n90,n46,0.793650793651);
  g.add_edge(n90,n47,0.552486187845);
  g.add_edge(n90,n48,0.502512562814);
  g.add_edge(n90,n49,0.970873786408);
  g.add_edge(n90,n50,2.85714285714);
  g.add_edge(n90,n52,0.934579439252);
  g.add_edge(n90,n53,0.452488687783);
  g.add_edge(n90,n54,0.662251655629);
  g.add_edge(n90,n55,0.909090909091);
  g.add_edge(n90,n56,0.925925925926);
  g.add_edge(n90,n58,0.826446280992);
  g.add_edge(n90,n60,0.925925925926);
  g.add_edge(n90,n61,0.45871559633);
  g.add_edge(n90,n62,1.0);
  g.add_edge(n90,n63,0.952380952381);
  g.add_edge(n90,n64,0.684931506849);
  g.add_edge(n90,n65,0.900900900901);
  g.add_edge(n90,n66,0.411522633745);
  g.add_edge(n90,n67,0.854700854701);
  g.add_edge(n90,n68,0.411522633745);
  g.add_edge(n90,n70,0.840336134454);
  g.add_edge(n90,n71,0.418410041841);
  g.add_edge(n90,n73,0.42735042735);
  g.add_edge(n90,n74,0.943396226415);
  g.add_edge(n90,n75,0.418410041841);
  g.add_edge(n90,n77,0.401606425703);
  g.add_edge(n90,n79,0.414937759336);
  g.add_edge(n90,n80,0.952380952381);
  g.add_edge(n90,n81,0.444444444444);
  g.add_edge(n90,n83,0.900900900901);
  g.add_edge(n90,n84,0.735294117647);
  g.add_edge(n90,n85,0.990099009901);
  g.add_edge(n90,n86,0.925925925926);
  g.add_edge(n90,n87,1.0);
  g.add_edge(n90,n88,0.970873786408);
  g.add_edge(n90,n89,0.884955752212);
  g.add_edge(n90,n91,0.471698113208);
  g.add_edge(n90,n92,0.826446280992);
  g.add_edge(n90,n93,0.47619047619);
  g.add_edge(n90,n95,0.404858299595);
  g.add_edge(n90,n96,0.970873786408);
  g.add_edge(n90,n97,0.724637681159);
  g.add_edge(n90,n98,0.892857142857);
  g.add_edge(n90,n99,0.952380952381);
  g.add_edge(n90,n101,0.892857142857);
  g.add_edge(n90,n102,0.444444444444);
  g.add_edge(n91,n1,1.08695652174);
  g.add_edge(n91,n3,1.08695652174);
  g.add_edge(n91,n5,1.19047619048);
  g.add_edge(n91,n9,0.42735042735);
  g.add_edge(n91,n10,0.59880239521);
  g.add_edge(n91,n12,0.434782608696);
  g.add_edge(n91,n13,0.413223140496);
  g.add_edge(n91,n20,0.49504950495);
  g.add_edge(n91,n22,1.17647058824);
  g.add_edge(n91,n24,0.414937759336);
  g.add_edge(n91,n26,0.431034482759);
  g.add_edge(n91,n28,0.45871559633);
  g.add_edge(n91,n30,0.404858299595);
  g.add_edge(n91,n31,0.970873786408);
  g.add_edge(n91,n32,50.0);
  g.add_edge(n91,n34,1.20481927711);
  g.add_edge(n91,n35,0.487804878049);
  g.add_edge(n91,n37,0.442477876106);
  g.add_edge(n91,n42,1.21951219512);
  g.add_edge(n91,n43,8.33333333333);
  g.add_edge(n91,n44,0.416666666667);
  g.add_edge(n91,n47,0.502512562814);
  g.add_edge(n91,n49,1.20481927711);
  g.add_edge(n91,n50,3.57142857143);
  g.add_edge(n91,n52,1.14942528736);
  g.add_edge(n91,n53,0.42194092827);
  g.add_edge(n91,n54,0.757575757576);
  g.add_edge(n91,n55,1.16279069767);
  g.add_edge(n91,n56,1.17647058824);
  g.add_edge(n91,n58,1.0752688172);
  g.add_edge(n91,n60,1.20481927711);
  g.add_edge(n91,n61,0.429184549356);
  g.add_edge(n91,n62,1.17647058824);
  g.add_edge(n91,n63,1.20481927711);
  g.add_edge(n91,n64,0.819672131148);
  g.add_edge(n91,n65,1.17647058824);
  g.add_edge(n91,n67,1.05263157895);
  g.add_edge(n91,n68,0.431034482759);
  g.add_edge(n91,n70,1.03092783505);
  g.add_edge(n91,n71,0.487804878049);
  g.add_edge(n91,n74,1.23456790123);
  g.add_edge(n91,n75,0.440528634361);
  g.add_edge(n91,n77,0.45045045045);
  g.add_edge(n91,n79,0.480769230769);
  g.add_edge(n91,n80,1.04166666667);
  g.add_edge(n91,n83,1.13636363636);
  g.add_edge(n91,n85,1.19047619048);
  g.add_edge(n91,n87,1.26582278481);
  g.add_edge(n91,n88,1.19047619048);
  g.add_edge(n91,n89,0.943396226415);
  g.add_edge(n91,n92,1.06382978723);
  g.add_edge(n91,n94,0.448430493274);
  g.add_edge(n91,n95,0.411522633745);
  g.add_edge(n91,n96,1.0752688172);
  g.add_edge(n91,n98,1.12359550562);
  g.add_edge(n91,n99,1.0989010989);
  g.add_edge(n91,n101,1.14942528736);
  g.add_edge(n91,n102,0.404858299595);
  g.add_edge(n92,n94,0.826446280992);
  g.add_edge(n93,n1,0.833333333333);
  g.add_edge(n93,n3,0.884955752212);
  g.add_edge(n93,n5,0.925925925926);
  g.add_edge(n93,n9,0.487804878049);
  g.add_edge(n93,n10,0.523560209424);
  g.add_edge(n93,n12,0.510204081633);
  g.add_edge(n93,n13,0.497512437811);
  g.add_edge(n93,n20,0.487804878049);
  g.add_edge(n93,n21,0.847457627119);
  g.add_edge(n93,n22,0.925925925926);
  g.add_edge(n93,n24,0.46511627907);
  g.add_edge(n93,n26,0.446428571429);
  g.add_edge(n93,n28,0.520833333333);
  g.add_edge(n93,n30,0.462962962963);
  g.add_edge(n93,n31,0.787401574803);
  g.add_edge(n93,n32,50.0);
  g.add_edge(n93,n34,0.917431192661);
  g.add_edge(n93,n35,0.512820512821);
  g.add_edge(n93,n37,0.487804878049);
  g.add_edge(n93,n42,0.925925925926);
  g.add_edge(n93,n43,11.1111111111);
  g.add_edge(n93,n44,0.471698113208);
  g.add_edge(n93,n46,0.793650793651);
  g.add_edge(n93,n47,0.518134715026);
  g.add_edge(n93,n49,0.917431192661);
  g.add_edge(n93,n50,2.12765957447);
  g.add_edge(n93,n52,0.900900900901);
  g.add_edge(n93,n53,0.462962962963);
  g.add_edge(n93,n54,0.621118012422);
  g.add_edge(n93,n55,0.892857142857);
  g.add_edge(n93,n56,0.892857142857);
  g.add_edge(n93,n58,0.826446280992);
  g.add_edge(n93,n60,0.900900900901);
  g.add_edge(n93,n61,0.49504950495);
  g.add_edge(n93,n62,0.909090909091);
  g.add_edge(n93,n63,0.917431192661);
  g.add_edge(n93,n64,0.675675675676);
  g.add_edge(n93,n65,0.900900900901);
  g.add_edge(n93,n67,0.806451612903);
  g.add_edge(n93,n68,0.444444444444);
  g.add_edge(n93,n70,0.847457627119);
  g.add_edge(n93,n71,0.462962962963);
  g.add_edge(n93,n74,0.892857142857);
  g.add_edge(n93,n75,0.429184549356);
  g.add_edge(n93,n77,0.5);
  g.add_edge(n93,n79,0.462962962963);
  g.add_edge(n93,n80,0.833333333333);
  g.add_edge(n93,n83,0.869565217391);
  g.add_edge(n93,n85,0.970873786408);
  g.add_edge(n93,n87,0.943396226415);
  g.add_edge(n93,n88,0.925925925926);
  g.add_edge(n93,n89,0.763358778626);
  g.add_edge(n93,n91,0.45045045045);
  g.add_edge(n93,n92,0.813008130081);
  g.add_edge(n93,n94,0.462962962963);
  g.add_edge(n93,n95,0.4329004329);
  g.add_edge(n93,n96,0.877192982456);
  g.add_edge(n93,n98,0.862068965517);
  g.add_edge(n93,n99,0.826446280992);
  g.add_edge(n93,n101,0.854700854701);
  g.add_edge(n93,n102,0.438596491228);
  g.add_edge(n94,n99,0.952380952381);
  g.add_edge(n95,n28,0.45045045045);
  g.add_edge(n95,n52,1.08695652174);
  g.add_edge(n95,n62,1.12359550562);
  g.add_edge(n95,n87,1.19047619048);
  g.add_edge(n95,n92,0.961538461538);
  g.add_edge(n95,n94,0.403225806452);
  g.add_edge(n95,n98,1.03092783505);
  g.add_edge(n95,n99,1.11111111111);
  g.add_edge(n96,n9,1.31578947368);
  g.add_edge(n96,n10,0.568181818182);
  g.add_edge(n96,n12,1.44927536232);
  g.add_edge(n96,n24,1.31578947368);
  g.add_edge(n96,n28,1.66666666667);
  g.add_edge(n96,n30,1.44927536232);
  g.add_edge(n96,n37,1.53846153846);
  g.add_edge(n96,n44,1.5625);
  g.add_edge(n96,n61,1.72413793103);
  g.add_edge(n96,n64,0.418410041841);
  g.add_edge(n96,n75,0.934579439252);
  g.add_edge(n96,n77,1.33333333333);
  g.add_edge(n96,n94,0.970873786408);
  g.add_edge(n96,n95,1.13636363636);
  g.add_edge(n96,n102,1.16279069767);
  g.add_edge(n97,n3,0.413223140496);
  g.add_edge(n97,n9,0.917431192661);
  g.add_edge(n97,n10,0.531914893617);
  g.add_edge(n97,n12,1.19047619048);
  g.add_edge(n97,n13,1.28205128205);
  g.add_edge(n97,n20,0.684931506849);
  g.add_edge(n97,n24,1.05263157895);
  g.add_edge(n97,n26,0.943396226415);
  g.add_edge(n97,n28,1.16279069767);
  g.add_edge(n97,n30,1.0752688172);
  g.add_edge(n97,n32,25.0);
  g.add_edge(n97,n34,0.406504065041);
  g.add_edge(n97,n35,1.25);
  g.add_edge(n97,n37,1.02040816327);
  g.add_edge(n97,n43,4.16666666667);
  g.add_edge(n97,n44,1.16279069767);
  g.add_edge(n97,n47,0.757575757576);
  g.add_edge(n97,n49,0.403225806452);
  g.add_edge(n97,n50,0.877192982456);
  g.add_edge(n97,n53,1.05263157895);
  g.add_edge(n97,n54,0.42194092827);
  g.add_edge(n97,n61,1.19047619048);
  g.add_edge(n97,n62,0.401606425703);
  g.add_edge(n97,n68,0.757575757576);
  g.add_edge(n97,n71,0.729927007299);
  g.add_edge(n97,n75,0.709219858156);
  g.add_edge(n97,n77,0.925925925926);
  g.add_edge(n97,n79,0.769230769231);
  g.add_edge(n97,n85,0.404858299595);
  g.add_edge(n97,n87,0.401606425703);
  g.add_edge(n97,n91,0.909090909091);
  g.add_edge(n97,n93,0.724637681159);
  g.add_edge(n97,n94,0.729927007299);
  g.add_edge(n97,n95,0.813008130081);
  g.add_edge(n97,n102,0.925925925926);
  g.add_edge(n98,n28,1.5873015873);
  g.add_edge(n98,n94,0.892857142857);
  g.add_edge(n100,n2,0.8);
  g.add_edge(n100,n3,0.409836065574);
  g.add_edge(n100,n7,0.404858299595);
  g.add_edge(n100,n8,0.408163265306);
  g.add_edge(n100,n9,1.0752688172);
  g.add_edge(n100,n10,0.546448087432);
  g.add_edge(n100,n11,1.04166666667);
  g.add_edge(n100,n12,1.3698630137);
  g.add_edge(n100,n13,1.53846153846);
  g.add_edge(n100,n15,0.793650793651);
  g.add_edge(n100,n17,1.26582278481);
  g.add_edge(n100,n20,0.78125);
  g.add_edge(n100,n23,0.502512562814);
  g.add_edge(n100,n24,1.17647058824);
  g.add_edge(n100,n25,0.900900900901);
  g.add_edge(n100,n26,1.11111111111);
  g.add_edge(n100,n28,1.3698630137);
  g.add_edge(n100,n29,1.2987012987);
  g.add_edge(n100,n30,1.26582278481);
  g.add_edge(n100,n31,0.408163265306);
  g.add_edge(n100,n32,25.0);
  g.add_edge(n100,n34,0.409836065574);
  g.add_edge(n100,n35,1.51515151515);
  g.add_edge(n100,n36,0.787401574803);
  g.add_edge(n100,n37,1.20481927711);
  g.add_edge(n100,n38,1.38888888889);
  g.add_edge(n100,n39,0.833333333333);
  g.add_edge(n100,n41,2.63157894737);
  g.add_edge(n100,n43,3.84615384615);
  g.add_edge(n100,n44,1.3698630137);
  g.add_edge(n100,n47,0.854700854701);
  g.add_edge(n100,n48,1.47058823529);
  g.add_edge(n100,n49,0.408163265306);
  g.add_edge(n100,n50,0.877192982456);
  g.add_edge(n100,n51,0.952380952381);
  g.add_edge(n100,n53,1.23456790123);
  g.add_edge(n100,n54,0.438596491228);
  g.add_edge(n100,n61,1.44927536232);
  g.add_edge(n100,n66,1.0);
  g.add_edge(n100,n68,0.909090909091);
  g.add_edge(n100,n69,0.917431192661);
  g.add_edge(n100,n71,0.847457627119);
  g.add_edge(n100,n72,1.5873015873);
  g.add_edge(n100,n73,1.0989010989);
  g.add_edge(n100,n75,0.813008130081);
  g.add_edge(n100,n77,1.13636363636);
  g.add_edge(n100,n79,0.917431192661);
  g.add_edge(n100,n81,1.20481927711);
  g.add_edge(n100,n82,1.02040816327);
  g.add_edge(n100,n85,0.403225806452);
  g.add_edge(n100,n87,0.403225806452);
  g.add_edge(n100,n90,0.847457627119);
  g.add_edge(n100,n91,1.05263157895);
  g.add_edge(n100,n93,0.813008130081);
  g.add_edge(n100,n94,0.862068965517);
  g.add_edge(n100,n95,0.961538461538);
  g.add_edge(n100,n102,1.12359550562);
  g.add_edge(n101,n9,1.23456790123);
  g.add_edge(n101,n10,0.584795321637);
  g.add_edge(n101,n12,1.66666666667);
  g.add_edge(n101,n13,1.78571428571);
  g.add_edge(n101,n20,0.787401574803);
  g.add_edge(n101,n24,1.3698630137);
  g.add_edge(n101,n26,1.25);
  g.add_edge(n101,n28,1.66666666667);
  g.add_edge(n101,n30,1.47058823529);
  g.add_edge(n101,n32,25.0);
  g.add_edge(n101,n37,1.38888888889);
  g.add_edge(n101,n43,3.22580645161);
  g.add_edge(n101,n44,1.66666666667);
  g.add_edge(n101,n47,0.813008130081);
  g.add_edge(n101,n50,0.869565217391);
  g.add_edge(n101,n53,1.40845070423);
  g.add_edge(n101,n54,0.4329004329);
  g.add_edge(n101,n61,1.66666666667);
  g.add_edge(n101,n64,0.404858299595);
  g.add_edge(n101,n75,0.869565217391);
  g.add_edge(n101,n77,1.25);
  g.add_edge(n101,n94,0.900900900901);
  g.add_edge(n101,n95,1.05263157895);
  g.add_edge(n101,n102,1.19047619048);
  g.add_edge(n102,n28,0.440528634361);
  g.add_edge(n102,n52,1.23456790123);
  g.add_edge(n102,n62,1.23456790123);
  g.add_edge(n102,n87,1.31578947368);
  g.add_edge(n102,n92,1.0752688172);
  g.add_edge(n102,n94,0.4329004329);
  g.add_edge(n102,n98,1.14942528736);
  g.add_edge(n102,n99,1.12359550562);
}
